{"version":3,"sources":["../../../../src/common/framework/query/query.ts"],"names":["assert","encodeURIComponentSelectively","kBigSeparator","kPathSeparator","kWildcard","kParamSeparator","stringifyPublicParams","TestQueryMultiFile","constructor","suite","file","filePathParts","toString","toStringHelper","join","toHTML","TestQueryMultiTest","test","length","testPathParts","TestQueryMultiCase","params","paramsParts","TestQuerySingleCase"],"mappings":"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","sourcesContent":["import { CaseParams } from '../params_utils.js';\nimport { assert } from '../util/util.js';\n\nimport { encodeURIComponentSelectively } from './encode_selectively.js';\nimport { kBigSeparator, kPathSeparator, kWildcard, kParamSeparator } from './separators.js';\nimport { stringifyPublicParams } from './stringify_params.js';\n\nexport type TestQuery =\n  | TestQuerySingleCase\n  | TestQueryMultiCase\n  | TestQueryMultiTest\n  | TestQueryMultiFile;\n\nexport class TestQueryMultiFile {\n  readonly isMultiFile: boolean = true;\n  readonly suite: string;\n  readonly filePathParts: readonly string[];\n\n  constructor(suite: string, file: readonly string[]) {\n    this.suite = suite;\n    this.filePathParts = [...file];\n  }\n\n  toString(): string {\n    return encodeURIComponentSelectively(this.toStringHelper().join(kBigSeparator));\n  }\n\n  toHTML(): string {\n    return this.toStringHelper().join(kBigSeparator + '<wbr>');\n  }\n\n  protected toStringHelper(): string[] {\n    return [this.suite, [...this.filePathParts, kWildcard].join(kPathSeparator)];\n  }\n}\n\nexport class TestQueryMultiTest extends TestQueryMultiFile {\n  readonly isMultiFile: false = false;\n  readonly isMultiTest: boolean = true;\n  readonly testPathParts: readonly string[];\n\n  constructor(suite: string, file: readonly string[], test: readonly string[]) {\n    super(suite, file);\n    assert(file.length > 0, 'multi-test (or finer) query must have file-path');\n    this.testPathParts = [...test];\n  }\n\n  protected toStringHelper(): string[] {\n    return [\n      this.suite,\n      this.filePathParts.join(kPathSeparator),\n      [...this.testPathParts, kWildcard].join(kPathSeparator),\n    ];\n  }\n}\n\nexport class TestQueryMultiCase extends TestQueryMultiTest {\n  readonly isMultiTest: false = false;\n  readonly isMultiCase: boolean = true;\n  readonly params: CaseParams;\n\n  constructor(suite: string, file: readonly string[], test: readonly string[], params: CaseParams) {\n    super(suite, file, test);\n    assert(test.length > 0, 'multi-case (or finer) query must have test-path');\n    this.params = { ...params };\n  }\n\n  protected toStringHelper(): string[] {\n    const paramsParts = stringifyPublicParams(this.params);\n    return [\n      this.suite,\n      this.filePathParts.join(kPathSeparator),\n      this.testPathParts.join(kPathSeparator),\n      [...paramsParts, kWildcard].join(kParamSeparator),\n    ];\n  }\n}\n\nexport class TestQuerySingleCase extends TestQueryMultiCase {\n  readonly isMultiCase: false = false;\n\n  protected toStringHelper(): string[] {\n    const paramsParts = stringifyPublicParams(this.params);\n    return [\n      this.suite,\n      this.filePathParts.join(kPathSeparator),\n      this.testPathParts.join(kPathSeparator),\n      paramsParts.join(kParamSeparator),\n    ];\n  }\n}\n"],"file":"query.js"}