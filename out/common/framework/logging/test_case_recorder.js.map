{"version":3,"sources":["../../../../src/common/framework/logging/test_case_recorder.ts"],"names":["SkipTestCase","now","assert","LogMessageWithStack","PassState","TestCaseRecorder","constructor","result","debugging","pass","start","startTime","finish","timeMilliseconds","timems","Math","ceil","status","state","logs","injectResult","injectedResult","Object","assign","debug","ex","push","warn","setState","fail","skipped","skip","threw","max"],"mappings":"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","sourcesContent":["import { SkipTestCase } from '../fixture.js';\nimport { now, assert } from '../util/util.js';\n\nimport { LogMessageWithStack } from './log_message.js';\nimport { LiveTestCaseResult, Status } from './result.js';\n\nenum PassState {\n  pass = 0,\n  skip = 1,\n  warn = 2,\n  fail = 3,\n}\n\n// Holds onto a LiveTestCaseResult owned by the Logger, and writes the results into it.\nexport class TestCaseRecorder {\n  private result: LiveTestCaseResult;\n  private state = PassState.pass;\n  private startTime = -1;\n  private logs: LogMessageWithStack[] = [];\n  private debugging = false;\n\n  constructor(result: LiveTestCaseResult, debugging: boolean) {\n    this.result = result;\n    this.debugging = debugging;\n  }\n\n  start(): void {\n    assert(this.startTime < 0, 'TestCaseRecorder cannot be reused');\n    this.startTime = now();\n  }\n\n  finish(): void {\n    assert(this.startTime >= 0, 'finish() before start()');\n\n    const timeMilliseconds = now() - this.startTime;\n    // Round to next microsecond to avoid storing useless .xxxx00000000000002 in results.\n    this.result.timems = Math.ceil(timeMilliseconds * 1000) / 1000;\n    this.result.status = PassState[this.state] as Status; // Convert numeric enum back to string\n\n    this.result.logs = this.logs;\n  }\n\n  injectResult(injectedResult: LiveTestCaseResult): void {\n    Object.assign(this.result, injectedResult);\n  }\n\n  debug(ex: Error): void {\n    if (!this.debugging) {\n      return;\n    }\n    this.logs.push(new LogMessageWithStack('DEBUG', ex, false));\n  }\n\n  warn(ex: Error): void {\n    this.setState(PassState.warn);\n    this.logs.push(new LogMessageWithStack('WARN', ex));\n  }\n\n  fail(ex: Error): void {\n    this.setState(PassState.fail);\n    this.logs.push(new LogMessageWithStack('FAIL', ex));\n  }\n\n  skipped(ex: SkipTestCase): void {\n    this.setState(PassState.skip);\n    this.logs.push(new LogMessageWithStack('SKIP', ex));\n  }\n\n  threw(ex: Error): void {\n    if (ex instanceof SkipTestCase) {\n      this.skipped(ex);\n      return;\n    }\n\n    this.setState(PassState.fail);\n    this.logs.push(new LogMessageWithStack('EXCEPTION', ex));\n  }\n\n  private setState(state: PassState): void {\n    this.state = Math.max(this.state, state);\n  }\n}\n"],"file":"test_case_recorder.js"}