{"version":3,"sources":["../../../../src/common/internal/logging/log_message.ts"],"names":["extractImportantStackTrace","LogMessageWithStack","Error","firstLineOnlyMessage","undefined","constructor","name","ex","message","stack","extra","setFirstLineOnly","toJSON","m","split","prettyPrintLog","log","replace"],"mappings":";AAAA;AACA,YAASA,0BAAT,QAA2C,aAA3C;AAEA,OAAO,MAAMC,mBAAN,SAAkCC,KAAlC,CAAwC;;;AAGrCC,EAAAA,oBAAR,GAAmDC,SAAnD;;AAEAC,EAAAA,WAAW,CAACC,IAAD,EAAeC,EAAf,EAA2C;AACpD,UAAMA,EAAE,CAACC,OAAT;;AAEA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,KAAL,GAAaF,EAAE,CAACE,KAAhB;AACA,QAAI,WAAWF,EAAf,EAAmB;AACjB,WAAKG,KAAL,GAAaH,EAAE,CAACG,KAAhB;AACD;AACF;;AAED;AACAC,EAAAA,gBAAgB,CAACR,oBAAD,EAA+B;AAC7C,SAAKA,oBAAL,KAA8BA,oBAA9B;AACD;;AAEDS,EAAAA,MAAM,GAAW;AACf,QAAIC,CAAC,GAAG,KAAKP,IAAb;AACA,QAAI,KAAKH,oBAAL,KAA8BC,SAAlC,EAA6C;AAC3C,UAAI,KAAKI,OAAT,EAAkBK,CAAC,IAAI,OAAO,KAAKL,OAAL,CAAaM,KAAb,CAAmB,IAAnB,EAAyB,CAAzB,CAAZ;AAClB,UAAI,KAAKX,oBAAL,KAA8B,EAAlC,EAAsC;AACpCU,QAAAA,CAAC,IAAK,aAAY,KAAKV,oBAAqB,GAA5C;AACD;AACF,KALD,MAKO;AACL,UAAI,KAAKK,OAAT,EAAkBK,CAAC,IAAI,OAAO,KAAKL,OAAjB;AAClB,UAAI,KAAKC,KAAT,EAAgBI,CAAC,IAAI,OAAOb,0BAA0B,CAAC,IAAD,CAAtC;AACjB;AACD,WAAOa,CAAP;AACD,GAhC4C;;;AAmC/C;AACA;AACA;AACA;AACA,OAAO,SAASE,cAAT,CAAwBC,GAAxB,EAA0D;AAC/D,SAAO,SAASA,GAAG,CAACJ,MAAJ,GAAaK,OAAb,CAAqB,KAArB,EAA4B,QAA5B,CAAhB;AACD","sourcesContent":["import { ErrorWithExtra } from '../../util/util.js';\nimport { extractImportantStackTrace } from '../stack.js';\n\nexport class LogMessageWithStack extends Error {\n  readonly extra: unknown;\n\n  private firstLineOnlyMessage: string | undefined = undefined;\n\n  constructor(name: string, ex: Error | ErrorWithExtra) {\n    super(ex.message);\n\n    this.name = name;\n    this.stack = ex.stack;\n    if ('extra' in ex) {\n      this.extra = ex.extra;\n    }\n  }\n\n  /** Set a flag so the details and stack are not printed in toJSON(). */\n  setFirstLineOnly(firstLineOnlyMessage: string) {\n    this.firstLineOnlyMessage ??= firstLineOnlyMessage;\n  }\n\n  toJSON(): string {\n    let m = this.name;\n    if (this.firstLineOnlyMessage !== undefined) {\n      if (this.message) m += ': ' + this.message.split('\\n')[0];\n      if (this.firstLineOnlyMessage !== '') {\n        m += ` (elided: ${this.firstLineOnlyMessage})`;\n      }\n    } else {\n      if (this.message) m += ': ' + this.message;\n      if (this.stack) m += '\\n' + extractImportantStackTrace(this);\n    }\n    return m;\n  }\n}\n\n/**\n * Returns a string, nicely indented, for debug logs.\n * This is used in the cmdline and wpt runtimes. In WPT, it shows up in the `*-actual.txt` file.\n */\nexport function prettyPrintLog(log: LogMessageWithStack): string {\n  return '  - ' + log.toJSON().replace(/\\n/g, '\\n    ');\n}\n"],"file":"log_message.js"}