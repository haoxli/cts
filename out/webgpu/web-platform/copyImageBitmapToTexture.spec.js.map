{"version":3,"sources":["../../../src/webgpu/web-platform/copyImageBitmapToTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","GPUTest","calculateRowPitch","width","bytesPerPixel","bytesPerRow","F","checkCopyImageBitmapResult","src","expected","height","exp","Uint8Array","buffer","byteOffset","byteLength","rowPitch","dst","createCopyForMapRead","eventualAsyncExpectation","niceStack","actual","mapReadAsync","check","checkBufferWithRowPitch","undefined","message","rec","fail","destroy","lines","failedPixels","i","j","indexExp","indexActual","push","join","doTestAndCheckResult","imageBitmapCopyView","dstTextureCopyView","copySize","expectedData","device","defaultQueue","copyImageBitmapToTexture","imageBitmap","dstTexture","texture","testBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","encoder","createCommandEncoder","copyTextureToBuffer","mipLevel","origin","x","y","z","depth","submit","finish","g","test","combine","fn","t","alpha","orientation","imagePixels","Uint8ClampedArray","imageData","ImageData","createImageBitmap","premultiplyAlpha","imageOrientation","createTexture","format","GPUTextureUsage","expectedPixels","pos_image_pixel","pos_expected_value","alpha_value_position","imageCanvas","document","createElement","OffscreenCanvas","skip","imageCanvasContext","getContext","putImageData","getImageData","data"],"mappings":"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","sourcesContent":["export const description = `\ncopy imageBitmap To texture tests.\n`;\n\nimport { poptions, params } from '../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../common/framework/test_group.js';\nimport { GPUTest } from '../gpu_test.js';\n\nfunction calculateRowPitch(width: number, bytesPerPixel: number): number {\n  const bytesPerRow = width * bytesPerPixel;\n  // Rounds up to a multiple of 256 according to WebGPU requirements.\n  return (((bytesPerRow - 1) >> 8) + 1) << 8;\n}\n\nclass F extends GPUTest {\n  checkCopyImageBitmapResult(\n    src: GPUBuffer,\n    expected: ArrayBufferView,\n    width: number,\n    height: number,\n    bytesPerPixel: number\n  ): void {\n    const exp = new Uint8Array(expected.buffer, expected.byteOffset, expected.byteLength);\n    const rowPitch = calculateRowPitch(width, bytesPerPixel);\n    const dst = this.createCopyForMapRead(src, rowPitch * height);\n\n    this.eventualAsyncExpectation(async niceStack => {\n      const actual = new Uint8Array(await dst.mapReadAsync());\n      const check = this.checkBufferWithRowPitch(\n        actual,\n        exp,\n        width,\n        height,\n        rowPitch,\n        bytesPerPixel\n      );\n      if (check !== undefined) {\n        niceStack.message = check;\n        this.rec.fail(niceStack);\n      }\n      dst.destroy();\n    });\n  }\n\n  checkBufferWithRowPitch(\n    actual: Uint8Array,\n    exp: Uint8Array,\n    width: number,\n    height: number,\n    rowPitch: number,\n    bytesPerPixel: number\n  ): string | undefined {\n    const lines = [];\n    let failedPixels = 0;\n    for (let i = 0; i < height; ++i) {\n      const bytesPerRow = width * bytesPerPixel;\n      for (let j = 0; j < bytesPerRow; ++j) {\n        const indexExp = j + i * bytesPerRow;\n        const indexActual = j + rowPitch * i;\n        if (actual[indexActual] !== exp[indexExp]) {\n          if (failedPixels > 4) {\n            break;\n          }\n          failedPixels++;\n          lines.push(`at [${indexExp}], expected ${exp[indexExp]}, got ${actual[indexActual]}`);\n        }\n      }\n      if (failedPixels > 4) {\n        lines.push('... and more');\n        break;\n      }\n    }\n    return failedPixels > 0 ? lines.join('\\n') : undefined;\n  }\n\n  doTestAndCheckResult(\n    imageBitmapCopyView: GPUImageBitmapCopyView,\n    dstTextureCopyView: GPUTextureCopyView,\n    copySize: GPUExtent3D,\n    bytesPerPixel: number,\n    expectedData: Uint8ClampedArray\n  ): void {\n    this.device.defaultQueue.copyImageBitmapToTexture(\n      imageBitmapCopyView,\n      dstTextureCopyView,\n      copySize\n    );\n\n    const imageBitmap = imageBitmapCopyView.imageBitmap;\n    const dstTexture = dstTextureCopyView.texture;\n\n    const bytesPerRow = calculateRowPitch(imageBitmap.width, bytesPerPixel);\n    const testBuffer = this.device.createBuffer({\n      size: bytesPerRow * imageBitmap.height,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = this.device.createCommandEncoder();\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n      { buffer: testBuffer, bytesPerRow },\n      { width: imageBitmap.width, height: imageBitmap.height, depth: 1 }\n    );\n    this.device.defaultQueue.submit([encoder.finish()]);\n\n    this.checkCopyImageBitmapResult(\n      testBuffer,\n      expectedData,\n      imageBitmap.width,\n      imageBitmap.height,\n      bytesPerPixel\n    );\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('from_ImageData')\n  .params(\n    params()\n      .combine(poptions('width', [1, 2, 4, 15, 255, 256]))\n      .combine(poptions('height', [1, 2, 4, 15, 255, 256]))\n      .combine(poptions('alpha', ['none', 'premultiply']))\n      .combine(poptions('orientation', ['none', 'flipY']))\n  )\n  .fn(async t => {\n    const { width, height, alpha, orientation } = t.params;\n\n    // The texture format is rgba8unorm, so the bytes per pixel is 4.\n    const bytesPerPixel = 4;\n\n    const imagePixels = new Uint8ClampedArray(bytesPerPixel * width * height);\n    if (alpha === 'premultiply') {\n      // Make expected value simple to construct:\n      // Input is (255, 255, 255, a), which will be stored into the ImageBitmap\n      // as (a, a, a, a).\n      for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n        imagePixels[i] = i % 4 !== 3 ? 255 : i % 256;\n      }\n    } else {\n      for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n        imagePixels[i] = i % 4 === 3 ? 255 : i % 256;\n      }\n    }\n\n    const imageData = new ImageData(imagePixels, width, height);\n    const imageBitmap = await (createImageBitmap as any)(imageData, {\n      premultiplyAlpha: alpha,\n      imageOrientation: orientation,\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width: imageBitmap.width,\n        height: imageBitmap.height,\n        depth: 1,\n      },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n\n    // Construct expected value\n    const expectedPixels = new Uint8ClampedArray(bytesPerPixel * width * height);\n    for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n      expectedPixels[i] = imagePixels[i];\n    }\n\n    if (orientation === 'flipY') {\n      for (let i = 0; i < height; ++i) {\n        for (let j = 0; j < width * bytesPerPixel; ++j) {\n          const pos_image_pixel = (height - i - 1) * width * bytesPerPixel + j;\n          const pos_expected_value = i * width * bytesPerPixel + j;\n          expectedPixels[pos_expected_value] = imagePixels[pos_image_pixel];\n        }\n      }\n    }\n\n    if (alpha === 'premultiply') {\n      for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n        const alpha_value_position = 3 - (i % 4) + i;\n        if (i % 4 !== 3) {\n          // Expected value is (a, a, a, a)\n          expectedPixels[i] = expectedPixels[alpha_value_position];\n        }\n      }\n    }\n\n    t.doTestAndCheckResult(\n      { imageBitmap, origin: { x: 0, y: 0 } },\n      { texture: dst },\n      { width: imageBitmap.width, height: imageBitmap.height, depth: 1 },\n      bytesPerPixel,\n      expectedPixels\n    );\n  });\n\ng.test('from_canvas')\n  .params(\n    params()\n      .combine(poptions('width', [1, 2, 4, 15, 255, 256]))\n      .combine(poptions('height', [1, 2, 4, 15, 255, 256]))\n  )\n  .fn(async t => {\n    const { width, height } = t.params;\n\n    // CTS sometimes runs on worker threads, where document is not available.\n    // In this case, OffscreenCanvas can be used instead of <canvas>.\n    // But some browsers don't support OffscreenCanvas, and some don't\n    // support '2d' contexts on OffscreenCanvas.\n    // In this situation, the case will be skipped.\n    let imageCanvas;\n    if (typeof document !== 'undefined') {\n      imageCanvas = document.createElement('canvas');\n      imageCanvas.width = width;\n      imageCanvas.height = height;\n    } else if (typeof OffscreenCanvas === 'undefined') {\n      t.skip('OffscreenCanvas is not supported');\n      return;\n    } else {\n      imageCanvas = new OffscreenCanvas(width, height);\n    }\n    const imageCanvasContext = imageCanvas.getContext('2d');\n    if (imageCanvasContext === null) {\n      t.skip('OffscreenCanvas \"2d\" context not available');\n      return;\n    }\n\n    // The texture format is rgba8unorm, so the bytes per pixel is 4.\n    const bytesPerPixel = 4;\n\n    // Generate original data.\n    const imagePixels = new Uint8ClampedArray(bytesPerPixel * width * height);\n    for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n      imagePixels[i] = i % 4 === 3 ? 255 : i % 256;\n    }\n\n    const imageData = new ImageData(imagePixels, width, height);\n    imageCanvasContext.putImageData(imageData, 0, 0);\n\n    const imageBitmap = await createImageBitmap(imageCanvas);\n\n    const dst = t.device.createTexture({\n      size: {\n        width: imageBitmap.width,\n        height: imageBitmap.height,\n        depth: 1,\n      },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n\n    // This will get origin data and even it has premultiplied-alpha\n    const expectedData = imageCanvasContext.getImageData(\n      0,\n      0,\n      imageBitmap.width,\n      imageBitmap.height\n    ).data;\n\n    t.doTestAndCheckResult(\n      { imageBitmap, origin: { x: 0, y: 0 } },\n      { texture: dst },\n      { width: imageBitmap.width, height: imageBitmap.height, depth: 1 },\n      bytesPerPixel,\n      expectedData\n    );\n  });\n"],"file":"copyImageBitmapToTexture.spec.js"}