{"version":3,"sources":["../../../../src/webgpu/web_platform/reftests/canvas_complex.html.ts"],"names":["assert","unreachable","gammaDecompress","float32ToFloat16Bits","runRefTest","run","format","targets","t","shaderValue","isOutputSrgb","shaderValueStr","toFixed","copyBufferToTexture","ctx","rows","bytesPerRow","buffer","device","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_SRC","mapping","getMappedRange","data","Uint8Array","set","Uint16Array","unmap","encoder","createCommandEncoder","texture","getCurrentTexture","queue","submit","finish","getImageBitmap","imageData","ImageData","Uint8ClampedArray","createImageBitmap","setupSrcTexture","imageBitmap","srcWidth","srcHeight","width","height","srcTexture","createTexture","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","COPY_DST","copyExternalImageToTexture","source","copyTextureToTexture","mipLevel","origin","x","y","z","DrawTextureSample","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","sampler","createSampler","magFilter","minFilter","uniformBindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","createView","renderPassDescriptor","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","commandEncoder","passEncoder","beginRenderPass","setPipeline","setBindGroup","draw","end","DrawVertexColor","DrawFragcoord","FragmentTextureStore","bg","outputTexture","canvas","loadValue","endPass","ComputeWorkgroup1x1TextureStore","createComputePipeline","compute","pass","beginComputePass","dispatch","ComputeWorkgroup2x2TextureStore","cvs","writeCanvasMethod","getContext","STORAGE_BINDING","configure"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\nimport { gammaDecompress, float32ToFloat16Bits } from '../../util/conversion.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\ntype WriteCanvasMethod =\n  | 'copyBufferToTexture'\n  | 'copyTextureToTexture'\n  | 'copyExternalImageToTexture'\n  | 'DrawTextureSample'\n  | 'DrawVertexColor'\n  | 'DrawFragcoord'\n  | 'FragmentTextureStore'\n  | 'ComputeWorkgroup1x1TextureStore'\n  | 'ComputeWorkgroup2x2TextureStore';\n\nexport function run(\n  format: GPUTextureFormat,\n  targets: { cvs: HTMLCanvasElement; writeCanvasMethod: WriteCanvasMethod }[]\n) {\n  runRefTest(async t => {\n    let shaderValue: number = 0x7f / 0xff;\n    let isOutputSrgb = false;\n    switch (format) {\n      case 'bgra8unorm':\n      case 'rgba8unorm':\n      case 'rgba16float':\n        break;\n      case 'bgra8unorm-srgb':\n      case 'rgba8unorm-srgb':\n        // NOTE: \"-srgb\" cases haven't been tested (there aren't any .html files that use them).\n\n        // Reverse gammaCompress to get same value shader output as non-srgb formats:\n        shaderValue = gammaDecompress(shaderValue);\n        isOutputSrgb = true;\n        break;\n      default:\n        unreachable();\n    }\n    const shaderValueStr = shaderValue.toFixed(5);\n\n    function copyBufferToTexture(ctx: GPUCanvasContext) {\n      const rows = 2;\n      const bytesPerRow = 256;\n      const buffer = t.device.createBuffer({\n        mappedAtCreation: true,\n        size: rows * bytesPerRow,\n        usage: GPUBufferUsage.COPY_SRC,\n      });\n      const mapping = buffer.getMappedRange();\n      switch (format) {\n        case 'bgra8unorm':\n        case 'bgra8unorm-srgb':\n          {\n            const data = new Uint8Array(mapping);\n            data.set(new Uint8Array([0x00, 0x00, 0x7f, 0xff]), 0); // red\n            data.set(new Uint8Array([0x00, 0x7f, 0x00, 0xff]), 4); // green\n            data.set(new Uint8Array([0x7f, 0x00, 0x00, 0xff]), 256 + 0); // blue\n            data.set(new Uint8Array([0x00, 0x7f, 0x7f, 0xff]), 256 + 4); // yellow\n          }\n          break;\n        case 'rgba8unorm':\n        case 'rgba8unorm-srgb':\n          {\n            const data = new Uint8Array(mapping);\n            data.set(new Uint8Array([0x7f, 0x00, 0x00, 0xff]), 0); // red\n            data.set(new Uint8Array([0x00, 0x7f, 0x00, 0xff]), 4); // green\n            data.set(new Uint8Array([0x00, 0x00, 0x7f, 0xff]), 256 + 0); // blue\n            data.set(new Uint8Array([0x7f, 0x7f, 0x00, 0xff]), 256 + 4); // yellow\n          }\n          break;\n        case 'rgba16float':\n          {\n            const data = new Uint16Array(mapping);\n            data.set(\n              new Uint16Array([\n                float32ToFloat16Bits(0.5),\n                float32ToFloat16Bits(0.0),\n                float32ToFloat16Bits(0.0),\n                float32ToFloat16Bits(1.0),\n              ]),\n              0\n            ); // red\n            data.set(\n              new Uint16Array([\n                float32ToFloat16Bits(0.0),\n                float32ToFloat16Bits(0.5),\n                float32ToFloat16Bits(0.0),\n                float32ToFloat16Bits(1.0),\n              ]),\n              4\n            ); // green\n            data.set(\n              new Uint16Array([\n                float32ToFloat16Bits(0.0),\n                float32ToFloat16Bits(0.0),\n                float32ToFloat16Bits(0.5),\n                float32ToFloat16Bits(1.0),\n              ]),\n              128 + 0\n            ); // blue\n            data.set(\n              new Uint16Array([\n                float32ToFloat16Bits(0.5),\n                float32ToFloat16Bits(0.5),\n                float32ToFloat16Bits(0.0),\n                float32ToFloat16Bits(1.0),\n              ]),\n              128 + 4\n            ); // yellow\n          }\n          break;\n      }\n      buffer.unmap();\n\n      const encoder = t.device.createCommandEncoder();\n      encoder.copyBufferToTexture({ buffer, bytesPerRow }, { texture: ctx.getCurrentTexture() }, [\n        2,\n        2,\n        1,\n      ]);\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    function getImageBitmap(): Promise<ImageBitmap> {\n      const imageData = new ImageData(\n        /* prettier-ignore */ new Uint8ClampedArray([\n          0x7f, 0x00, 0x00, 0xff,\n          0x00, 0x7f, 0x00, 0xff,\n          0x00, 0x00, 0x7f, 0xff,\n          0x7f, 0x7f, 0x00, 0xff,\n        ]),\n        2,\n        2\n      );\n      return createImageBitmap(imageData);\n    }\n\n    function setupSrcTexture(imageBitmap: ImageBitmap): GPUTexture {\n      const [srcWidth, srcHeight] = [imageBitmap.width, imageBitmap.height];\n      const srcTexture = t.device.createTexture({\n        size: [srcWidth, srcHeight, 1],\n        format,\n        usage:\n          GPUTextureUsage.TEXTURE_BINDING |\n          GPUTextureUsage.RENDER_ATTACHMENT |\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.COPY_SRC,\n      });\n      t.device.queue.copyExternalImageToTexture({ source: imageBitmap }, { texture: srcTexture }, [\n        imageBitmap.width,\n        imageBitmap.height,\n      ]);\n      return srcTexture;\n    }\n\n    async function copyExternalImageToTexture(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap();\n      t.device.queue.copyExternalImageToTexture(\n        { source: imageBitmap },\n        { texture: ctx.getCurrentTexture() },\n        [imageBitmap.width, imageBitmap.height]\n      );\n    }\n\n    async function copyTextureToTexture(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap();\n      const srcTexture = setupSrcTexture(imageBitmap);\n\n      const encoder = t.device.createCommandEncoder();\n      encoder.copyTextureToTexture(\n        { texture: srcTexture, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        { texture: ctx.getCurrentTexture(), mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        [imageBitmap.width, imageBitmap.height, 1]\n      );\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    async function DrawTextureSample(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap();\n      const srcTexture = setupSrcTexture(imageBitmap);\n\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n  @location(0) fragUV : vec2<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var uv = array<vec2<f32>, 6>(\n      vec2<f32>(1.0, 0.0),\n      vec2<f32>(1.0, 1.0),\n      vec2<f32>(0.0, 1.0),\n      vec2<f32>(1.0, 0.0),\n      vec2<f32>(0.0, 1.0),\n      vec2<f32>(0.0, 0.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            // NOTE: \"-srgb\" cases haven't been tested (there aren't any .html files that use them).\n            code: `\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\nfn gammaDecompress(n: f32) -> f32 {\n  var r = n;\n  if (r <= 0.04045) {\n    r = r * 25.0 / 323.0;\n  } else {\n    r = pow((200.0 * r + 11.0) / 121.0, 12.0 / 5.0);\n  }\n  r = clamp(r, 0.0, 1.0);\n  return r;\n}\n\n@stage(fragment)\nfn srgbMain(@location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n  var result = textureSample(myTexture, mySampler, fragUV);\n  result.r = gammaDecompress(result.r);\n  result.g = gammaDecompress(result.g);\n  result.b = gammaDecompress(result.b);\n  return result;\n}\n\n@stage(fragment)\nfn linearMain(@location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n  return textureSample(myTexture, mySampler, fragUV);\n}\n            `,\n          }),\n          entryPoint: isOutputSrgb ? 'srgbMain' : 'linearMain',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const sampler = t.device.createSampler({\n        magFilter: 'nearest',\n        minFilter: 'nearest',\n      });\n\n      const uniformBindGroup = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          {\n            binding: 0,\n            resource: sampler,\n          },\n          {\n            binding: 1,\n            resource: srcTexture.createView(),\n          },\n        ],\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, uniformBindGroup);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function DrawVertexColor(ctx: GPUCanvasContext) {\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n  @location(0) fragColor : vec4<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 0.5,  0.5),\n      vec2<f32>( 0.5, -0.5),\n      vec2<f32>(-0.5, -0.5),\n      vec2<f32>( 0.5,  0.5),\n      vec2<f32>(-0.5, -0.5),\n      vec2<f32>(-0.5,  0.5));\n\n  var offset = array<vec2<f32>, 4>(\n    vec2<f32>( -0.5,  0.5),\n    vec2<f32>( 0.5, 0.5),\n    vec2<f32>(-0.5, -0.5),\n    vec2<f32>( 0.5,  -0.5));\n\n  var color = array<vec4<f32>, 4>(\n      vec4<f32>(${shaderValueStr}, 0.0, 0.0, 1.0),\n      vec4<f32>(0.0, ${shaderValueStr}, 0.0, 1.0),\n      vec4<f32>(0.0, 0.0, ${shaderValueStr}, 1.0),\n      vec4<f32>(${shaderValueStr}, ${shaderValueStr}, 0.0, 1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex % 6u] + offset[VertexIndex / 6u], 0.0, 1.0);\n  output.fragColor = color[VertexIndex / 6u];\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@stage(fragment)\nfn main(@location(0) fragColor: vec4<f32>) -> @location(0) vec4<f32> {\n  return fragColor;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(24, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function DrawFragcoord(ctx: GPUCanvasContext) {\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\n@stage(fragment)\nfn main(@builtin(position) fragcoord: vec4<f32>) -> @location(0) vec4<f32> {\n  var coord = vec2<u32>(floor(fragcoord.xy));\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (coord.x == 0u) {\n    if (coord.y == 0u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (coord.y == 0u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  return color;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function FragmentTextureStore(ctx: GPUCanvasContext) {\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n@stage(fragment)\nfn main(@builtin(position) fragcoord: vec4<f32>) -> @location(0) vec4<f32> {\n  var coord = vec2<u32>(floor(fragcoord.xy));\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (coord.x == 0u) {\n    if (coord.y == 0u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (coord.y == 0u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  textureStore(outImage, vec2<i32>(coord), color);\n  return color;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const outputTexture = t.device.createTexture({\n        format,\n        size: [ctx.canvas.width, ctx.canvas.height, 1],\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: outputTexture.createView(),\n\n            loadValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bg);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.endPass();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function ComputeWorkgroup1x1TextureStore(ctx: GPUCanvasContext) {\n      const pipeline = t.device.createComputePipeline({\n        compute: {\n          module: t.device.createShaderModule({\n            code: `\n              @group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n              @stage(compute) @workgroup_size(1) fn main() {\n                textureStore(outImage, vec2<i32>(0, 0), vec4<f32>(0.5, 0.0, 0.0, 1.0));\n                textureStore(outImage, vec2<i32>(1, 0), vec4<f32>(0.0, 0.5, 0.0, 1.0));\n                textureStore(outImage, vec2<i32>(0, 1), vec4<f32>(0.0, 0.0, 0.5, 1.0));\n                textureStore(outImage, vec2<i32>(1, 1), vec4<f32>(0.5, 0.5, 0.0, 1.0));\n                return;\n              }\n            `,\n          }),\n          entryPoint: 'main',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatch(1);\n      pass.endPass();\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    function ComputeWorkgroup2x2TextureStore(ctx: GPUCanvasContext) {\n      const pipeline = t.device.createComputePipeline({\n        compute: {\n          module: t.device.createShaderModule({\n            code: `\n              @group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n              @stage(compute) @workgroup_size(2, 2, 1)\n              fn main(\n                @builtin(local_invocation_id) LocalInvocationID : vec3<u32>,\n                @builtin(local_invocation_index) LocalInvocationIndex : u32\n              ) {\n                var color = array<vec4<f32>, 4>(\n                  vec4<f32>( 0.5, 0.0, 0.0, 1.0),\n                  vec4<f32>( 0.0, 0.5, 0.0, 1.0),\n                  vec4<f32>( 0.0, 0.0, 0.5, 1.0),\n                  vec4<f32>( 0.5, 0.5, 0.0, 1.0));\n                textureStore(outImage, vec2<i32>(LocalInvocationID.xy), color[LocalInvocationIndex]);\n                return;\n              }\n            `,\n          }),\n          entryPoint: 'main',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatch(1);\n      pass.endPass();\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    for (const { cvs, writeCanvasMethod } of targets) {\n      const ctx = cvs.getContext('webgpu');\n      assert(ctx !== null, 'Failed to get WebGPU context from canvas');\n\n      let usage = GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT;\n      switch (format) {\n        case 'rgba8unorm':\n        case 'rgba16float':\n          usage |= GPUTextureUsage.STORAGE_BINDING;\n          break;\n        default:\n      }\n\n      ctx.configure({\n        device: t.device,\n        format,\n        usage,\n      });\n\n      switch (writeCanvasMethod) {\n        case 'copyBufferToTexture':\n          copyBufferToTexture(ctx);\n          break;\n        case 'copyExternalImageToTexture':\n          await copyExternalImageToTexture(ctx);\n          break;\n        case 'copyTextureToTexture':\n          await copyTextureToTexture(ctx);\n          break;\n        case 'DrawTextureSample':\n          await DrawTextureSample(ctx);\n          break;\n        case 'DrawVertexColor':\n          DrawVertexColor(ctx);\n          break;\n        case 'DrawFragcoord':\n          DrawFragcoord(ctx);\n          break;\n        case 'FragmentTextureStore':\n          FragmentTextureStore(ctx);\n          break;\n        case 'ComputeWorkgroup1x1TextureStore':\n          ComputeWorkgroup1x1TextureStore(ctx);\n          break;\n        case 'ComputeWorkgroup2x2TextureStore':\n          ComputeWorkgroup2x2TextureStore(ctx);\n          break;\n        default:\n          unreachable();\n      }\n    }\n  });\n}\n"],"file":"canvas_complex.html.js"}