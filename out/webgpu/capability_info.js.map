{"version":3,"sources":["../../src/webgpu/capability_info.ts"],"names":["GPUConst","keysOf","obj","Object","keys","numericKeysOf","map","n","Number","makeTable","members","defaults","table","result","k","v","entries","item","i","length","kMaxQueryCount","kQueryTypes","kBufferSizeAlignment","kBufferUsageInfo","BufferUsage","MAP_READ","MAP_WRITE","COPY_SRC","COPY_DST","INDEX","VERTEX","UNIFORM","STORAGE","INDIRECT","QUERY_RESOLVE","kBufferUsages","kRegularTextureFormatInfo","kTexFmtInfoHeader","kSizedDepthStencilFormatInfo","kUnsizedDepthStencilFormatInfo","undefined","kCompressedTextureFormatInfo","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kCompressedTextureFormats","kColorTextureFormatInfo","kColorTextureFormats","kEncodableTextureFormatInfo","kEncodableTextureFormats","kSizedTextureFormatInfo","kSizedTextureFormats","kDepthStencilFormatInfo","kDepthStencilFormats","kUncompressedTextureFormatInfo","kUncompressedTextureFormats","kAllTextureFormatInfo","kAllTextureFormats","x","kTextureDimensionInfo","kTextureDimensions","kTextureAspectInfo","kTextureAspects","kDepthStencilFormatCapabilityInBufferTextureCopy","depth24plus","CopyB2T","CopyT2B","depth16unorm","depth32float","stencil8","depthStencilBufferTextureCopySupported","type","format","aspect","supportedAspects","includes","kTextureUsageInfo","TextureUsage","SAMPLED","RENDER_ATTACHMENT","kTextureUsages","kTextureComponentTypeInfo","kTextureComponentTypes","kTextureViewDimensionInfo","storage","kTextureViewDimensions","kMaxBindingsPerBindGroup","kPerStageBindingLimits","class","max","kPerPipelineBindingLimits","maxDynamic","kBindableResource","uniformBuf","storageBuf","plainSamp","compareSamp","sampledTex","sampledTexMS","storageTex","errorBuf","errorSamp","errorTex","kBindableResources","kBindingKind","resource","perStageLimitClass","perPipelineLimitClass","sampler","kValidStagesAll","validStages","ShaderStage","FRAGMENT","COMPUTE","kValidStagesStorageWrite","kBufferBindingTypeInfo","usage","kBufferBindingTypes","kSamplerBindingTypeInfo","kSamplerBindingTypes","kTextureBindingTypeInfo","kTextureBindingTypes","kBindingTypeInfo","kBindingTypes","kShaderStages","kShaderStageCombinations","kTextureSampleCounts","kMaxColorAttachments","kMaxVertexBuffers","kMaxVertexAttributes","kMaxVertexBufferArrayStride"],"mappings":"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","sourcesContent":["/* eslint-disable no-sparse-arrays */\nimport { ResolveType, ZipKeysWithValues } from '../common/framework/util/types.js';\n\nimport { GPUConst } from './constants.js';\n\ntype valueof<K> = K[keyof K];\ntype GPUTextureUsage = valueof<typeof GPUTextureUsage>;\ntype GPUBufferUsage = valueof<typeof GPUBufferUsage>;\n\nfunction keysOf<T extends string>(obj: { [k in T]: unknown }): readonly T[] {\n  return (Object.keys(obj) as unknown[]) as T[];\n}\n\nfunction numericKeysOf<T>(obj: object): readonly T[] {\n  return (Object.keys(obj).map(n => Number(n)) as unknown[]) as T[];\n}\n\n/**\n * Creates an info lookup object from a more nicely-formatted table. See below for examples.\n *\n * Note: Using `as const` on the arguments to this function is necessary to infer the correct type.\n */\nfunction makeTable<\n  Members extends readonly string[],\n  Defaults extends readonly unknown[],\n  Table extends { readonly [k: string]: readonly unknown[] }\n>(\n  members: Members,\n  defaults: Defaults,\n  table: Table\n): {\n  readonly [k in keyof Table]: ResolveType<ZipKeysWithValues<Members, Table[k], Defaults>>;\n} {\n  const result: { [k: string]: { [m: string]: unknown } } = {};\n  for (const [k, v] of Object.entries<readonly unknown[]>(table)) {\n    const item: { [m: string]: unknown } = {};\n    for (let i = 0; i < members.length; ++i) {\n      item[members[i]] = v[i] ?? defaults[i];\n    }\n    result[k] = item;\n  }\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  return result as any;\n}\n\n// Queries\n\nexport const kMaxQueryCount = 8192;\nexport const kQueryTypes = ['occlusion', 'pipeline-statistics', 'timestamp'] as const;\n\n// Buffers\n\nexport const kBufferSizeAlignment = 4;\n\nexport const kBufferUsageInfo: {\n  readonly [k in GPUBufferUsage]: {};\n} = /* prettier-ignore */ {\n  [GPUConst.BufferUsage.MAP_READ]:      {},\n  [GPUConst.BufferUsage.MAP_WRITE]:     {},\n  [GPUConst.BufferUsage.COPY_SRC]:      {},\n  [GPUConst.BufferUsage.COPY_DST]:      {},\n  [GPUConst.BufferUsage.INDEX]:         {},\n  [GPUConst.BufferUsage.VERTEX]:        {},\n  [GPUConst.BufferUsage.UNIFORM]:       {},\n  [GPUConst.BufferUsage.STORAGE]:       {},\n  [GPUConst.BufferUsage.INDIRECT]:      {},\n  [GPUConst.BufferUsage.QUERY_RESOLVE]: {},\n};\nexport const kBufferUsages = numericKeysOf<GPUBufferUsage>(kBufferUsageInfo);\n\n// Textures\n\nexport const kRegularTextureFormatInfo = /* prettier-ignore */ makeTable(\n                           ['renderable', 'multisample', 'color', 'depth', 'stencil', 'storage', 'copySrc', 'copyDst', 'bytesPerBlock', 'blockWidth', 'blockHeight',              'extension'] as const,\n                           [            ,          true,    true,   false,     false,          ,      true,      true,                ,            1,             1,                         ] as const, {\n  // 8-bit formats\n  'r8unorm':               [        true,              ,        ,        ,          ,     false,          ,          ,               1],\n  'r8snorm':               [       false,              ,        ,        ,          ,     false,          ,          ,               1],\n  'r8uint':                [        true,              ,        ,        ,          ,     false,          ,          ,               1],\n  'r8sint':                [        true,              ,        ,        ,          ,     false,          ,          ,               1],\n  // 16-bit formats\n  'r16uint':               [        true,              ,        ,        ,          ,     false,          ,          ,               2],\n  'r16sint':               [        true,              ,        ,        ,          ,     false,          ,          ,               2],\n  'r16float':              [        true,              ,        ,        ,          ,     false,          ,          ,               2],\n  'rg8unorm':              [        true,              ,        ,        ,          ,     false,          ,          ,               2],\n  'rg8snorm':              [       false,              ,        ,        ,          ,     false,          ,          ,               2],\n  'rg8uint':               [        true,              ,        ,        ,          ,     false,          ,          ,               2],\n  'rg8sint':               [        true,              ,        ,        ,          ,     false,          ,          ,               2],\n  // 32-bit formats\n  'r32uint':               [        true,              ,        ,        ,          ,      true,          ,          ,               4],\n  'r32sint':               [        true,              ,        ,        ,          ,      true,          ,          ,               4],\n  'r32float':              [        true,              ,        ,        ,          ,      true,          ,          ,               4],\n  'rg16uint':              [        true,              ,        ,        ,          ,     false,          ,          ,               4],\n  'rg16sint':              [        true,              ,        ,        ,          ,     false,          ,          ,               4],\n  'rg16float':             [        true,              ,        ,        ,          ,     false,          ,          ,               4],\n  'rgba8unorm':            [        true,              ,        ,        ,          ,      true,          ,          ,               4],\n  'rgba8unorm-srgb':       [        true,              ,        ,        ,          ,     false,          ,          ,               4],\n  'rgba8snorm':            [       false,              ,        ,        ,          ,      true,          ,          ,               4],\n  'rgba8uint':             [        true,              ,        ,        ,          ,      true,          ,          ,               4],\n  'rgba8sint':             [        true,              ,        ,        ,          ,      true,          ,          ,               4],\n  'bgra8unorm':            [        true,              ,        ,        ,          ,     false,          ,          ,               4],\n  'bgra8unorm-srgb':       [        true,              ,        ,        ,          ,     false,          ,          ,               4],\n  // Packed 32-bit formats\n  'rgb10a2unorm':          [        true,              ,        ,        ,          ,     false,          ,          ,               4],\n  'rg11b10ufloat':         [       false,              ,        ,        ,          ,     false,          ,          ,               4],\n  'rgb9e5ufloat':          [       false,              ,        ,        ,          ,     false,          ,          ,               4],\n  // 64-bit formats\n  'rg32uint':              [        true,              ,        ,        ,          ,      true,          ,          ,               8],\n  'rg32sint':              [        true,              ,        ,        ,          ,      true,          ,          ,               8],\n  'rg32float':             [        true,              ,        ,        ,          ,      true,          ,          ,               8],\n  'rgba16uint':            [        true,              ,        ,        ,          ,      true,          ,          ,               8],\n  'rgba16sint':            [        true,              ,        ,        ,          ,      true,          ,          ,               8],\n  'rgba16float':           [        true,              ,        ,        ,          ,      true,          ,          ,               8],\n  // 128-bit formats\n  'rgba32uint':            [        true,              ,        ,        ,          ,      true,          ,          ,              16],\n  'rgba32sint':            [        true,              ,        ,        ,          ,      true,          ,          ,              16],\n  'rgba32float':           [        true,              ,        ,        ,          ,      true,          ,          ,              16],\n} as const);\n/* prettier-ignore */\nconst kTexFmtInfoHeader =  ['renderable', 'multisample', 'color', 'depth', 'stencil', 'storage', 'copySrc', 'copyDst', 'bytesPerBlock', 'blockWidth', 'blockHeight',              'extension'] as const;\nexport const kSizedDepthStencilFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [        true,          true,   false,        ,          ,     false,          ,          ,                ,            1,             1,                         ] as const, {\n  'depth32float':          [        true,              ,   false,    true,     false,          ,     false,     false,               4],\n  'depth16unorm':          [        true,              ,   false,    true,     false,          ,     false,     false,               2],\n  'stencil8':              [        true,              ,        ,   false,      true,          ,     false,     false,               1],\n} as const);\nexport const kUnsizedDepthStencilFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [        true,          true,   false,        ,          ,     false,          ,          ,       undefined,            1,             1,                         ] as const, {\n  'depth24plus':           [            ,              ,        ,    true,     false,          ,     false,     false],\n  'depth24plus-stencil8':  [            ,              ,        ,    true,      true,          ,     false,     false],\n  // bytesPerBlock only makes sense on a per-aspect basis. But this table can't express that. So we put depth24unorm-stencil8 and depth32float-stencil8 to be unsized formats for now.\n  'depth24unorm-stencil8': [            ,              ,        ,    true,      true,          ,     false,     false,                ,             ,              ,  'depth24unorm-stencil8'],\n  'depth32float-stencil8': [            ,              ,        ,    true,      true,          ,     false,     false,                ,             ,              ,  'depth32float-stencil8'],\n} as const);\nexport const kCompressedTextureFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [       false,         false,    true,   false,     false,     false,      true,      true,                ,            4,             4,                         ] as const, {\n  'bc1-rgba-unorm':        [            ,              ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc1-rgba-unorm-srgb':   [            ,              ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc2-rgba-unorm':        [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc2-rgba-unorm-srgb':   [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc3-rgba-unorm':        [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc3-rgba-unorm-srgb':   [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc4-r-unorm':           [            ,              ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc4-r-snorm':           [            ,              ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc5-rg-unorm':          [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc5-rg-snorm':          [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc6h-rgb-ufloat':       [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc6h-rgb-float':        [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc7-rgba-unorm':        [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc7-rgba-unorm-srgb':   [            ,              ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n} as const);\n\nexport type RegularTextureFormat = keyof typeof kRegularTextureFormatInfo;\nexport type SizedDepthStencilFormat = keyof typeof kSizedDepthStencilFormatInfo;\nexport type UnsizedDepthStencilFormat = keyof typeof kUnsizedDepthStencilFormatInfo;\nexport type CompressedTextureFormat = keyof typeof kCompressedTextureFormatInfo;\n\nexport const kRegularTextureFormats = keysOf(kRegularTextureFormatInfo);\nexport const kSizedDepthStencilFormats = keysOf(kSizedDepthStencilFormatInfo);\nexport const kUnsizedDepthStencilFormats = keysOf(kUnsizedDepthStencilFormatInfo);\nexport const kCompressedTextureFormats = keysOf(kCompressedTextureFormatInfo);\n\nexport const kColorTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kCompressedTextureFormatInfo,\n} as const;\nexport type ColorTextureFormat = keyof typeof kColorTextureFormatInfo;\nexport const kColorTextureFormats = keysOf(kColorTextureFormatInfo);\n\nexport const kEncodableTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n} as const;\nexport type EncodableTextureFormat = keyof typeof kEncodableTextureFormatInfo;\nexport const kEncodableTextureFormats = keysOf(kEncodableTextureFormatInfo);\n\nexport const kSizedTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kCompressedTextureFormatInfo,\n} as const;\nexport type SizedTextureFormat = keyof typeof kSizedTextureFormatInfo;\nexport const kSizedTextureFormats = keysOf(kSizedTextureFormatInfo);\n\nexport const kDepthStencilFormatInfo = {\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n} as const;\nexport type DepthStencilFormat = keyof typeof kDepthStencilFormatInfo;\nexport const kDepthStencilFormats = keysOf(kDepthStencilFormatInfo);\n\nexport const kUncompressedTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n} as const;\nexport type UncompressedTextureFormat = keyof typeof kUncompressedTextureFormatInfo;\nexport const kUncompressedTextureFormats = keysOf(kUncompressedTextureFormatInfo);\n\nexport const kAllTextureFormatInfo = {\n  ...kUncompressedTextureFormatInfo,\n  ...kCompressedTextureFormatInfo,\n} as const;\nexport const kAllTextureFormats = keysOf(kAllTextureFormatInfo);\n// Assert every GPUTextureFormat is covered by one of the tables.\n((x: { readonly [k in GPUTextureFormat]: {} }) => x)(kAllTextureFormatInfo);\n\nexport const kTextureDimensionInfo: {\n  readonly [k in GPUTextureDimension]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  '1d': {},\n  '2d': {},\n  '3d': {},\n};\nexport const kTextureDimensions = keysOf(kTextureDimensionInfo);\n\nexport const kTextureAspectInfo: {\n  readonly [k in GPUTextureAspect]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'all': {},\n  'depth-only': {},\n  'stencil-only': {},\n};\nexport const kTextureAspects = keysOf(kTextureAspectInfo);\n\nconst kDepthStencilFormatCapabilityInBufferTextureCopy = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    CopyB2T: [],\n    CopyT2B: [],\n  },\n  'depth24plus-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['stencil-only'],\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    CopyB2T: ['all', 'depth-only'],\n    CopyT2B: ['all', 'depth-only'],\n  },\n  depth32float: {\n    CopyB2T: [],\n    CopyT2B: ['all', 'depth-only'],\n  },\n  'depth24unorm-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['depth-only', 'stencil-only'],\n  },\n  'depth32float-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['depth-only', 'stencil-only'],\n  },\n  stencil8: {\n    CopyB2T: ['all', 'stencil-only'],\n    CopyT2B: ['all', 'stencil-only'],\n  },\n} as const;\n\nexport function depthStencilBufferTextureCopySupported(\n  type: 'CopyB2T' | 'CopyT2B',\n  format: DepthStencilFormat,\n  aspect: GPUTextureAspect\n): boolean {\n  const supportedAspects: readonly GPUTextureAspect[] =\n    kDepthStencilFormatCapabilityInBufferTextureCopy[format][type];\n  return supportedAspects.includes(aspect);\n}\n\nexport const kTextureUsageInfo: {\n  readonly [k in GPUTextureUsage]: {};\n} = {\n  [GPUConst.TextureUsage.COPY_SRC]: {},\n  [GPUConst.TextureUsage.COPY_DST]: {},\n  [GPUConst.TextureUsage.SAMPLED]: {},\n  [GPUConst.TextureUsage.STORAGE]: {},\n  [GPUConst.TextureUsage.RENDER_ATTACHMENT]: {},\n};\nexport const kTextureUsages = numericKeysOf<GPUTextureUsage>(kTextureUsageInfo);\n\nexport const kTextureComponentTypeInfo: {\n  readonly [k in GPUTextureComponentType]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'float': {},\n  'sint': {},\n  'uint': {},\n  'depth-comparison': {},\n};\nexport const kTextureComponentTypes = keysOf(kTextureComponentTypeInfo);\n\n// Texture View\n\nexport const kTextureViewDimensionInfo: {\n  readonly [k in GPUTextureViewDimension]: {\n    readonly storage: boolean;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  '1d':         { storage: true  },\n  '2d':         { storage: true  },\n  '2d-array':   { storage: true  },\n  'cube':       { storage: false },\n  'cube-array': { storage: false },\n  '3d':         { storage: true  },\n};\nexport const kTextureViewDimensions = keysOf(kTextureViewDimensionInfo);\n\n// Typedefs for bindings\n\nexport type PerStageBindingLimitClass =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'sampler'\n  | 'sampledTex'\n  | 'storageTex';\nexport type PerPipelineBindingLimitClass = PerStageBindingLimitClass;\n\ntype ValidBindableResource =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'plainSamp'\n  | 'compareSamp'\n  | 'sampledTex'\n  | 'sampledTexMS'\n  | 'storageTex';\ntype ErrorBindableResource = 'errorBuf' | 'errorSamp' | 'errorTex';\nexport type BindableResource = ValidBindableResource | ErrorBindableResource;\n\ntype BufferBindingType = 'uniform-buffer' | 'storage-buffer' | 'readonly-storage-buffer';\ntype SamplerBindingType = 'sampler' | 'comparison-sampler';\ntype TextureBindingType =\n  | 'sampled-texture'\n  | 'multisampled-texture'\n  | 'writeonly-storage-texture'\n  | 'readonly-storage-texture';\n\n// Bindings\n\nexport const kMaxBindingsPerBindGroup = 16;\n\nexport const kPerStageBindingLimits: {\n  readonly [k in PerStageBindingLimitClass]: {\n    readonly class: k;\n    readonly max: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', max: 12, },\n  'storageBuf': { class: 'storageBuf', max:  4, },\n  'sampler':    { class: 'sampler',    max: 16, },\n  'sampledTex': { class: 'sampledTex', max: 16, },\n  'storageTex': { class: 'storageTex', max:  4, },\n};\n\nexport const kPerPipelineBindingLimits: {\n  readonly [k in PerPipelineBindingLimitClass]: {\n    readonly class: k;\n    readonly maxDynamic: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', maxDynamic: 8, },\n  'storageBuf': { class: 'storageBuf', maxDynamic: 4, },\n  'sampler':    { class: 'sampler',    maxDynamic: 0, },\n  'sampledTex': { class: 'sampledTex', maxDynamic: 0, },\n  'storageTex': { class: 'storageTex', maxDynamic: 0, },\n};\n\nconst kBindableResource: {\n  readonly [k in BindableResource]: {};\n} = /* prettier-ignore */ {\n  uniformBuf:   {},\n  storageBuf:   {},\n  plainSamp:    {},\n  compareSamp:  {},\n  sampledTex:   {},\n  sampledTexMS: {},\n  storageTex:   {},\n  errorBuf:     {},\n  errorSamp:    {},\n  errorTex:     {},\n};\nexport const kBindableResources = keysOf(kBindableResource);\n\ninterface BindingKindInfo {\n  readonly resource: ValidBindableResource;\n  readonly perStageLimitClass: typeof kPerStageBindingLimits[PerStageBindingLimitClass];\n  readonly perPipelineLimitClass: typeof kPerPipelineBindingLimits[PerPipelineBindingLimitClass];\n  // Add fields as needed\n}\n\nconst kBindingKind: {\n  readonly [k in ValidBindableResource]: BindingKindInfo;\n} = /* prettier-ignore */ {\n  uniformBuf:   { resource: 'uniformBuf',   perStageLimitClass: kPerStageBindingLimits.uniformBuf, perPipelineLimitClass: kPerPipelineBindingLimits.uniformBuf, },\n  storageBuf:   { resource: 'storageBuf',   perStageLimitClass: kPerStageBindingLimits.storageBuf, perPipelineLimitClass: kPerPipelineBindingLimits.storageBuf, },\n  plainSamp:    { resource: 'plainSamp',    perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  compareSamp:  { resource: 'compareSamp',  perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  sampledTex:   { resource: 'sampledTex',   perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  sampledTexMS: { resource: 'sampledTexMS', perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  storageTex:   { resource: 'storageTex',   perStageLimitClass: kPerStageBindingLimits.storageTex, perPipelineLimitClass: kPerPipelineBindingLimits.storageTex, },\n};\n\n// Binding type info\n\ninterface BindingTypeInfo extends BindingKindInfo {\n  readonly validStages: GPUShaderStageFlags;\n  // Add fields as needed\n}\nconst kValidStagesAll = {\n  validStages:\n    GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n};\nconst kValidStagesStorageWrite = {\n  validStages: GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n};\n\nexport const kBufferBindingTypeInfo: {\n  readonly [k in BufferBindingType]: {\n    readonly usage: GPUBufferUsage;\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'uniform-buffer':          { usage: GPUConst.BufferUsage.UNIFORM, ...kBindingKind.uniformBuf,  ...kValidStagesAll,          },\n  'storage-buffer':          { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesStorageWrite, },\n  'readonly-storage-buffer': { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesAll,          },\n};\nexport const kBufferBindingTypes = keysOf(kBufferBindingTypeInfo);\n\nexport const kSamplerBindingTypeInfo: {\n  readonly [k in SamplerBindingType]: {\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'sampler':                   { ...kBindingKind.plainSamp,   ...kValidStagesAll,     },\n  'comparison-sampler':        { ...kBindingKind.compareSamp, ...kValidStagesAll,     },\n};\nexport const kSamplerBindingTypes = keysOf(kSamplerBindingTypeInfo);\n\nexport const kTextureBindingTypeInfo: {\n  readonly [k in TextureBindingType]: {\n    readonly usage: GPUTextureUsage;\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'sampled-texture':           { usage: GPUConst.TextureUsage.SAMPLED, ...kBindingKind.sampledTex,    ...kValidStagesAll,          },\n  'multisampled-texture':      { usage: GPUConst.TextureUsage.SAMPLED, ...kBindingKind.sampledTexMS,  ...kValidStagesAll,          },\n  'writeonly-storage-texture': { usage: GPUConst.TextureUsage.STORAGE, ...kBindingKind.storageTex,    ...kValidStagesStorageWrite, },\n  'readonly-storage-texture':  { usage: GPUConst.TextureUsage.STORAGE, ...kBindingKind.storageTex,    ...kValidStagesAll,          },\n};\nexport const kTextureBindingTypes = keysOf(kTextureBindingTypeInfo);\n\n// All binding types (merged from above)\n\nexport const kBindingTypeInfo: {\n  readonly [k in GPUBindingType]: BindingTypeInfo;\n} = {\n  ...kBufferBindingTypeInfo,\n  ...kSamplerBindingTypeInfo,\n  ...kTextureBindingTypeInfo,\n};\nexport const kBindingTypes = keysOf(kBindingTypeInfo);\n\nexport const kShaderStages: readonly GPUShaderStageFlags[] = [\n  GPUConst.ShaderStage.VERTEX,\n  GPUConst.ShaderStage.FRAGMENT,\n  GPUConst.ShaderStage.COMPUTE,\n];\nexport const kShaderStageCombinations: readonly GPUShaderStageFlags[] = [0, 1, 2, 3, 4, 5, 6, 7];\n\n// TODO: Update with all possible sample counts when defined\n// TODO: Switch existing tests to use kTextureSampleCounts\nexport const kTextureSampleCounts = [1, 4] as const;\n\n// Pipeline limits\n\n// TODO: Update maximum color attachments when defined\nexport const kMaxColorAttachments = 4;\n\nexport const kMaxVertexBuffers = 8;\nexport const kMaxVertexAttributes = 16;\nexport const kMaxVertexBufferArrayStride = 2048;\n"],"file":"capability_info.js"}