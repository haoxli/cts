{"version":3,"sources":["../../../../src/webgpu/api/validation/getBindGroupLayout.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g","test","desc","params","u","combine","fn","t","index","pipelineBindGroupLayouts","device","createBindGroupLayout","entries","kBindGroupLayoutsSizeInPipelineLayout","pipelineLayout","createPipelineLayout","bindGroupLayouts","pipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","shouldError","expectValidationError","getBindGroupLayout"],"mappings":"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","sourcesContent":["export const description = `\n  getBindGroupLayout validation tests.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('index_range,explicit_layout')\n  .desc(\n    `\n  Test that a validation error is generated if the index exceeds the size of the bind group layouts\n  using a pipeline with an explicit layout.\n  `\n  )\n  .params(u => u.combine('index', [0, 1, 2, 3, 4, 5]))\n  .fn(async t => {\n    const { index } = t.params;\n\n    const pipelineBindGroupLayouts = t.device.createBindGroupLayout({\n      entries: [],\n    });\n\n    const kBindGroupLayoutsSizeInPipelineLayout = 1;\n    const pipelineLayout = t.device.createPipelineLayout({\n      bindGroupLayouts: [pipelineBindGroupLayouts],\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: pipelineLayout,\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @vertex\n            fn main()-> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    });\n\n    const shouldError = index >= kBindGroupLayoutsSizeInPipelineLayout;\n\n    t.expectValidationError(() => {\n      pipeline.getBindGroupLayout(index);\n    }, shouldError);\n  });\n\ng.test('index_range,auto_layout')\n  .desc(\n    `\n  Test that a validation error is generated if the index exceeds the size of the bind group layouts\n  using a pipeline with an auto layout.\n  `\n  )\n  .params(u => u.combine('index', [0, 1, 2, 3, 4, 5]))\n  .fn(async t => {\n    const { index } = t.params;\n\n    const kBindGroupLayoutsSizeInPipelineLayout = 1;\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @vertex\n            fn main()-> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @group(0) @binding(0) var<uniform> binding: f32;\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              _ = binding;\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    });\n\n    const shouldError = index >= kBindGroupLayoutsSizeInPipelineLayout;\n\n    t.expectValidationError(() => {\n      pipeline.getBindGroupLayout(index);\n    }, shouldError);\n  });\n"],"file":"getBindGroupLayout.spec.js"}