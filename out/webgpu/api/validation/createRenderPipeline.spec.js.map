{"version":3,"sources":["../../../../src/webgpu/api/validation/createRenderPipeline.spec.ts"],"names":["description","makeTestGroup","unreachable","kTextureFormats","kRenderableColorTextureFormats","kTextureFormatInfo","kTexelRepresentationInfo","ValidationTest","F","getFragmentShaderCode","sampleType","componentCount","v","fragColorType","suffix","outputType","result","getDescriptor","options","defaultTargets","format","topology","targets","sampleCount","depthStencil","fragmentShaderCode","vertex","module","device","createShaderModule","code","entryPoint","fragment","layout","getPipelineLayout","primitive","multisample","count","createPipelineLayout","bindGroupLayouts","createTexture","params","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","RENDER_ATTACHMENT","doCreateRenderPipelineTest","isAsync","_success","descriptor","shouldResolve","createRenderPipelineAsync","shouldReject","createRenderPipeline","expectValidationError","g","test","u","combine","fn","t","goodDescriptor","badDescriptor","info","selectDeviceOrSkipTestCase","feature","renderable","color","combineWithParams","desc","beginSubcases","componentOrder","length","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","blend","srcFactor","dstFactor","operation","alpha","colorBlendReadsSrcAlpha","includes","meetsExtraBlendingRequirement","paramsSubcasesOnly","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\ncreateRenderPipeline and createRenderPipelineAsync validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n      Make sure the following is covered. Consider splitting the file if too large/disjointed.\n> - various attachment problems\n>\n> - interface matching between vertex and fragment shader\n>     - superset, subset, etc.\n>\n> - vertex stage {valid, invalid}\n> - fragment stage {valid, invalid}\n> - primitive topology all possible values\n> - rasterizationState various values\n> - multisample count {0, 1, 3, 4, 8, 16, 1024}\n> - multisample mask {0, 0xFFFFFFFF}\n> - alphaToCoverage:\n>     - alphaToCoverageEnabled is { true, false } and sampleCount { = 1, = 4 }.\n>       The only failing case is (true, 1).\n>     - output SV_Coverage semantics is statically used by fragmentStage and\n>       alphaToCoverageEnabled is { true (fails), false (passes) }.\n>     - sampleMask is being used and alphaToCoverageEnabled is { true (fails), false (passes) }.\n\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/util/util.js';\nimport {\n  kTextureFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n} from '../../capability_info.js';\nimport { kTexelRepresentationInfo } from '../../util/texture/texel_data.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  getFragmentShaderCode(sampleType: GPUTextureSampleType, componentCount: number): string {\n    const v = ['0', '1', '0', '1'];\n\n    let fragColorType;\n    let suffix;\n    switch (sampleType) {\n      case 'sint':\n        fragColorType = 'i32';\n        suffix = '';\n        break;\n      case 'uint':\n        fragColorType = 'u32';\n        suffix = 'u';\n        break;\n      default:\n        fragColorType = 'f32';\n        suffix = '.0';\n        break;\n    }\n\n    let outputType;\n    let result;\n    switch (componentCount) {\n      case 1:\n        outputType = fragColorType;\n        result = `${v[0]}${suffix}`;\n        break;\n      case 2:\n        outputType = `vec2<${fragColorType}>`;\n        result = `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix})`;\n        break;\n      case 3:\n        outputType = `vec3<${fragColorType}>`;\n        result = `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix}, ${v[2]}${suffix})`;\n        break;\n      case 4:\n        outputType = `vec4<${fragColorType}>`;\n        result = `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix}, ${v[2]}${suffix}, ${v[3]}${suffix})`;\n        break;\n      default:\n        unreachable();\n    }\n\n    return `\n    [[stage(fragment)]] fn main() -> [[location(0)]] ${outputType} {\n      return ${result};\n    }`;\n  }\n\n  getDescriptor(\n    options: {\n      topology?: GPUPrimitiveTopology;\n      targets?: GPUColorTargetState[];\n      sampleCount?: number;\n      depthStencil?: GPUDepthStencilState;\n      fragmentShaderCode?: string;\n    } = {}\n  ): GPURenderPipelineDescriptor {\n    const defaultTargets: GPUColorTargetState[] = [{ format: 'rgba8unorm' }];\n    const {\n      topology = 'triangle-list',\n      targets = defaultTargets,\n      sampleCount = 1,\n      depthStencil,\n      fragmentShaderCode = this.getFragmentShaderCode(\n        kTextureFormatInfo[targets[0] ? targets[0].format : 'rgba8unorm'].sampleType,\n        4\n      ),\n    } = options;\n\n    return {\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            [[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: fragmentShaderCode,\n        }),\n        entryPoint: 'main',\n        targets,\n      },\n      layout: this.getPipelineLayout(),\n      primitive: { topology },\n      multisample: { count: sampleCount },\n      depthStencil,\n    };\n  }\n\n  getPipelineLayout(): GPUPipelineLayout {\n    return this.device.createPipelineLayout({ bindGroupLayouts: [] });\n  }\n\n  createTexture(params: { format: GPUTextureFormat; sampleCount: number }): GPUTexture {\n    const { format, sampleCount } = params;\n\n    return this.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      format,\n      sampleCount,\n    });\n  }\n\n  doCreateRenderPipelineTest(\n    isAsync: boolean,\n    _success: boolean,\n    descriptor: GPURenderPipelineDescriptor\n  ) {\n    if (isAsync) {\n      if (_success) {\n        this.shouldResolve(this.device.createRenderPipelineAsync(descriptor));\n      } else {\n        this.shouldReject('OperationError', this.device.createRenderPipelineAsync(descriptor));\n      }\n    } else {\n      if (_success) {\n        this.device.createRenderPipeline(descriptor);\n      } else {\n        this.expectValidationError(() => {\n          this.device.createRenderPipeline(descriptor);\n        });\n      }\n    }\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basic_use_of_createRenderPipeline')\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n    const descriptor = t.getDescriptor();\n\n    t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n  });\n\ng.test('at_least_one_color_state_is_required')\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n\n    const goodDescriptor = t.getDescriptor({\n      targets: [{ format: 'rgba8unorm' }],\n    });\n\n    // Control case\n    t.doCreateRenderPipelineTest(isAsync, true, goodDescriptor);\n\n    // Fail because lack of color states\n    const badDescriptor = t.getDescriptor({\n      targets: [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, false, badDescriptor);\n  });\n\ng.test('color_formats_must_be_renderable')\n  .params(u => u.combine('isAsync', [false, true]).combine('format', kTextureFormats))\n  .fn(async t => {\n    const { isAsync, format } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor = t.getDescriptor({ targets: [{ format }] });\n\n    t.doCreateRenderPipelineTest(isAsync, info.renderable && info.color, descriptor);\n  });\n\ng.test('sample_count_must_be_valid')\n  .params(u =>\n    u.combine('isAsync', [false, true]).combineWithParams([\n      { sampleCount: 0, _success: false },\n      { sampleCount: 1, _success: true },\n      { sampleCount: 2, _success: false },\n      { sampleCount: 3, _success: false },\n      { sampleCount: 4, _success: true },\n      { sampleCount: 8, _success: false },\n      { sampleCount: 16, _success: false },\n    ])\n  )\n  .fn(async t => {\n    const { isAsync, sampleCount, _success } = t.params;\n\n    const descriptor = t.getDescriptor({ sampleCount });\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('pipeline_output_targets')\n  .desc(\n    `Pipeline fragment output types must be compatible with target color state format\n  - The scalar type (f32, i32, or u32) must match the sample type of the format.\n  - The componentCount of the fragment output (e.g. f32, vec2, vec3, vec4) must not have fewer\n    channels than that of the color attachment texture formats. Extra components are allowed and are discarded.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('sampleType', ['float', 'uint', 'sint'] as const)\n      .combine('componentCount', [1, 2, 3, 4])\n  )\n  .fn(async t => {\n    const { isAsync, format, sampleType, componentCount } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor = t.getDescriptor({\n      targets: [{ format }],\n      fragmentShaderCode: t.getFragmentShaderCode(sampleType, componentCount),\n    });\n\n    const _success =\n      info.sampleType === sampleType &&\n      componentCount >= kTexelRepresentationInfo[format].componentOrder.length;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('pipeline_output_targets,blend')\n  .desc(\n    `On top of requirements from pipeline_output_targets, when blending is enabled and alpha channel is read indicated by any blend factor, an extra requirement is added:\n  - fragment output must be vec4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .beginSubcases()\n      .combine('componentCount', [1, 2, 3, 4])\n      .combineWithParams([\n        // extra requirement does not apply\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        // extra requirement applies, fragment output must be vec4 (contain alpha channel)\n        {\n          colorSrcFactor: 'src-alpha',\n          colorDstFactor: 'one',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'one-minus-src-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'src-alpha-saturated',\n          colorDstFactor: 'one',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'src',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'src-alpha',\n        },\n      ] as const)\n  )\n  .fn(async t => {\n    const sampleType = 'float';\n    const {\n      isAsync,\n      format,\n      componentCount,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: {\n              srcFactor: colorSrcFactor,\n              dstFactor: colorDstFactor,\n              operation: 'add',\n            },\n            alpha: {\n              srcFactor: alphaSrcFactor,\n              dstFactor: alphaDstFactor,\n              operation: 'add',\n            },\n          },\n        },\n      ],\n      fragmentShaderCode: t.getFragmentShaderCode(sampleType, componentCount),\n    });\n\n    const colorBlendReadsSrcAlpha =\n      colorSrcFactor.includes('src-alpha') || colorDstFactor.includes('src-alpha');\n    const meetsExtraBlendingRequirement = !colorBlendReadsSrcAlpha || componentCount === 4;\n    const _success =\n      info.sampleType === sampleType &&\n      componentCount >= kTexelRepresentationInfo[format].componentOrder.length &&\n      meetsExtraBlendingRequirement;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('pipeline_layout,device_mismatch')\n  .desc(\n    'Tests createRenderPipeline(Async) cannot be called with a pipeline layout created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('isAsync', [true, false]).combine('mismatched', [true, false]))\n  .unimplemented();\n\ng.test('shader_module,device_mismatch')\n  .desc(\n    'Tests createRenderPipeline(Async) cannot be called with a shader module created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('isAsync', [true, false]).combine('mismatched', [true, false]))\n  .unimplemented();\n"],"file":"createRenderPipeline.spec.js"}