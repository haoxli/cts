{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/general.spec.ts"],"names":["description","params","poptions","makeTestGroup","kQueryTypes","ValidationTest","F","selectDeviceForQuerySetOrSkipTestCase","type","selectDeviceOrSkipTestCase","undefined","g","test","desc","subcases","concat","unimplemented","cases","combine","fn","t","encoderType","queryIndex","count","pipelineStatistics","querySet","device","createQuerySet","encoder","createEncoder","writeTimestamp","expectValidationError","finish","createQuerySetWithState"],"mappings":"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","sourcesContent":["export const description = `\nTODO:\n\n- For each way to start a query (all possible types in all possible encoders):\n    - queryIndex {in, out of} range for GPUQuerySet\n    - GPUQuerySet {valid, invalid}\n        - or {undefined}, for occlusionQuerySet\n    - x = {occlusion, pipeline statistics, timestamp} query\n`;\n\nimport { params, poptions } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kQueryTypes } from '../../../../capability_info.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  async selectDeviceForQuerySetOrSkipTestCase(type: GPUQueryType): Promise<void> {\n    return this.selectDeviceOrSkipTestCase(\n      type === 'pipeline-statistics'\n        ? 'pipeline-statistics-query'\n        : type === 'timestamp'\n        ? 'timestamp-query'\n        : undefined\n    );\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('occlusion_query,query_type')\n  .desc(\n    `\nTests that set occlusion query set with all types in render pass descriptor:\n- type {occlusion (control case), pipeline statistics, timestamp}\n- {undefined} for occlusion query set in render pass descriptor\n  `\n  )\n  .subcases(() => poptions('type', ['undefined'].concat(kQueryTypes)))\n  .unimplemented();\n\ng.test('occlusion_query,invalid_query_set')\n  .desc(\n    `\nTests that begin occlusion query with a invalid query set that failed during creation.\n  `\n  )\n  .subcases(() => poptions('querySetState', ['valid', 'invalid'] as const))\n  .unimplemented();\n\ng.test('occlusion_query,query_index')\n  .desc(\n    `\nTests that begin occlusion query with query index:\n- queryIndex {in, out of} range for GPUQuerySet\n  `\n  )\n  .subcases(() => poptions('queryIndex', [0, 2]))\n  .unimplemented();\n\ng.test('writeTimestamp,query_type_and_index')\n  .desc(\n    `\nTests that write timestamp to all types of query set on all possible encoders:\n- type {occlusion, pipeline statistics, timestamp}\n- queryIndex {in, out of} range for GPUQuerySet\n- x= {non-pass, compute, render} encoder\n  `\n  )\n  .cases(\n    params()\n      .combine(poptions('encoderType', ['non-pass', 'compute pass', 'render pass'] as const))\n      .combine(poptions('type', kQueryTypes))\n  )\n  .subcases(({ type }) => poptions('queryIndex', type === 'timestamp' ? [0, 2] : [0]))\n  .fn(async t => {\n    const { encoderType, type, queryIndex } = t.params;\n\n    await t.selectDeviceForQuerySetOrSkipTestCase(type);\n\n    const count = 2;\n    const pipelineStatistics =\n      type === 'pipeline-statistics' ? (['clipper-invocations'] as const) : ([] as const);\n    const querySet = t.device.createQuerySet({ type, count, pipelineStatistics });\n\n    const encoder = t.createEncoder(encoderType);\n    encoder.encoder.writeTimestamp(querySet, queryIndex);\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, type !== 'timestamp' || queryIndex >= count);\n  });\n\ng.test('writeTimestamp,invalid_query_set')\n  .desc(\n    `\nTests that write timestamp to a invalid query set that failed during creation:\n- x= {non-pass, compute, render} enconder\n  `\n  )\n  .subcases(() => poptions('encoderType', ['non-pass', 'compute pass', 'render pass'] as const))\n  .fn(async t => {\n    const querySet = t.createQuerySetWithState('invalid');\n\n    const encoder = t.createEncoder(t.params.encoderType);\n    encoder.encoder.writeTimestamp(querySet, 0);\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n"],"file":"general.spec.js"}