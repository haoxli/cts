{"version":3,"sources":["../../../../../src/webgpu/api/validation/encoding/beginRenderPass.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g","test","desc","paramsSubcasesOnly","view0Mismatched","target0Mismatched","view1Mismatched","target1Mismatched","unimplemented","u","combine"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBO,CAqBP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,mCAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA,KARA;;AAUGC,kBAVH,CAUsB;AAClB;AACEC,EAAAA,eAAe,EAAE,KADnB;AAEEC,EAAAA,iBAAiB,EAAE,KAFrB;AAGEC,EAAAA,eAAe,EAAE,KAHnB;AAIEC,EAAAA,iBAAiB,EAAE,KAJrB,EADkB;AAMf;AACH;AACEH,EAAAA,eAAe,EAAE,KADnB;AAEEC,EAAAA,iBAAiB,EAAE,IAFrB;AAGEC,EAAAA,eAAe,EAAE,KAHnB;AAIEC,EAAAA,iBAAiB,EAAE,IAJrB,EAPkB;;AAalB;AACEH,EAAAA,eAAe,EAAE,KADnB;AAEEC,EAAAA,iBAAiB,EAAE,KAFrB;AAGEC,EAAAA,eAAe,EAAE,IAHnB;AAIEC,EAAAA,iBAAiB,EAAE,KAJrB,EAbkB;;AAmBlB;AACEH,EAAAA,eAAe,EAAE,KADnB;AAEEC,EAAAA,iBAAiB,EAAE,KAFrB;AAGEC,EAAAA,eAAe,EAAE,KAHnB;AAIEC,EAAAA,iBAAiB,EAAE,IAJrB,EAnBkB,CAVtB;;;AAoCGC,aApCH;;AAsCAR,CAAC,CAACC,IAAF,CAAO,0CAAP;AACGC,IADH;AAEI,yHAFJ;;AAIGC,kBAJH,CAIsBM,CAAC,IAAIA,CAAC,CAACC,OAAF,CAAU,YAAV,EAAwB,CAAC,IAAD,EAAO,KAAP,CAAxB,CAJ3B;AAKGF,aALH;;AAOAR,CAAC,CAACC,IAAF,CAAO,qCAAP;AACGC,IADH;AAEI,gGAFJ;;AAIGC,kBAJH,CAIsBM,CAAC,IAAIA,CAAC,CAACC,OAAF,CAAU,YAAV,EAAwB,CAAC,IAAD,EAAO,KAAP,CAAxB,CAJ3B;AAKGF,aALH","sourcesContent":["export const description = `\nNote: render pass 'occlusionQuerySet' validation is tested in queries/general.spec.ts\n\nTODO: check for duplication (render_pass/, etc.), plan, and implement.\nNote possibly a lot of this should be operation tests instead.\nNotes:\n> - color attachments {zero, one, multiple}\n>     - many different formats (some are non-renderable)\n>     - is a view on a texture with multiple mip levels or array layers\n>     - two attachments use the same view, or views of {intersecting, disjoint} ranges\n>     - {without, with} resolve target\n>         - resolve format compatibility with multisampled format\n>     - {all possible load ops, load color {in range, negative, too large}}\n>     - all possible store ops\n> - depth/stencil attachment\n>     - {unset, all possible formats}\n>     - {all possible {depth, stencil} load ops, load values {in range, negative, too large}}\n>     - all possible {depth, stencil} store ops\n>     - depthReadOnly {t,f}, stencilReadOnly {t,f}\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('color_attachments,device_mismatch')\n  .desc(\n    `\n    Tests beginRenderPass cannot be called with color attachments whose texure view or resolve target is created from another device\n    The 'view' and 'resolveTarget' are:\n    - created from same device in ColorAttachment0 and ColorAttachment1\n    - created from different device in ColorAttachment0 and ColorAttachment1\n    - created from same device in ColorAttachment0, but from different device in ColorAttachment1\n    `\n  )\n  .paramsSubcasesOnly([\n    {\n      view0Mismatched: false,\n      target0Mismatched: false,\n      view1Mismatched: false,\n      target1Mismatched: false,\n    }, // control case\n    {\n      view0Mismatched: false,\n      target0Mismatched: true,\n      view1Mismatched: false,\n      target1Mismatched: true,\n    },\n    {\n      view0Mismatched: false,\n      target0Mismatched: false,\n      view1Mismatched: true,\n      target1Mismatched: false,\n    },\n    {\n      view0Mismatched: false,\n      target0Mismatched: false,\n      view1Mismatched: false,\n      target1Mismatched: true,\n    },\n  ])\n  .unimplemented();\n\ng.test('depth_stencil_attachment,device_mismatch')\n  .desc(\n    'Tests beginRenderPass cannot be called with a depth stencil attachment whose texure view is created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .unimplemented();\n\ng.test('occlusion_query_set,device_mismatch')\n  .desc(\n    'Tests beginRenderPass cannot be called with an occlusion query set created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .unimplemented();\n"],"file":"beginRenderPass.spec.js"}