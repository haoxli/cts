{"version":3,"sources":["../../../../../src/webgpu/api/validation/encoding/encoder_open_state.spec.ts"],"names":["description","makeTestGroup","keysOf","unreachable","ValidationTest","beginRenderPassWithQuerySet","F","createRenderPipelineForTest","device","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","writeMask","createBindGroupForTest","createBindGroup","entries","binding","resource","createSampler","createBindGroupLayout","visibility","GPUShaderStage","FRAGMENT","sampler","type","g","kEncoderCommandInfo","beginComputePass","beginRenderPass","clearBuffer","copyBufferToBuffer","copyBufferToTexture","copyTextureToBuffer","copyTextureToTexture","insertDebugMarker","popDebugGroup","pushDebugGroup","writeTimestamp","resolveQuerySet","kEncoderCommands","kRenderPassEncoderCommandInfo","draw","drawIndexed","drawIndexedIndirect","drawIndirect","setIndexBuffer","setBindGroup","setVertexBuffer","setPipeline","setViewport","setScissorRect","setBlendConstant","setStencilReference","beginOcclusionQuery","endOcclusionQuery","executeBundles","kRenderPassEncoderCommands","kComputePassEncoderCommandInfo","dispatchWorkgroups","dispatchWorkgroupsIndirect","kComputePassEncoderCommands","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","command","selectDeviceOrSkipTestCase","fn","finishBeforeCommand","srcBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","GPUTextureUsage","COPY_DST","dstBuffer","QUERY_RESOLVE","textureSize","width","height","textureFormat","srcTexture","createTexture","dstTexture","querySet","createQuerySet","count","encoder","createCommandEncoder","finish","expectValidationError","colorAttachments","buffer","texture","renderPass","INDIRECT","VERTEX","pipeline","bindGroup","end","kNumTestPoints","kViewportMinDepth","kViewportMaxDepth","r","b","a","computePass","indirectBuffer","computePipeline","createNoOpComputePipeline"],"mappings":"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","sourcesContent":["export const description = `\nValidation tests to all commands of GPUCommandEncoder, GPUComputePassEncoder, and\nGPURenderPassEncoder when the encoder is not finished.\n\nTODO: Equivalent tests for GPURenderBundleEncoder.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { unreachable } from '../../../../common/util/util.js';\nimport { ValidationTest } from '../validation_test.js';\n\nimport { beginRenderPassWithQuerySet } from './queries/common.js';\n\nclass F extends ValidationTest {\n  createRenderPipelineForTest(): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>();\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: `@fragment fn main() {}`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm', writeMask: 0 }],\n      },\n    });\n  }\n\n  createBindGroupForTest(): GPUBindGroup {\n    return this.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: this.device.createSampler(),\n        },\n      ],\n      layout: this.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            sampler: { type: 'filtering' },\n          },\n        ],\n      }),\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ntype EncoderCommands = keyof Omit<GPUCommandEncoder, '__brand' | 'label' | 'finish'>;\nconst kEncoderCommandInfo: {\n  readonly [k in EncoderCommands]: {};\n} = {\n  beginComputePass: {},\n  beginRenderPass: {},\n  clearBuffer: {},\n  copyBufferToBuffer: {},\n  copyBufferToTexture: {},\n  copyTextureToBuffer: {},\n  copyTextureToTexture: {},\n  insertDebugMarker: {},\n  popDebugGroup: {},\n  pushDebugGroup: {},\n  writeTimestamp: {},\n  resolveQuerySet: {},\n};\nconst kEncoderCommands = keysOf(kEncoderCommandInfo);\n\ntype RenderPassEncoderCommands = keyof Omit<GPURenderPassEncoder, '__brand' | 'label' | 'end'>;\nconst kRenderPassEncoderCommandInfo: {\n  readonly [k in RenderPassEncoderCommands]: {};\n} = {\n  draw: {},\n  drawIndexed: {},\n  drawIndexedIndirect: {},\n  drawIndirect: {},\n  setIndexBuffer: {},\n  setBindGroup: {},\n  setVertexBuffer: {},\n  setPipeline: {},\n  setViewport: {},\n  setScissorRect: {},\n  setBlendConstant: {},\n  setStencilReference: {},\n  beginOcclusionQuery: {},\n  endOcclusionQuery: {},\n  executeBundles: {},\n  pushDebugGroup: {},\n  popDebugGroup: {},\n  insertDebugMarker: {},\n};\nconst kRenderPassEncoderCommands = keysOf(kRenderPassEncoderCommandInfo);\n\n// MAINTENANCE_TODO: remove the deprecated 'dispatch' and 'dispatchIndirect' here once they're\n// removed from `@webgpu/types`.\ntype ComputePassEncoderCommands = keyof Omit<\n  GPUComputePassEncoder,\n  '__brand' | 'label' | 'end' | 'dispatch' | 'dispatchIndirect'\n>;\nconst kComputePassEncoderCommandInfo: {\n  readonly [k in ComputePassEncoderCommands]: {};\n} = {\n  setBindGroup: {},\n  setPipeline: {},\n  dispatchWorkgroups: {},\n  dispatchWorkgroupsIndirect: {},\n  pushDebugGroup: {},\n  popDebugGroup: {},\n  insertDebugMarker: {},\n};\nconst kComputePassEncoderCommands = keysOf(kComputePassEncoderCommandInfo);\n\ng.test('non_pass_commands')\n  .desc(\n    `\n  Test that functions of GPUCommandEncoder generate a validation error if the encoder is already\n  finished.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    switch (t.params.command) {\n      case 'writeTimestamp':\n        t.selectDeviceOrSkipTestCase('timestamp-query');\n        break;\n    }\n  })\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n\n    const srcBuffer = t.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n    const dstBuffer = t.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const textureSize = { width: 1, height: 1 };\n    const textureFormat = 'rgba8unorm';\n    const srcTexture = t.device.createTexture({\n      size: textureSize,\n      format: textureFormat,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: textureSize,\n      format: textureFormat,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const querySet = t.device.createQuerySet({\n      type: command === 'writeTimestamp' ? 'timestamp' : 'occlusion',\n      count: 1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n\n    if (finishBeforeCommand) encoder.finish();\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'beginComputePass':\n          {\n            encoder.beginComputePass();\n          }\n          break;\n        case 'beginRenderPass':\n          {\n            encoder.beginRenderPass({ colorAttachments: [] });\n          }\n          break;\n        case 'clearBuffer':\n          {\n            encoder.clearBuffer(dstBuffer, 0, 16);\n          }\n          break;\n        case 'copyBufferToBuffer':\n          {\n            encoder.copyBufferToBuffer(srcBuffer, 0, dstBuffer, 0, 0);\n          }\n          break;\n        case 'copyBufferToTexture':\n          {\n            encoder.copyBufferToTexture(\n              { buffer: srcBuffer },\n              { texture: dstTexture },\n              textureSize\n            );\n          }\n          break;\n        case 'copyTextureToBuffer':\n          {\n            encoder.copyTextureToBuffer(\n              { texture: srcTexture },\n              { buffer: dstBuffer },\n              textureSize\n            );\n          }\n          break;\n        case 'copyTextureToTexture':\n          {\n            encoder.copyTextureToTexture(\n              { texture: srcTexture },\n              { texture: dstTexture },\n              textureSize\n            );\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            encoder.insertDebugMarker('marker');\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            encoder.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            encoder.popDebugGroup();\n          }\n          break;\n        case 'writeTimestamp':\n          {\n            encoder.writeTimestamp(querySet, 0);\n          }\n          break;\n        case 'resolveQuerySet':\n          {\n            encoder.resolveQuerySet(querySet, 0, 1, dstBuffer, 0);\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand);\n  });\n\ng.test('render_pass_commands')\n  .desc(\n    `\n    Test that functions of GPURenderPassEncoder generate a validation error if the encoder or the\n    pass is already finished.\n\n    - TODO: Consider testing: nothing before command, end before command, end+finish before command.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kRenderPassEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', [false, true])\n  )\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: 1 });\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = beginRenderPassWithQuerySet(t, encoder, querySet);\n\n    const buffer = t.device.createBuffer({\n      size: 12,\n      usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.VERTEX,\n    });\n\n    const pipeline = t.createRenderPipelineForTest();\n\n    const bindGroup = t.createBindGroupForTest();\n\n    if (finishBeforeCommand) {\n      renderPass.end();\n      encoder.finish();\n    }\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'draw':\n          {\n            renderPass.draw(1);\n          }\n          break;\n        case 'drawIndexed':\n          {\n            renderPass.drawIndexed(1);\n          }\n          break;\n        case 'drawIndirect':\n          {\n            renderPass.drawIndirect(buffer, 1);\n          }\n          break;\n        case 'setIndexBuffer':\n          {\n            renderPass.setIndexBuffer(buffer, 'uint32');\n          }\n          break;\n        case 'drawIndexedIndirect':\n          {\n            renderPass.drawIndexedIndirect(buffer, 0);\n          }\n          break;\n        case 'setBindGroup':\n          {\n            renderPass.setBindGroup(0, bindGroup);\n          }\n          break;\n        case 'setVertexBuffer':\n          {\n            renderPass.setVertexBuffer(1, buffer);\n          }\n          break;\n        case 'setPipeline':\n          {\n            renderPass.setPipeline(pipeline);\n          }\n          break;\n        case 'setViewport':\n          {\n            const kNumTestPoints = 8;\n            const kViewportMinDepth = 0;\n            const kViewportMaxDepth = 1;\n            renderPass.setViewport(0, 0, kNumTestPoints, 0, kViewportMinDepth, kViewportMaxDepth);\n          }\n          break;\n        case 'setScissorRect':\n          {\n            renderPass.setScissorRect(0, 0, 0, 0);\n          }\n          break;\n        case 'setBlendConstant':\n          {\n            renderPass.setBlendConstant({ r: 1.0, g: 1.0, b: 1.0, a: 1.0 });\n          }\n          break;\n        case 'setStencilReference':\n          {\n            renderPass.setStencilReference(0);\n          }\n          break;\n        case 'beginOcclusionQuery':\n          {\n            renderPass.beginOcclusionQuery(0);\n          }\n          break;\n        case 'endOcclusionQuery':\n          {\n            renderPass.endOcclusionQuery();\n          }\n          break;\n        case 'executeBundles':\n          {\n            renderPass.executeBundles([]);\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            encoder.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            encoder.popDebugGroup();\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            encoder.insertDebugMarker('marker');\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand);\n  });\n\ng.test('compute_pass_commands')\n  .desc(\n    `\n    Test that functions of GPUComputePassEncoder generate a validation error if the encoder or the\n    pass is already finished.\n\n    - TODO: Consider testing: nothing before command, end before command, end+finish before command.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kComputePassEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', [false, true])\n  )\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n\n    const encoder = t.device.createCommandEncoder();\n    const computePass = encoder.beginComputePass();\n\n    const indirectBuffer = t.device.createBuffer({\n      size: 12,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n\n    const computePipeline = t.createNoOpComputePipeline();\n\n    const bindGroup = t.createBindGroupForTest();\n\n    if (finishBeforeCommand) {\n      computePass.end();\n      encoder.finish();\n    }\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'setBindGroup':\n          {\n            computePass.setBindGroup(0, bindGroup);\n          }\n          break;\n        case 'setPipeline':\n          {\n            computePass.setPipeline(computePipeline);\n          }\n          break;\n        case 'dispatchWorkgroups':\n          {\n            computePass.dispatchWorkgroups(0);\n          }\n          break;\n        case 'dispatchWorkgroupsIndirect':\n          {\n            computePass.dispatchWorkgroupsIndirect(indirectBuffer, 0);\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            computePass.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            computePass.popDebugGroup();\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            computePass.insertDebugMarker('marker');\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand);\n  });\n"],"file":"encoder_open_state.spec.js"}