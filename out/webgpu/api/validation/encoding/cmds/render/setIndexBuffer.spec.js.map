{"version":3,"sources":["../../../../../../../src/webgpu/api/validation/encoding/cmds/render/setIndexBuffer.spec.ts"],"names":["description","makeTestGroup","GPUConst","kResourceStates","ValidationTest","kRenderEncodeTypeParams","buildBufferOffsetAndSizeOOBTestParams","g","test","desc","paramsSubcasesOnly","combine","fn","t","encoderType","state","params","indexBuffer","createBufferWithState","size","usage","GPUBufferUsage","INDEX","encoder","validateFinishAndSubmitGivenState","createEncoder","setIndexBuffer","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","sourceDevice","mismatchedDevice","device","createBuffer","trackForCleanup","validateFinish","BufferUsage","COPY_DST","expand","p","indexFormat","offset","alignment","Uint16Array","BYTES_PER_ELEMENT","Uint32Array","_valid"],"mappings":"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","sourcesContent":["export const description = `\nValidation tests for setIndexBuffer on render pass and render bundle.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../../../constants.js';\nimport { kResourceStates } from '../../../../../gpu_test.js';\nimport { ValidationTest } from '../../../validation_test.js';\n\nimport { kRenderEncodeTypeParams, buildBufferOffsetAndSizeOOBTestParams } from './render.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('index_buffer_state')\n  .desc(\n    `\nTests index buffer must be valid.\n  `\n  )\n  .paramsSubcasesOnly(kRenderEncodeTypeParams.combine('state', kResourceStates))\n  .fn(t => {\n    const { encoderType, state } = t.params;\n    const indexBuffer = t.createBufferWithState(state, {\n      size: 16,\n      usage: GPUBufferUsage.INDEX,\n    });\n\n    const { encoder, validateFinishAndSubmitGivenState } = t.createEncoder(encoderType);\n    encoder.setIndexBuffer(indexBuffer, 'uint32');\n    validateFinishAndSubmitGivenState(state);\n  });\n\ng.test('index_buffer,device_mismatch')\n  .desc('Tests setIndexBuffer cannot be called with an index buffer created from another device')\n  .paramsSubcasesOnly(kRenderEncodeTypeParams.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { encoderType, mismatched } = t.params;\n    const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n    const indexBuffer = sourceDevice.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.INDEX,\n    });\n    t.trackForCleanup(indexBuffer);\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setIndexBuffer(indexBuffer, 'uint32');\n    validateFinish(!mismatched);\n  });\n\ng.test('index_buffer_usage')\n  .desc(\n    `\nTests index buffer must have 'Index' usage.\n  `\n  )\n  .paramsSubcasesOnly(\n    kRenderEncodeTypeParams.combine('usage', [\n      GPUConst.BufferUsage.INDEX, // control case\n      GPUConst.BufferUsage.COPY_DST,\n      GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.INDEX,\n    ] as const)\n  )\n  .fn(t => {\n    const { encoderType, usage } = t.params;\n    const indexBuffer = t.device.createBuffer({\n      size: 16,\n      usage,\n    });\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setIndexBuffer(indexBuffer, 'uint32');\n    validateFinish((usage & GPUBufferUsage.INDEX) !== 0);\n  });\n\ng.test('offset_alignment')\n  .desc(\n    `\nTests offset must be a multiple of index formatâ€™s byte size.\n  `\n  )\n  .paramsSubcasesOnly(\n    kRenderEncodeTypeParams\n      .combine('indexFormat', ['uint16', 'uint32'] as const)\n      .expand('offset', p => {\n        return p.indexFormat === 'uint16' ? ([0, 1, 2] as const) : ([0, 2, 4] as const);\n      })\n  )\n  .fn(t => {\n    const { encoderType, indexFormat, offset } = t.params;\n    const indexBuffer = t.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.INDEX,\n    });\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setIndexBuffer(indexBuffer, indexFormat, offset);\n\n    const alignment =\n      indexFormat === 'uint16' ? Uint16Array.BYTES_PER_ELEMENT : Uint32Array.BYTES_PER_ELEMENT;\n    validateFinish(offset % alignment === 0);\n  });\n\ng.test('offset_and_size_oob')\n  .desc(\n    `\nTests offset and size cannot be larger than index buffer size.\n  `\n  )\n  .paramsSubcasesOnly(buildBufferOffsetAndSizeOOBTestParams(4, 256))\n  .fn(t => {\n    const { encoderType, offset, size, _valid } = t.params;\n    const indexBuffer = t.device.createBuffer({\n      size: 256,\n      usage: GPUBufferUsage.INDEX,\n    });\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setIndexBuffer(indexBuffer, 'uint32', offset, size);\n    validateFinish(_valid);\n  });\n"],"file":"setIndexBuffer.spec.js"}