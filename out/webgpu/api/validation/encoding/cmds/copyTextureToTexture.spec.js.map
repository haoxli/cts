{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/copyTextureToTexture.spec.ts"],"names":["description","makeTestGroup","kTextureFormatInfo","kTextureFormats","kCompressedTextureFormats","kDepthStencilFormats","kTextureUsages","textureDimensionAndFormatCompatible","kTextureDimensions","kResourceStates","align","ValidationTest","F","TestCopyTextureToTexture","source","destination","copySize","expectation","commandEncoder","device","createCommandEncoder","copyTextureToTexture","expectValidationError","finish","cmd","queue","submit","GetPhysicalSubresourceSize","dimension","textureSize","format","mipLevel","virtualWidthAtLevel","Math","max","width","virtualHeightAtLevel","height","physicalWidthAtLevel","blockWidth","physicalHeightAtLevel","blockHeight","depthOrArrayLayers","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","srcState","dstState","params","textureDesc","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","srcTexture","createTextureWithState","dstTexture","isSubmitSuccess","isFinishSuccess","texture","srcMismatched","dstMismatched","mismatched","selectMismatchedDeviceOrSkipTestCase","undefined","mismatchedDevice","createTexture","trackForCleanup","beginSubcases","combineWithParams","srcLevelCount","dstLevelCount","srcCopyLevel","dstCopyLevel","unless","p","mipLevelCount","isSuccess","srcUsage","dstUsage","srcSampleCount","dstSampleCount","sampleCount","x","y","z","expand","srcCopyOrigin","dstCopyOrigin","copyWidth","copyHeight","kWidth","kHeight","origin","srcFormat","dstFormat","srcFormatInfo","dstFormatInfo","selectDeviceOrSkipTestCase","feature","kTextureSize","srcBaseFormat","baseFormat","dstBaseFormat","copyBoxOffsets","srcTextureSize","dstTextureSize","kMipLevelCount","srcSizeAtLevel","dstSizeAtLevel","copyOrigin","min","kFormat","copyDepth","srcCopyOriginZ","dstCopyOriginZ","copyExtentDepth","kArrayLayerCount","testTexture","sourceAspect","destinationAspect","kValidAspectsForFormat","rgba8unorm","depth24plus","depth32float","stencil8","depth16unorm","isSourceAspectValid","includes","isDestinationAspectValid","aspect","filter","texelBlockWidth","texelBlockHeight","isSuccessForCompressedFormats"],"mappings":"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","sourcesContent":["export const description = `\ncopyTextureToTexture tests.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport {\n  kTextureFormatInfo,\n  kTextureFormats,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  kTextureUsages,\n  textureDimensionAndFormatCompatible,\n  kTextureDimensions,\n} from '../../../../capability_info.js';\nimport { kResourceStates } from '../../../../gpu_test.js';\nimport { align } from '../../../../util/math.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  TestCopyTextureToTexture(\n    source: GPUImageCopyTexture,\n    destination: GPUImageCopyTexture,\n    copySize: GPUExtent3D,\n    expectation: 'Success' | 'FinishError' | 'SubmitError'\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.copyTextureToTexture(source, destination, copySize);\n\n    if (expectation === 'FinishError') {\n      this.expectValidationError(() => {\n        commandEncoder.finish();\n      });\n    } else {\n      const cmd = commandEncoder.finish();\n      this.expectValidationError(() => {\n        this.device.queue.submit([cmd]);\n      }, expectation === 'SubmitError');\n    }\n  }\n\n  GetPhysicalSubresourceSize(\n    dimension: GPUTextureDimension,\n    textureSize: Required<GPUExtent3DDict>,\n    format: GPUTextureFormat,\n    mipLevel: number\n  ): Required<GPUExtent3DDict> {\n    const virtualWidthAtLevel = Math.max(textureSize.width >> mipLevel, 1);\n    const virtualHeightAtLevel = Math.max(textureSize.height >> mipLevel, 1);\n    const physicalWidthAtLevel = align(virtualWidthAtLevel, kTextureFormatInfo[format].blockWidth);\n    const physicalHeightAtLevel = align(\n      virtualHeightAtLevel,\n      kTextureFormatInfo[format].blockHeight\n    );\n\n    switch (dimension) {\n      case '1d':\n        return { width: physicalWidthAtLevel, height: 1, depthOrArrayLayers: 1 };\n      case '2d':\n        return {\n          width: physicalWidthAtLevel,\n          height: physicalHeightAtLevel,\n          depthOrArrayLayers: textureSize.depthOrArrayLayers,\n        };\n      case '3d':\n        return {\n          width: physicalWidthAtLevel,\n          height: physicalHeightAtLevel,\n          depthOrArrayLayers: Math.max(textureSize.depthOrArrayLayers >> mipLevel, 1),\n        };\n    }\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('copy_with_invalid_or_destroyed_texture')\n  .desc('Test copyTextureToTexture is an error when one of the textures is invalid or destroyed.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcState', kResourceStates)\n      .combine('dstState', kResourceStates)\n  )\n  .fn(async t => {\n    const { srcState, dstState } = t.params;\n\n    const textureDesc: GPUTextureDescriptor = {\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    };\n\n    const srcTexture = t.createTextureWithState(srcState, textureDesc);\n    const dstTexture = t.createTextureWithState(dstState, textureDesc);\n\n    const isSubmitSuccess = srcState === 'valid' && dstState === 'valid';\n    const isFinishSuccess = srcState !== 'invalid' && dstState !== 'invalid';\n    const expectation = isFinishSuccess\n      ? isSubmitSuccess\n        ? 'Success'\n        : 'SubmitError'\n      : 'FinishError';\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      expectation\n    );\n  });\n\ng.test('texture,device_mismatch')\n  .desc(\n    'Tests copyTextureToTexture cannot be called with src texture or dst texture created from another device.'\n  )\n  .paramsSubcasesOnly([\n    { srcMismatched: false, dstMismatched: false }, // control case\n    { srcMismatched: true, dstMismatched: false },\n    { srcMismatched: false, dstMismatched: true },\n  ] as const)\n  .fn(async t => {\n    const { srcMismatched, dstMismatched } = t.params;\n    const mismatched = srcMismatched || dstMismatched;\n\n    if (mismatched) {\n      await t.selectMismatchedDeviceOrSkipTestCase(undefined);\n    }\n\n    const device = mismatched ? t.mismatchedDevice : t.device;\n    const size = { width: 4, height: 4, depthOrArrayLayers: 1 };\n    const format = 'rgba8unorm';\n\n    const srcTexture = device.createTexture({\n      size,\n      format,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    t.trackForCleanup(srcTexture);\n\n    const dstTexture = device.createTexture({\n      size,\n      format,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n    t.trackForCleanup(dstTexture);\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      mismatched ? 'FinishError' : 'Success'\n    );\n  });\n\ng.test('mipmap_level')\n  .desc(\n    `\nTest copyTextureToTexture must specify mipLevels that are in range.\n- for various dimensions\n- for various mip level count in the texture\n- for various copy target mip level (in range and not in range)\n`\n  )\n  .params(u =>\n    u //\n      .combine('dimension', kTextureDimensions)\n      .beginSubcases()\n      .combineWithParams([\n        { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 0 },\n        { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 1, dstCopyLevel: 0 },\n        { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 1 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 0 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 2, dstCopyLevel: 0 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 3, dstCopyLevel: 0 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 2 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 3 },\n      ] as const)\n      .unless(p => p.dimension === '1d' && (p.srcLevelCount !== 1 || p.dstLevelCount !== 1))\n  )\n\n  .fn(async t => {\n    const { srcLevelCount, dstLevelCount, srcCopyLevel, dstCopyLevel, dimension } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 32, height: 1, depthOrArrayLayers: 1 },\n      dimension,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      mipLevelCount: srcLevelCount,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 32, height: 1, depthOrArrayLayers: 1 },\n      dimension,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      mipLevelCount: dstLevelCount,\n    });\n\n    const isSuccess = srcCopyLevel < srcLevelCount && dstCopyLevel < dstLevelCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('texture_usage')\n  .desc(\n    `\nTest that copyTextureToTexture source/destination need COPY_SRC/COPY_DST usages.\n- for all possible source texture usages\n- for all possible destination texture usages\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcUsage', kTextureUsages)\n      .combine('dstUsage', kTextureUsages)\n  )\n  .fn(async t => {\n    const { srcUsage, dstUsage } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: srcUsage,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: dstUsage,\n    });\n\n    const isSuccess =\n      srcUsage === GPUTextureUsage.COPY_SRC && dstUsage === GPUTextureUsage.COPY_DST;\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('sample_count')\n  .desc(\n    `\nTest that textures in copyTextureToTexture must have the same sample count.\n- for various source texture sample count\n- for various destination texture sample count\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcSampleCount', [1, 4])\n      .combine('dstSampleCount', [1, 4])\n  )\n  .fn(async t => {\n    const { srcSampleCount, dstSampleCount } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      sampleCount: srcSampleCount,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      sampleCount: dstSampleCount,\n    });\n\n    const isSuccess = srcSampleCount === dstSampleCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 4, height: 4, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('multisampled_copy_restrictions')\n  .desc(\n    `\nTest that copyTextureToTexture of multisampled texture must copy a whole subresource to a whole subresource.\n- for various origin for the source and destination of the copies.\n\nNote: this is only tested for 2D textures as it is the only dimension compatible with multisampling.\nTODO: Check the source and destination constraints separately.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcCopyOrigin', [\n        { x: 0, y: 0, z: 0 },\n        { x: 1, y: 0, z: 0 },\n        { x: 0, y: 1, z: 0 },\n        { x: 1, y: 1, z: 0 },\n      ])\n      .combine('dstCopyOrigin', [\n        { x: 0, y: 0, z: 0 },\n        { x: 1, y: 0, z: 0 },\n        { x: 0, y: 1, z: 0 },\n        { x: 1, y: 1, z: 0 },\n      ])\n      .expand('copyWidth', p => [32 - Math.max(p.srcCopyOrigin.x, p.dstCopyOrigin.x), 16])\n      .expand('copyHeight', p => [16 - Math.max(p.srcCopyOrigin.y, p.dstCopyOrigin.y), 8])\n  )\n  .fn(async t => {\n    const { srcCopyOrigin, dstCopyOrigin, copyWidth, copyHeight } = t.params;\n\n    const kWidth = 32;\n    const kHeight = 16;\n\n    // Currently we don't support multisampled 2D array textures and the mipmap level count of the\n    // multisampled textures must be 1.\n    const srcTexture = t.device.createTexture({\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      sampleCount: 4,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      sampleCount: 4,\n    });\n\n    const isSuccess = copyWidth === kWidth && copyHeight === kHeight;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: srcCopyOrigin },\n      { texture: dstTexture, origin: dstCopyOrigin },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('texture_format_compatibility')\n  .desc(\n    `\nTest the formats of textures in copyTextureToTexture must be copy-compatible.\n- for all source texture formats\n- for all destination texture formats\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcFormat', kTextureFormats)\n      .combine('dstFormat', kTextureFormats)\n  )\n  .fn(async t => {\n    const { srcFormat, dstFormat } = t.params;\n    const srcFormatInfo = kTextureFormatInfo[srcFormat];\n    const dstFormatInfo = kTextureFormatInfo[dstFormat];\n    await t.selectDeviceOrSkipTestCase([srcFormatInfo.feature, dstFormatInfo.feature]);\n\n    const kTextureSize = { width: 16, height: 16, depthOrArrayLayers: 1 };\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    // Allow copy between compatible format textures.\n    const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat ?? srcFormat;\n    const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat ?? dstFormat;\n    const isSuccess = srcBaseFormat === dstBaseFormat;\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      kTextureSize,\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('depth_stencil_copy_restrictions')\n  .desc(\n    `\nTest that depth textures subresources must be entirely copied in copyTextureToTexture\n- for various depth-stencil formats\n- for various copy origin and size offsets\n- for various source and destination texture sizes\n- for various source and destination mip levels\n\nNote: this is only tested for 2D textures as it is the only dimension compatible with depth-stencil.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('copyBoxOffsets', [\n        { x: 0, y: 0, width: 0, height: 0 },\n        { x: 1, y: 0, width: 0, height: 0 },\n        { x: 0, y: 1, width: 0, height: 0 },\n        { x: 0, y: 0, width: -1, height: 0 },\n        { x: 0, y: 0, width: 0, height: -1 },\n      ])\n      .combine('srcTextureSize', [\n        { width: 64, height: 64, depthOrArrayLayers: 1 },\n        { width: 64, height: 32, depthOrArrayLayers: 1 },\n        { width: 32, height: 32, depthOrArrayLayers: 1 },\n      ])\n      .combine('dstTextureSize', [\n        { width: 64, height: 64, depthOrArrayLayers: 1 },\n        { width: 64, height: 32, depthOrArrayLayers: 1 },\n        { width: 32, height: 32, depthOrArrayLayers: 1 },\n      ])\n      .combine('srcCopyLevel', [1, 2])\n      .combine('dstCopyLevel', [0, 1])\n  )\n  .fn(async t => {\n    const {\n      format,\n      copyBoxOffsets,\n      srcTextureSize,\n      dstTextureSize,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const kMipLevelCount = 3;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: srcTextureSize.width, height: srcTextureSize.height, depthOrArrayLayers: 1 },\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: dstTextureSize.width, height: dstTextureSize.height, depthOrArrayLayers: 1 },\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize('2d', srcTextureSize, format, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize('2d', dstTextureSize, format, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: 0 };\n\n    const copyWidth =\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x;\n    const copyHeight =\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y;\n\n    // Depth/stencil copies must copy whole subresources.\n    const isSuccess =\n      copyOrigin.x === 0 &&\n      copyOrigin.y === 0 &&\n      copyWidth === srcSizeAtLevel.width &&\n      copyHeight === srcSizeAtLevel.height &&\n      copyWidth === dstSizeAtLevel.width &&\n      copyHeight === dstSizeAtLevel.height;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n      { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n      { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('copy_ranges')\n  .desc(\n    `\nTest that copyTextureToTexture copy boxes must be in range of the subresource.\n- for various dimensions\n- for various offsets to a full copy for the copy origin/size\n- for various copy mip levels\n`\n  )\n  .params(u =>\n    u\n      .combine('dimension', kTextureDimensions)\n      //.beginSubcases()\n      .combine('copyBoxOffsets', [\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 1, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 1, y: 0, z: 0, width: -1, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 1, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 1, z: 0, width: 0, height: -1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 1, width: 0, height: 1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 2, width: 0, height: 1, depthOrArrayLayers: 0 },\n        { x: 0, y: 0, z: 0, width: 1, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: 1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 1 },\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 0 },\n        { x: 0, y: 0, z: 1, width: 0, height: 0, depthOrArrayLayers: -1 },\n        { x: 0, y: 0, z: 2, width: 0, height: 0, depthOrArrayLayers: -1 },\n      ])\n      .unless(\n        p =>\n          p.dimension === '1d' &&\n          (p.copyBoxOffsets.y !== 0 ||\n            p.copyBoxOffsets.z !== 0 ||\n            p.copyBoxOffsets.height !== 0 ||\n            p.copyBoxOffsets.depthOrArrayLayers !== 0)\n      )\n      .combine('srcCopyLevel', [0, 1, 3])\n      .combine('dstCopyLevel', [0, 1, 3])\n      .unless(p => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n  )\n  .fn(async t => {\n    const { dimension, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const textureSize = { width: 16, height: 8, depthOrArrayLayers: 3 };\n    let mipLevelCount = 4;\n    if (dimension === '1d') {\n      mipLevelCount = 1;\n      textureSize.height = 1;\n      textureSize.depthOrArrayLayers = 1;\n    }\n    const kFormat = 'rgba8unorm';\n\n    const srcTexture = t.device.createTexture({\n      size: textureSize,\n      format: kFormat,\n      dimension,\n      mipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: textureSize,\n      format: kFormat,\n      dimension,\n      mipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(\n      dimension,\n      textureSize,\n      kFormat,\n      srcCopyLevel\n    );\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(\n      dimension,\n      textureSize,\n      kFormat,\n      dstCopyLevel\n    );\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: copyBoxOffsets.z };\n\n    const copyWidth = Math.max(\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x,\n      0\n    );\n    const copyHeight = Math.max(\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y,\n      0\n    );\n    const copyDepth =\n      textureSize.depthOrArrayLayers + copyBoxOffsets.depthOrArrayLayers - copyOrigin.z;\n\n    {\n      let isSuccess =\n        copyWidth <= srcSizeAtLevel.width &&\n        copyHeight <= srcSizeAtLevel.height &&\n        copyOrigin.x + copyWidth <= dstSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= dstSizeAtLevel.height;\n\n      if (dimension === '3d') {\n        isSuccess =\n          isSuccess &&\n          copyDepth <= srcSizeAtLevel.depthOrArrayLayers &&\n          copyOrigin.z + copyDepth <= dstSizeAtLevel.depthOrArrayLayers;\n      } else {\n        isSuccess =\n          isSuccess &&\n          copyDepth <= textureSize.depthOrArrayLayers &&\n          copyOrigin.z + copyDepth <= textureSize.depthOrArrayLayers;\n      }\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess ? 'Success' : 'FinishError'\n      );\n    }\n\n    {\n      let isSuccess =\n        copyOrigin.x + copyWidth <= srcSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= srcSizeAtLevel.height &&\n        copyWidth <= dstSizeAtLevel.width &&\n        copyHeight <= dstSizeAtLevel.height;\n\n      if (dimension === '3d') {\n        isSuccess =\n          isSuccess &&\n          copyDepth <= dstSizeAtLevel.depthOrArrayLayers &&\n          copyOrigin.z + copyDepth <= srcSizeAtLevel.depthOrArrayLayers;\n      } else {\n        isSuccess =\n          isSuccess &&\n          copyDepth <= textureSize.depthOrArrayLayers &&\n          copyOrigin.z + copyDepth <= textureSize.depthOrArrayLayers;\n      }\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess ? 'Success' : 'FinishError'\n      );\n    }\n  });\n\ng.test('copy_within_same_texture')\n  .desc(\n    `\nTest that it is an error to use copyTextureToTexture from one subresource to itself.\n- for various starting source/destination array layers.\n- for various copy sizes in number of array layers\n\nTODO: Extend to check the copy is allowed between different mip levels.\nTODO: Extend to 1D and 3D textures.`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcCopyOriginZ', [0, 2, 4])\n      .combine('dstCopyOriginZ', [0, 2, 4])\n      .combine('copyExtentDepth', [1, 2, 3])\n  )\n  .fn(async t => {\n    const { srcCopyOriginZ, dstCopyOriginZ, copyExtentDepth } = t.params;\n\n    const kArrayLayerCount = 7;\n\n    const testTexture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: kArrayLayerCount },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const isSuccess =\n      Math.min(srcCopyOriginZ, dstCopyOriginZ) + copyExtentDepth <=\n      Math.max(srcCopyOriginZ, dstCopyOriginZ);\n    t.TestCopyTextureToTexture(\n      { texture: testTexture, origin: { x: 0, y: 0, z: srcCopyOriginZ } },\n      { texture: testTexture, origin: { x: 0, y: 0, z: dstCopyOriginZ } },\n      { width: 16, height: 16, depthOrArrayLayers: copyExtentDepth },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('copy_aspects')\n  .desc(\n    `\nTest the validations on the member 'aspect' of GPUImageCopyTexture in CopyTextureToTexture().\n- for all the color and depth-stencil formats: the texture copy aspects must be both 'all'.\n- for all the depth-only formats: the texture copy aspects must be either 'all' or 'depth-only'.\n- for all the stencil-only formats: the texture copy aspects must be either 'all' or 'stencil-only'.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', ['rgba8unorm', ...kDepthStencilFormats] as const)\n      .beginSubcases()\n      .combine('sourceAspect', ['all', 'depth-only', 'stencil-only'] as const)\n      .combine('destinationAspect', ['all', 'depth-only', 'stencil-only'] as const)\n  )\n  .fn(async t => {\n    const { format, sourceAspect, destinationAspect } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const kTextureSize = { width: 16, height: 8, depthOrArrayLayers: 1 };\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    // MAINTENANCE_TODO: get the valid aspects from capability_info.ts.\n    const kValidAspectsForFormat = {\n      rgba8unorm: ['all'],\n\n      // kUnsizedDepthStencilFormats\n      depth24plus: ['all', 'depth-only'],\n      'depth24plus-stencil8': ['all'],\n      'depth24unorm-stencil8': ['all'],\n      'depth32float-stencil8': ['all'],\n\n      // kSizedDepthStencilFormats\n      depth32float: ['all', 'depth-only'],\n      stencil8: ['all', 'stencil-only'],\n      depth16unorm: ['all', 'depth-only'],\n    };\n\n    const isSourceAspectValid = kValidAspectsForFormat[format].includes(sourceAspect);\n    const isDestinationAspectValid = kValidAspectsForFormat[format].includes(destinationAspect);\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, aspect: sourceAspect },\n      { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, aspect: destinationAspect },\n      kTextureSize,\n      isSourceAspectValid && isDestinationAspectValid ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('copy_ranges_with_compressed_texture_formats')\n  .desc(\n    `\nTest that copyTextureToTexture copy boxes must be in range of the subresource and aligned to the block size\n- for various dimensions\n- for various offsets to a full copy for the copy origin/size\n- for various copy mip levels\n\nTODO: Express the offsets in \"block size\" so as to be able to test non-4x4 compressed formats\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kCompressedTextureFormats)\n      .combine('dimension', kTextureDimensions)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .beginSubcases()\n      .combine('copyBoxOffsets', [\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 1, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 4, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: -1, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: -4, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 1, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 4, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: -1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: -4, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 0 },\n        { x: 0, y: 0, z: 1, width: 0, height: 0, depthOrArrayLayers: -1 },\n      ])\n      .combine('srcCopyLevel', [0, 1, 2])\n      .combine('dstCopyLevel', [0, 1, 2])\n  )\n  .fn(async t => {\n    const { format, dimension, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    const kTextureSize = {\n      width: 15 * blockWidth,\n      height: 12 * blockHeight,\n      depthOrArrayLayers: 3,\n    };\n    const kMipLevelCount = 4;\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      dimension,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      dimension,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(\n      dimension,\n      kTextureSize,\n      format,\n      srcCopyLevel\n    );\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(\n      dimension,\n      kTextureSize,\n      format,\n      dstCopyLevel\n    );\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: copyBoxOffsets.z };\n\n    const copyWidth = Math.max(\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x,\n      0\n    );\n    const copyHeight = Math.max(\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y,\n      0\n    );\n    const copyDepth =\n      kTextureSize.depthOrArrayLayers + copyBoxOffsets.depthOrArrayLayers - copyOrigin.z;\n\n    const texelBlockWidth = kTextureFormatInfo[format].blockWidth;\n    const texelBlockHeight = kTextureFormatInfo[format].blockHeight;\n\n    const isSuccessForCompressedFormats =\n      copyOrigin.x % texelBlockWidth === 0 &&\n      copyOrigin.y % texelBlockHeight === 0 &&\n      copyWidth % texelBlockWidth === 0 &&\n      copyHeight % texelBlockHeight === 0;\n\n    {\n      const isSuccess =\n        isSuccessForCompressedFormats &&\n        copyWidth <= srcSizeAtLevel.width &&\n        copyHeight <= srcSizeAtLevel.height &&\n        copyOrigin.x + copyWidth <= dstSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess ? 'Success' : 'FinishError'\n      );\n    }\n\n    {\n      const isSuccess =\n        isSuccessForCompressedFormats &&\n        copyOrigin.x + copyWidth <= srcSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= srcSizeAtLevel.height &&\n        copyWidth <= dstSizeAtLevel.width &&\n        copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess ? 'Success' : 'FinishError'\n      );\n    }\n  });\n"],"file":"copyTextureToTexture.spec.js"}