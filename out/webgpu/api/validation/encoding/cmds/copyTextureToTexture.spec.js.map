{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/copyTextureToTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","kAllTextureFormatInfo","kAllTextureFormats","kCompressedTextureFormats","kDepthStencilFormats","kTextureUsages","align","ValidationTest","F","TestCopyTextureToTexture","source","destination","copySize","isSuccess","commandEncoder","device","createCommandEncoder","copyTextureToTexture","expectValidationError","finish","GetPhysicalSubresourceSize","textureSize","format","mipLevel","virtualWidthAtLevel","Math","max","width","virtualHeightAtLevel","height","physicalWidthAtLevel","blockWidth","physicalHeightAtLevel","blockHeight","depthOrArrayLayers","g","test","fn","t","validTexture","createTexture","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","errorTexture","getErrorTexture","texture","subcases","srcLevelCount","dstLevelCount","srcCopyLevel","dstCopyLevel","srcTexture","mipLevelCount","dstTexture","combine","srcUsage","dstUsage","srcSampleCount","dstSampleCount","sampleCount","x","y","z","expand","p","srcCopyOrigin","dstCopyOrigin","copyWidth","copyHeight","kWidth","kHeight","origin","srcFormat","dstFormat","srcFormatInfo","dstFormatInfo","selectDeviceOrSkipTestCase","feature","kTextureSize","cases","copyBoxOffsets","srcTextureSize","dstTextureSize","kMipLevelCount","srcSizeAtLevel","dstSizeAtLevel","copyOrigin","min","kFormat","copyDepth","srcCopyOriginZ","dstCopyOriginZ","copyExtentDepth","kArrayLayerCount","testTexture","desc","sourceAspect","destinationAspect","kValidAspectsForFormat","rgba8unorm","depth24plus","depth32float","stencil8","depth16unorm","isSourceAspectValid","includes","isDestinationAspectValid","aspect","texelBlockWidth","texelBlockHeight","isSuccessForCompressedFormats"],"mappings":"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","sourcesContent":["export const description = `\ncopyTextureToTexture tests.\n\nTest Plan: (TODO(jiawei.shao@intel.com): add tests on 1D/3D textures)\n* the source and destination texture\n  - the {source, destination} texture is {invalid, valid}.\n  - mipLevel {>, =, <} the mipmap level count of the {source, destination} texture.\n  - the source texture is created {with, without} GPUTextureUsage::CopySrc.\n  - the destination texture is created {with, without} GPUTextureUsage::CopyDst.\n* sample count\n  - the sample count of the source texture {is, isn't} equal to the one of the destination texture\n  - when the sample count is greater than 1:\n    - it {is, isn't} a copy of the whole subresource of the source texture.\n    - it {is, isn't} a copy of the whole subresource of the destination texture.\n* texture format\n  - the format of the source texture {is, isn't} equal to the one of the destination texture.\n    - including: depth24plus-stencil8 to/from {depth24plus, stencil8}.\n  - for each depth and/or stencil format: a copy between two textures with same format:\n    - it {is, isn't} a copy of the whole subresource of the {source, destination} texture.\n* copy ranges\n  - if the texture dimension is 2D:\n    - (srcOrigin.x + copyExtent.width) {>, =, <} the width of the subresource size of source\n      textureCopyView.\n    - (srcOrigin.y + copyExtent.height) {>, =, <} the height of the subresource size of source\n      textureCopyView.\n    - (srcOrigin.z + copyExtent.depthOrArrayLayers) {>, =, <} the depthOrArrayLayers of the subresource size of source\n      textureCopyView.\n    - (dstOrigin.x + copyExtent.width) {>, =, <} the width of the subresource size of destination\n      textureCopyView.\n    - (dstOrigin.y + copyExtent.height) {>, =, <} the height of the subresource size of destination\n      textureCopyView.\n    - (dstOrigin.z + copyExtent.depthOrArrayLayers) {>, =, <} the depthOrArrayLayers of the subresource size of destination\n      textureCopyView.\n* when the source and destination texture are the same one:\n  - the set of source texture subresources {has, doesn't have} overlaps with the one of destination\n    texture subresources.\n`;\n\nimport { poptions, params } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport {\n  kAllTextureFormatInfo,\n  kAllTextureFormats,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  kTextureUsages,\n} from '../../../../capability_info.js';\nimport { align } from '../../../../util/math.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  TestCopyTextureToTexture(\n    source: GPUImageCopyTexture,\n    destination: GPUImageCopyTexture,\n    copySize: GPUExtent3D,\n    isSuccess: boolean\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.copyTextureToTexture(source, destination, copySize);\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !isSuccess);\n  }\n\n  GetPhysicalSubresourceSize(\n    textureSize: Required<GPUExtent3DDict>,\n    format: GPUTextureFormat,\n    mipLevel: number\n  ): Required<GPUExtent3DDict> {\n    const virtualWidthAtLevel = Math.max(textureSize.width >> mipLevel, 1);\n    const virtualHeightAtLevel = Math.max(textureSize.height >> mipLevel, 1);\n    const physicalWidthAtLevel = align(\n      virtualWidthAtLevel,\n      kAllTextureFormatInfo[format].blockWidth\n    );\n    const physicalHeightAtLevel = align(\n      virtualHeightAtLevel,\n      kAllTextureFormatInfo[format].blockHeight\n    );\n    return {\n      width: physicalWidthAtLevel,\n      height: physicalHeightAtLevel,\n      depthOrArrayLayers: textureSize.depthOrArrayLayers,\n    };\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('copy_with_invalid_texture').fn(async t => {\n  const validTexture = t.device.createTexture({\n    size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const errorTexture = t.getErrorTexture();\n\n  t.TestCopyTextureToTexture(\n    { texture: errorTexture },\n    { texture: validTexture },\n    { width: 1, height: 1, depthOrArrayLayers: 1 },\n    false\n  );\n  t.TestCopyTextureToTexture(\n    { texture: validTexture },\n    { texture: errorTexture },\n    { width: 1, height: 1, depthOrArrayLayers: 1 },\n    false\n  );\n});\n\ng.test('mipmap_level')\n  .subcases(\n    () =>\n      [\n        { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 0 },\n        { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 1, dstCopyLevel: 0 },\n        { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 1 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 0 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 2, dstCopyLevel: 0 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 3, dstCopyLevel: 0 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 2 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 3 },\n      ] as const\n  )\n  .fn(async t => {\n    const { srcLevelCount, dstLevelCount, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 32, height: 32, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      mipLevelCount: srcLevelCount,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 32, height: 32, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      mipLevelCount: dstLevelCount,\n    });\n\n    const isSuccess = srcCopyLevel < srcLevelCount && dstCopyLevel < dstLevelCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n  });\n\ng.test('texture_usage')\n  .params(\n    params()\n      .combine(poptions('srcUsage', kTextureUsages))\n      .combine(poptions('dstUsage', kTextureUsages))\n  )\n  .fn(async t => {\n    const { srcUsage, dstUsage } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: srcUsage,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: dstUsage,\n    });\n\n    const isSuccess =\n      srcUsage === GPUTextureUsage.COPY_SRC && dstUsage === GPUTextureUsage.COPY_DST;\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n  });\n\ng.test('sample_count')\n  .params(\n    params()\n      .combine(poptions('srcSampleCount', [1, 4]))\n      .combine(poptions('dstSampleCount', [1, 4]))\n  )\n  .fn(async t => {\n    const { srcSampleCount, dstSampleCount } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      sampleCount: srcSampleCount,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      sampleCount: dstSampleCount,\n    });\n\n    const isSuccess = srcSampleCount === dstSampleCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 4, height: 4, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n  });\n\ng.test('multisampled_copy_restrictions')\n  .subcases(() =>\n    params()\n      .combine(\n        poptions('srcCopyOrigin', [\n          { x: 0, y: 0, z: 0 },\n          { x: 1, y: 0, z: 0 },\n          { x: 0, y: 1, z: 0 },\n          { x: 1, y: 1, z: 0 },\n        ])\n      )\n      .combine(\n        poptions('dstCopyOrigin', [\n          { x: 0, y: 0, z: 0 },\n          { x: 1, y: 0, z: 0 },\n          { x: 0, y: 1, z: 0 },\n          { x: 1, y: 1, z: 0 },\n        ])\n      )\n      .expand(p => poptions('copyWidth', [32 - Math.max(p.srcCopyOrigin.x, p.dstCopyOrigin.x), 16]))\n      .expand(p => poptions('copyHeight', [16 - Math.max(p.srcCopyOrigin.y, p.dstCopyOrigin.y), 8]))\n  )\n  .fn(async t => {\n    const { srcCopyOrigin, dstCopyOrigin, copyWidth, copyHeight } = t.params;\n\n    const kWidth = 32;\n    const kHeight = 16;\n\n    // Currently we don't support multisampled 2D array textures and the mipmap level count of the\n    // multisampled textures must be 1.\n    const srcTexture = t.device.createTexture({\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      sampleCount: 4,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      sampleCount: 4,\n    });\n\n    const isSuccess = copyWidth === kWidth && copyHeight === kHeight;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: srcCopyOrigin },\n      { texture: dstTexture, origin: dstCopyOrigin },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n  });\n\ng.test('texture_format_equality')\n  .subcases(() =>\n    params()\n      .combine(poptions('srcFormat', kAllTextureFormats))\n      .combine(poptions('dstFormat', kAllTextureFormats))\n  )\n  .fn(async t => {\n    const { srcFormat, dstFormat } = t.params;\n    const srcFormatInfo = kAllTextureFormatInfo[srcFormat];\n    const dstFormatInfo = kAllTextureFormatInfo[dstFormat];\n    await t.selectDeviceOrSkipTestCase([srcFormatInfo.feature, dstFormatInfo.feature]);\n\n    const kTextureSize = { width: 16, height: 16, depthOrArrayLayers: 1 };\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const isSuccess = srcFormat === dstFormat;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      kTextureSize,\n      isSuccess\n    );\n  });\n\ng.test('depth_stencil_copy_restrictions')\n  .cases(poptions('format', kDepthStencilFormats))\n  .subcases(() =>\n    params()\n      .combine(\n        poptions('copyBoxOffsets', [\n          { x: 0, y: 0, width: 0, height: 0 },\n          { x: 1, y: 0, width: 0, height: 0 },\n          { x: 0, y: 1, width: 0, height: 0 },\n          { x: 0, y: 0, width: -1, height: 0 },\n          { x: 0, y: 0, width: 0, height: -1 },\n        ])\n      )\n      .combine(\n        poptions('srcTextureSize', [\n          { width: 64, height: 64, depthOrArrayLayers: 1 },\n          { width: 64, height: 32, depthOrArrayLayers: 1 },\n          { width: 32, height: 32, depthOrArrayLayers: 1 },\n        ])\n      )\n      .combine(\n        poptions('dstTextureSize', [\n          { width: 64, height: 64, depthOrArrayLayers: 1 },\n          { width: 64, height: 32, depthOrArrayLayers: 1 },\n          { width: 32, height: 32, depthOrArrayLayers: 1 },\n        ])\n      )\n      .combine(poptions('srcCopyLevel', [1, 2]))\n      .combine(poptions('dstCopyLevel', [0, 1]))\n  )\n  .fn(async t => {\n    const {\n      format,\n      copyBoxOffsets,\n      srcTextureSize,\n      dstTextureSize,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].feature);\n\n    const kMipLevelCount = 3;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: srcTextureSize.width, height: srcTextureSize.height, depthOrArrayLayers: 1 },\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: dstTextureSize.width, height: dstTextureSize.height, depthOrArrayLayers: 1 },\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(srcTextureSize, format, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(dstTextureSize, format, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: 0 };\n\n    const copyWidth =\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x;\n    const copyHeight =\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y;\n\n    // Depth/stencil copies must copy whole subresources.\n    const isSuccess =\n      copyOrigin.x === 0 &&\n      copyOrigin.y === 0 &&\n      copyWidth === srcSizeAtLevel.width &&\n      copyHeight === srcSizeAtLevel.height &&\n      copyWidth === dstSizeAtLevel.width &&\n      copyHeight === dstSizeAtLevel.height;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n      { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n      { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n  });\n\ng.test('copy_ranges')\n  .subcases(() =>\n    params()\n      .combine(\n        poptions('copyBoxOffsets', [\n          { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n          { x: 1, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n          { x: 1, y: 0, z: 0, width: -1, height: 0, depthOrArrayLayers: -2 },\n          { x: 0, y: 1, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n          { x: 0, y: 1, z: 0, width: 0, height: -1, depthOrArrayLayers: -2 },\n          { x: 0, y: 0, z: 1, width: 0, height: 1, depthOrArrayLayers: -2 },\n          { x: 0, y: 0, z: 2, width: 0, height: 1, depthOrArrayLayers: 0 },\n          { x: 0, y: 0, z: 0, width: 1, height: 0, depthOrArrayLayers: -2 },\n          { x: 0, y: 0, z: 0, width: 0, height: 1, depthOrArrayLayers: -2 },\n          { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 1 },\n          { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 0 },\n          { x: 0, y: 0, z: 1, width: 0, height: 0, depthOrArrayLayers: -1 },\n          { x: 0, y: 0, z: 2, width: 0, height: 0, depthOrArrayLayers: -1 },\n        ])\n      )\n      .combine(poptions('srcCopyLevel', [0, 1, 3]))\n      .combine(poptions('dstCopyLevel', [0, 1, 3]))\n  )\n  .fn(async t => {\n    const { copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const kTextureSize = { width: 16, height: 8, depthOrArrayLayers: 3 };\n    const kMipLevelCount = 4;\n    const kFormat = 'rgba8unorm';\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: kFormat,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: kFormat,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, kFormat, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, kFormat, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: copyBoxOffsets.z };\n\n    const copyWidth = Math.max(\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x,\n      0\n    );\n    const copyHeight = Math.max(\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y,\n      0\n    );\n    const copyDepth =\n      kTextureSize.depthOrArrayLayers + copyBoxOffsets.depthOrArrayLayers - copyOrigin.z;\n\n    {\n      const isSuccess =\n        copyWidth <= srcSizeAtLevel.width &&\n        copyHeight <= srcSizeAtLevel.height &&\n        copyOrigin.x + copyWidth <= dstSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess\n      );\n    }\n\n    {\n      const isSuccess =\n        copyOrigin.x + copyWidth <= srcSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= srcSizeAtLevel.height &&\n        copyWidth <= dstSizeAtLevel.width &&\n        copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess\n      );\n    }\n  });\n\ng.test('copy_within_same_texture')\n  .subcases(() =>\n    params()\n      .combine(poptions('srcCopyOriginZ', [0, 2, 4]))\n      .combine(poptions('dstCopyOriginZ', [0, 2, 4]))\n      .combine(poptions('copyExtentDepth', [1, 2, 3]))\n  )\n  .fn(async t => {\n    const { srcCopyOriginZ, dstCopyOriginZ, copyExtentDepth } = t.params;\n\n    const kArrayLayerCount = 7;\n\n    const testTexture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: kArrayLayerCount },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const isSuccess =\n      Math.min(srcCopyOriginZ, dstCopyOriginZ) + copyExtentDepth <=\n      Math.max(srcCopyOriginZ, dstCopyOriginZ);\n    t.TestCopyTextureToTexture(\n      { texture: testTexture, origin: { x: 0, y: 0, z: srcCopyOriginZ } },\n      { texture: testTexture, origin: { x: 0, y: 0, z: dstCopyOriginZ } },\n      { width: 16, height: 16, depthOrArrayLayers: copyExtentDepth },\n      isSuccess\n    );\n  });\n\ng.test('copy_aspects')\n  .desc(\n    `\nTest the validations on the member 'aspect' of GPUImageCopyTexture in CopyTextureToTexture().\n- for all the color and depth-stencil formats: the texture copy aspects must be both 'all'.\n- for all the depth-only formats: the texture copy aspects must be either 'all' or 'depth-only'.\n- for all the stencil-only formats: the texture copy aspects must be either 'all' or 'stencil-only'.\n`\n  )\n  .cases(poptions('format', ['rgba8unorm', ...kDepthStencilFormats] as const))\n  .subcases(() =>\n    params()\n      .combine(poptions('sourceAspect', ['all', 'depth-only', 'stencil-only'] as const))\n      .combine(poptions('destinationAspect', ['all', 'depth-only', 'stencil-only'] as const))\n  )\n  .fn(async t => {\n    const { format, sourceAspect, destinationAspect } = t.params;\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].feature);\n\n    const kTextureSize = { width: 16, height: 8, depthOrArrayLayers: 1 };\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    // TODO(jiawei.shao@intel.com): get the valid aspects from capability_info.ts.\n    const kValidAspectsForFormat = {\n      rgba8unorm: ['all'],\n\n      // kUnsizedDepthStencilFormats\n      depth24plus: ['all', 'depth-only'],\n      'depth24plus-stencil8': ['all'],\n      'depth24unorm-stencil8': ['all'],\n      'depth32float-stencil8': ['all'],\n\n      // kSizedDepthStencilFormats\n      depth32float: ['all', 'depth-only'],\n      stencil8: ['all', 'stencil-only'],\n      depth16unorm: ['all', 'depth-only'],\n    };\n\n    const isSourceAspectValid = kValidAspectsForFormat[format].includes(sourceAspect);\n    const isDestinationAspectValid = kValidAspectsForFormat[format].includes(destinationAspect);\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, aspect: sourceAspect },\n      { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, aspect: destinationAspect },\n      kTextureSize,\n      isSourceAspectValid && isDestinationAspectValid\n    );\n  });\n\ng.test('copy_ranges_with_compressed_texture_formats')\n  .cases(poptions('format', kCompressedTextureFormats))\n  .subcases(() =>\n    params()\n      .combine(\n        poptions('copyBoxOffsets', [\n          { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n          { x: 1, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n          { x: 4, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n          { x: 0, y: 0, z: 0, width: -1, height: 0, depthOrArrayLayers: -2 },\n          { x: 0, y: 0, z: 0, width: -4, height: 0, depthOrArrayLayers: -2 },\n          { x: 0, y: 1, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n          { x: 0, y: 4, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n          { x: 0, y: 0, z: 0, width: 0, height: -1, depthOrArrayLayers: -2 },\n          { x: 0, y: 0, z: 0, width: 0, height: -4, depthOrArrayLayers: -2 },\n          { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 0 },\n          { x: 0, y: 0, z: 1, width: 0, height: 0, depthOrArrayLayers: -1 },\n        ])\n      )\n      .combine(poptions('srcCopyLevel', [0, 1, 2]))\n      .combine(poptions('dstCopyLevel', [0, 1, 2]))\n  )\n  .fn(async t => {\n    const { format, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].feature);\n\n    const kTextureSize = { width: 60, height: 48, depthOrArrayLayers: 3 };\n    const kMipLevelCount = 4;\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, format, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, format, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: copyBoxOffsets.z };\n\n    const copyWidth = Math.max(\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x,\n      0\n    );\n    const copyHeight = Math.max(\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y,\n      0\n    );\n    const copyDepth =\n      kTextureSize.depthOrArrayLayers + copyBoxOffsets.depthOrArrayLayers - copyOrigin.z;\n\n    const texelBlockWidth = kAllTextureFormatInfo[format].blockWidth;\n    const texelBlockHeight = kAllTextureFormatInfo[format].blockHeight;\n\n    const isSuccessForCompressedFormats =\n      copyOrigin.x % texelBlockWidth === 0 &&\n      copyOrigin.y % texelBlockHeight === 0 &&\n      copyWidth % texelBlockWidth === 0 &&\n      copyHeight % texelBlockHeight === 0;\n\n    {\n      const isSuccess =\n        isSuccessForCompressedFormats &&\n        copyWidth <= srcSizeAtLevel.width &&\n        copyHeight <= srcSizeAtLevel.height &&\n        copyOrigin.x + copyWidth <= dstSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess\n      );\n    }\n\n    {\n      const isSuccess =\n        isSuccessForCompressedFormats &&\n        copyOrigin.x + copyWidth <= srcSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= srcSizeAtLevel.height &&\n        copyWidth <= dstSizeAtLevel.width &&\n        copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess\n      );\n    }\n  });\n"],"file":"copyTextureToTexture.spec.js"}