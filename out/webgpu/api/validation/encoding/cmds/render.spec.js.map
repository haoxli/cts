{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/render.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzCO,CA2CP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAD,CAAvB","sourcesContent":["export const description = `\nDoes **not** test usage scopes (resource_usages/) or programmable pass stuff (programmable_pass).\n\nTODO: check for duplication (render_pass.spec.ts, etc.), plan, and implement. Notes:\n> All x= {render pass, render bundle}\n>\n> - setPipeline\n>     - {valid, invalid} GPURenderPipeline\n> - setIndexBuffer\n>     - buffer is {valid, invalid, destroyed, doesn't have usage)\n>     - (offset, size) is\n>         - (0, 0)\n>         - (0, 1)\n>         - (0, 4)\n>         - (0, 5)\n>         - (0, b.size)\n>         - (min alignment, b.size - 4)\n>         - (4, b.size - 4)\n>         - (b.size - 4, 4)\n>         - (b.size, min size)\n>         - (0, min size), and if that's valid:\n>             - (b.size - min size, min size)\n> - setVertexBuffer\n>     - slot is {0, max, max+1}\n>     - buffer is {valid, invalid, destroyed, doesn't have usage)\n>     - (offset, size) is like above\n> - draws (note bind group state is not tested here):\n>     - various zero-sized draws\n>     - draws with vertexCount not aligned to primitive topology (line-list or triangle-list) (should not error)\n>     - index buffer is {unset, set}\n>     - vertex buffers are {unset, set} (some that the pipeline uses, some it doesn't)\n>       (note: to test this, the shader in the pipeline doesn't have to actually use inputs)\n>     - x= {draw, drawIndexed, drawIndirect, drawIndexedIndirect}\n> - indirect draws:\n>     - indirectBuffer is {valid, invalid, destroyed, doesn't have usage)\n>     - indirectOffset is {\n>         - 0, 1, 4\n>         - b.size - sizeof(args struct)\n>         - b.size - sizeof(args struct) + min alignment (1 or 2 or 4)\n>         - }\n>     - x= {drawIndirect, drawIndexedIndirect}\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n"],"file":"render.spec.js"}