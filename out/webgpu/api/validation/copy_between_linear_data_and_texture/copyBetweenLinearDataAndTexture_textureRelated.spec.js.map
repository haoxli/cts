{"version":3,"sources":["../../../../../src/webgpu/api/validation/copy_between_linear_data_and_texture/copyBetweenLinearDataAndTexture_textureRelated.spec.ts"],"names":["description","params","poptions","makeTestGroup","assert","kSizedTextureFormats","kSizedTextureFormatInfo","GPUConst","align","kImageCopyTypes","CopyBetweenLinearDataAndTextureTest","texelBlockAlignmentTestExpanderForValueToCoordinate","formatCopyableWithMethod","g","test","cases","combine","fn","t","method","textureState","texture","device","createTexture","size","width","height","depth","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","destroy","getErrorTexture","success","submit","testRun","bytesPerRow","dataSize","subcases","TextureUsage","SAMPLED","sampleCount","mipLevelCount","mipLevel","filter","p","expand","coordinateToTest","valueToCoordinate","info","selectDeviceOrSkipTestCase","extension","origin","x","y","z","blockWidth","blockHeight","createAlignedTexture","dimension","rowsPerImage","originValue","copySizeValue","textureSizeValue","copySize","textureSize"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAG,EAApB,CAEP,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,gDAAjC;AACA,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,MAAT,QAAuB,2CAAvB;AACA,SAASC,oBAAT,EAA+BC,uBAA/B,QAA8D,6BAA9D;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,eAAT,QAAgC,qCAAhC;;AAEA;AACEC,mCADF;AAEEC,mDAFF;AAGEC,wBAHF;AAIO,sCAJP;;AAMA,OAAO,MAAMC,CAAC,GAAGV,aAAa,CAACO,mCAAD,CAAvB;;AAEPG,CAAC,CAACC,IAAF,CAAO,uBAAP;AACGC,KADH;AAEId,MAAM;AACHe,OADH,CACWd,QAAQ,CAAC,QAAD,EAAWO,eAAX,CADnB;AAEGO,OAFH,CAEWd,QAAQ,CAAC,cAAD,EAAiB,CAAC,OAAD,EAAU,WAAV,EAAuB,OAAvB,CAAjB,CAFnB,CAFJ;;AAMGe,EANH,CAMM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,MAAF,EAAUC,YAAV,KAA2BF,CAAC,CAACjB,MAAnC;;AAEA;AACA,MAAIoB,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACnCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAD6B;AAEnCC,IAAAA,MAAM,EAAE,YAF2B;AAGnCC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHf,EAAvB,CAAd;;;AAMA,UAAQZ,YAAR;AACE,SAAK,WAAL,CAAkB;AAChBC,QAAAA,OAAO,CAACY,OAAR;AACA;AACD;AACD,SAAK,OAAL,CAAc;AACZZ,QAAAA,OAAO,GAAGH,CAAC,CAACgB,eAAF,EAAV;AACA;AACD,OARH;;;AAWA,QAAMC,OAAO,GAAGf,YAAY,KAAK,OAAjC;AACA,QAAMgB,MAAM,GAAGhB,YAAY,KAAK,WAAhC;;AAEAF,EAAAA,CAAC,CAACmB,OAAF;AACE,IAAEhB,OAAF,EADF;AAEE,IAAEiB,WAAW,EAAE,CAAf,EAFF;AAGE,IAAEb,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAHF;AAIE,IAAEY,QAAQ,EAAE,CAAZ,EAAepB,MAAf,EAAuBgB,OAAvB,EAAgCC,MAAhC,EAJF;;AAMD,CApCH;;AAsCAvB,CAAC,CAACC,IAAF,CAAO,6BAAP;AACGC,KADH,CACSb,QAAQ,CAAC,QAAD,EAAWO,eAAX,CADjB;AAEG+B,QAFH,CAEY;AACRtC,QAAQ,CAAC,OAAD,EAAU;AAChBK,QAAQ,CAACkC,YAAT,CAAsBV,QAAtB,GAAiCxB,QAAQ,CAACkC,YAAT,CAAsBC,OADvC;AAEhBnC,QAAQ,CAACkC,YAAT,CAAsBT,QAAtB,GAAiCzB,QAAQ,CAACkC,YAAT,CAAsBC,OAFvC;AAGhBnC,QAAQ,CAACkC,YAAT,CAAsBV,QAAtB,GAAiCxB,QAAQ,CAACkC,YAAT,CAAsBT,QAHvC,CAAV,CAHZ;;;AASGf,EATH,CASM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEW,KAAF,EAASV,MAAT,KAAoBD,CAAC,CAACjB,MAA5B;;AAEA,QAAMoB,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAD+B;AAErCC,IAAAA,MAAM,EAAE,YAF6B;AAGrCC,IAAAA,KAHqC,EAAvB,CAAhB;;;AAMA,QAAMM,OAAO;AACXhB,EAAAA,MAAM,KAAK,SAAX;AACI,GAACU,KAAK,GAAGC,eAAe,CAACC,QAAzB,MAAuC,CAD3C;AAEI,GAACF,KAAK,GAAGC,eAAe,CAACE,QAAzB,MAAuC,CAH7C;;AAKAd,EAAAA,CAAC,CAACmB,OAAF;AACE,IAAEhB,OAAF,EADF;AAEE,IAAEiB,WAAW,EAAE,CAAf,EAFF;AAGE,IAAEb,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAHF;AAIE,IAAEY,QAAQ,EAAE,CAAZ,EAAepB,MAAf,EAAuBgB,OAAvB,EAJF;;AAMD,CA7BH;;AA+BAtB,CAAC,CAACC,IAAF,CAAO,wBAAP;AACGC,KADH,CACSb,QAAQ,CAAC,QAAD,EAAWO,eAAX,CADjB;AAEG+B,QAFH,CAEY,MAAMtC,QAAQ,CAAC,aAAD,EAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAF1B;AAGGe,EAHH,CAGM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEyB,WAAF,EAAexB,MAAf,KAA0BD,CAAC,CAACjB,MAAlC;;AAEA,QAAMoB,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAD+B;AAErCgB,IAAAA,WAFqC;AAGrCf,IAAAA,MAAM,EAAE,YAH6B;AAIrCC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAA3C,GAAsDF,eAAe,CAACY,OAJxC,EAAvB,CAAhB;;;AAOA,QAAMP,OAAO,GAAGQ,WAAW,KAAK,CAAhC;;AAEAzB,EAAAA,CAAC,CAACmB,OAAF;AACE,IAAEhB,OAAF,EADF;AAEE,IAAEiB,WAAW,EAAE,CAAf,EAFF;AAGE,IAAEb,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAHF;AAIE,IAAEY,QAAQ,EAAE,CAAZ,EAAepB,MAAf,EAAuBgB,OAAvB,EAJF;;AAMD,CArBH;;AAuBAtB,CAAC,CAACC,IAAF,CAAO,4BAAP;AACGC,KADH,CACSb,QAAQ,CAAC,QAAD,EAAWO,eAAX,CADjB;AAEG+B,QAFH,CAEY;AACRvC,MAAM;AACHe,OADH,CACWd,QAAQ,CAAC,eAAD,EAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlB,CADnB;AAEGc,OAFH,CAEWd,QAAQ,CAAC,UAAD,EAAa,CAAC,CAAD,EAAI,CAAJ,CAAb,CAFnB,CAHJ;;AAOGe,EAPH,CAOM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAE0B,aAAF,EAAiBC,QAAjB,EAA2B1B,MAA3B,KAAsCD,CAAC,CAACjB,MAA9C;;AAEA,QAAMoB,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,EAAT,EAAaC,MAAM,EAAE,EAArB,EAAyBC,KAAK,EAAE,CAAhC,EAD+B;AAErCiB,IAAAA,aAFqC;AAGrChB,IAAAA,MAAM,EAAE,YAH6B;AAIrCC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAJb,EAAvB,CAAhB;;;AAOA,QAAMG,OAAO,GAAGU,QAAQ,GAAGD,aAA3B;;AAEA1B,EAAAA,CAAC,CAACmB,OAAF;AACE,IAAEhB,OAAF,EAAWwB,QAAX,EADF;AAEE,IAAEP,WAAW,EAAE,CAAf,EAFF;AAGE,IAAEb,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAHF;AAIE,IAAEY,QAAQ,EAAE,CAAZ,EAAepB,MAAf,EAAuBgB,OAAvB,EAJF;;AAMD,CAzBH;;AA2BAtB,CAAC,CAACC,IAAF,CAAO,kCAAP;AACGC,KADH;AAEId,MAAM;AACHe,OADH,CACWd,QAAQ,CAAC,QAAD,EAAWO,eAAX,CADnB;AAEGO,OAFH,CAEWd,QAAQ,CAAC,QAAD,EAAWG,oBAAX,CAFnB;AAGGyC,MAHH,CAGUlC,wBAHV,CAFJ;;AAOG4B,QAPH,CAOY,CAAAO,CAAC;AACT9C,MAAM;AACHe,OADH,CACWd,QAAQ,CAAC,kBAAD,EAAqB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAArB,CADnB;AAEG8C,MAFH,CAEU,CAAC,EAAEC,gBAAF,EAAD;AACNtC,mDAAmD,CAAC,EAAEiB,MAAM,EAAEmB,CAAC,CAACnB,MAAZ,EAAoBqB,gBAApB,EAAD,CAHvD,CARJ;;;AAcGhC,EAdH,CAcM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEgC,iBAAF,EAAqBD,gBAArB,EAAuCrB,MAAvC,EAA+CT,MAA/C,KAA0DD,CAAC,CAACjB,MAAlE;AACA,QAAMkD,IAAI,GAAG7C,uBAAuB,CAACsB,MAAD,CAApC;AACA,QAAMV,CAAC,CAACkC,0BAAF,CAA6BD,IAAI,CAACE,SAAlC,CAAN;;AAEA,QAAMC,MAAM,GAAG,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAf;AACA,QAAMjC,IAAI,GAAG,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAAb;AACA,MAAIQ,OAAO,GAAG,IAAd;;AAEAmB,EAAAA,MAAM,CAACL,gBAAD,CAAN,GAA2BC,iBAA3B;AACA,UAAQD,gBAAR;AACE,SAAK,GAAL,CAAU;AACRd,QAAAA,OAAO,GAAGmB,MAAM,CAACC,CAAP,GAAWJ,IAAI,CAACO,UAAhB,KAA+B,CAAzC;AACA;AACD;AACD,SAAK,GAAL,CAAU;AACRvB,QAAAA,OAAO,GAAGmB,MAAM,CAACE,CAAP,GAAWL,IAAI,CAACQ,WAAhB,KAAgC,CAA1C;AACA;AACD,OARH;;;AAWA,QAAMtC,OAAO,GAAGH,CAAC,CAAC0C,oBAAF,CAAuBhC,MAAvB,EAA+BJ,IAA/B,EAAqC8B,MAArC,CAAhB;;AAEApC,EAAAA,CAAC,CAACmB,OAAF,CAAU,EAAEhB,OAAF,EAAWiC,MAAX,EAAV,EAA+B,EAAEhB,WAAW,EAAE,CAAf,EAA/B,EAAmDd,IAAnD,EAAyD;AACvDe,IAAAA,QAAQ,EAAE,CAD6C;AAEvDpB,IAAAA,MAFuD;AAGvDgB,IAAAA,OAHuD,EAAzD;;AAKD,CA1CH;;AA4CAtB,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,KADH,CACSb,QAAQ,CAAC,QAAD,EAAWO,eAAX,CADjB;AAEG+B,QAFH,CAEY;AACRvC,MAAM;AACHe,OADH,CACWd,QAAQ,CAAC,OAAD,EAAU,CAAC,CAAD,EAAI,CAAJ,CAAV,CADnB;AAEGc,OAFH,CAEW;AACP,EAAEU,MAAM,EAAE,CAAV,EAAaC,KAAK,EAAE,CAApB,EADO;AAEP,EAAED,MAAM,EAAE,CAAV,EAAaC,KAAK,EAAE,CAApB,EAFO;AAGP,EAAED,MAAM,EAAE,CAAV,EAAaC,KAAK,EAAE,CAApB,EAHO;AAIP,EAAED,MAAM,EAAE,CAAV,EAAaC,KAAK,EAAE,CAApB,EAJO;AAKP,EAAED,MAAM,EAAE,CAAV,EAAaC,KAAK,EAAE,CAApB,EALO,CAFX,CAHJ;;;AAaGV,EAbH,CAaM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,MAAF,EAAUM,KAAV,EAAiBC,MAAjB,EAAyBC,KAAzB,KAAmCT,CAAC,CAACjB,MAA3C;AACA,QAAMuB,IAAI,GAAG,EAAEC,KAAF,EAASC,MAAT,EAAiBC,KAAjB,EAAb;;AAEA,QAAMN,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAD+B;AAErCkC,IAAAA,SAAS,EAAE,IAF0B;AAGrCjC,IAAAA,MAAM,EAAE,YAH6B;AAIrCC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAJb,EAAvB,CAAhB;;;AAOA;AACA;AACA,QAAMG,OAAO,GAAGX,IAAI,CAACE,MAAL,KAAgB,CAAhB,IAAqBF,IAAI,CAACG,KAAL,KAAe,CAApD;;AAEAT,EAAAA,CAAC,CAACmB,OAAF,CAAU,EAAEhB,OAAF,EAAV,EAAuB,EAAEiB,WAAW,EAAE,GAAf,EAAoBwB,YAAY,EAAE,CAAlC,EAAvB,EAA8DtC,IAA9D,EAAoE;AAClEe,IAAAA,QAAQ,EAAE,EADwD;AAElEpB,IAAAA,MAFkE;AAGlEgB,IAAAA,OAHkE,EAApE;;AAKD,CAjCH;;AAmCAtB,CAAC,CAACC,IAAF,CAAO,gCAAP;AACGC,KADH;AAEId,MAAM;AACHe,OADH,CACWd,QAAQ,CAAC,QAAD,EAAWO,eAAX,CADnB;AAEGO,OAFH,CAEWd,QAAQ,CAAC,QAAD,EAAWG,oBAAX,CAFnB;AAGGyC,MAHH,CAGUlC,wBAHV,CAFJ;;AAOG4B,QAPH,CAOY,CAAAO,CAAC;AACT9C,MAAM;AACHe,OADH,CACWd,QAAQ,CAAC,kBAAD,EAAqB,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CAArB,CADnB;AAEG8C,MAFH,CAEU,CAAC,EAAEC,gBAAF,EAAD;AACNtC,mDAAmD,CAAC,EAAEiB,MAAM,EAAEmB,CAAC,CAACnB,MAAZ,EAAoBqB,gBAApB,EAAD,CAHvD,CARJ;;;AAcGhC,EAdH,CAcM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEgC,iBAAF,EAAqBD,gBAArB,EAAuCrB,MAAvC,EAA+CT,MAA/C,KAA0DD,CAAC,CAACjB,MAAlE;AACA,QAAMkD,IAAI,GAAG7C,uBAAuB,CAACsB,MAAD,CAApC;AACA,QAAMV,CAAC,CAACkC,0BAAF,CAA6BD,IAAI,CAACE,SAAlC,CAAN;;AAEA,QAAMC,MAAM,GAAG,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAf;AACA,QAAMjC,IAAI,GAAG,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAAb;AACA,MAAIQ,OAAO,GAAG,IAAd;;AAEAX,EAAAA,IAAI,CAACyB,gBAAD,CAAJ,GAAyBC,iBAAzB;AACA,UAAQD,gBAAR;AACE,SAAK,OAAL,CAAc;AACZd,QAAAA,OAAO,GAAGX,IAAI,CAACC,KAAL,GAAa0B,IAAI,CAACO,UAAlB,KAAiC,CAA3C;AACA;AACD;AACD,SAAK,QAAL,CAAe;AACbvB,QAAAA,OAAO,GAAGX,IAAI,CAACE,MAAL,GAAcyB,IAAI,CAACQ,WAAnB,KAAmC,CAA7C;AACA;AACD,OARH;;;AAWA,QAAMtC,OAAO,GAAGH,CAAC,CAAC0C,oBAAF,CAAuBhC,MAAvB,EAA+BJ,IAA/B,EAAqC8B,MAArC,CAAhB;;AAEAlD,EAAAA,MAAM,CAACoB,IAAI,CAACC,KAAL,GAAa0B,IAAI,CAACO,UAAlB,KAAiC,CAAlC,CAAN;AACA,QAAMpB,WAAW,GAAG9B,KAAK,CAACgB,IAAI,CAACC,KAAL,GAAa0B,IAAI,CAACO,UAAnB,EAA+B,GAA/B,CAAzB;AACAtD,EAAAA,MAAM,CAACoB,IAAI,CAACE,MAAL,GAAcyB,IAAI,CAACQ,WAAnB,KAAmC,CAApC,CAAN;AACA,QAAMG,YAAY,GAAGtC,IAAI,CAACE,MAAL,GAAcyB,IAAI,CAACQ,WAAxC;AACAzC,EAAAA,CAAC,CAACmB,OAAF,CAAU,EAAEhB,OAAF,EAAWiC,MAAX,EAAV,EAA+B,EAAEhB,WAAF,EAAewB,YAAf,EAA/B,EAA8DtC,IAA9D,EAAoE;AAClEe,IAAAA,QAAQ,EAAE,CADwD;AAElEpB,IAAAA,MAFkE;AAGlEgB,IAAAA,OAHkE,EAApE;;AAKD,CA9CH;;AAgDAtB,CAAC,CAACC,IAAF,CAAO,0BAAP;AACGC,KADH,CACSb,QAAQ,CAAC,QAAD,EAAWO,eAAX,CADjB;AAEG+B,QAFH,CAEY;AACRvC,MAAM;AACHe,OADH,CACWd,QAAQ,CAAC,aAAD,EAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CADnB;AAEGc,OAFH,CAEWd,QAAQ,CAAC,eAAD,EAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlB,CAFnB;AAGGc,OAHH,CAGWd,QAAQ,CAAC,kBAAD,EAAqB,CAAC,EAAD,EAAK,EAAL,CAArB,CAHnB;AAIGc,OAJH,CAIWd,QAAQ,CAAC,UAAD,EAAa,CAAC,CAAD,EAAI,CAAJ,CAAb,CAJnB;AAKGc,OALH,CAKWd,QAAQ,CAAC,kBAAD,EAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAArB,CALnB,CAHJ;;AAUGe,EAVH,CAUM,MAAMC,CAAN,IAAW;AACb,QAAM;AACJ6C,IAAAA,WADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,gBAHI;AAIJpB,IAAAA,QAJI;AAKJI,IAAAA,gBALI;AAMJ9B,IAAAA,MANI;AAOFD,EAAAA,CAAC,CAACjB,MAPN;AAQA,QAAM2B,MAAM,GAAG,YAAf;AACA,QAAMuB,IAAI,GAAG7C,uBAAuB,CAACsB,MAAD,CAApC;;AAEA,QAAM0B,MAAmB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA5B;AACA,QAAMY,QAAqB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA9B;AACA,QAAMC,WAAW,GAAG,EAAE1C,KAAK,EAAE,MAAMoB,QAAf,EAAyBnB,MAAM,EAAE,MAAMmB,QAAvC,EAAiDlB,KAAK,EAAE,EAAxD,EAApB;AACA,QAAMQ,OAAO,GAAG4B,WAAW,GAAGC,aAAd,IAA+BC,gBAA/C;;AAEAX,EAAAA,MAAM,CAACL,gBAAD,CAAN,GAA2Bc,WAA3B;AACAG,EAAAA,QAAQ,CAACjB,gBAAD,CAAR,GAA6Be,aAA7B;AACA,UAAQf,gBAAR;AACE,SAAK,CAAL,CAAQ;AACNkB,QAAAA,WAAW,CAAC1C,KAAZ,GAAoBwC,gBAAgB,IAAIpB,QAAxC;AACA;AACD;AACD,SAAK,CAAL,CAAQ;AACNsB,QAAAA,WAAW,CAACzC,MAAZ,GAAqBuC,gBAAgB,IAAIpB,QAAzC;AACA;AACD;AACD,SAAK,CAAL,CAAQ;AACNsB,QAAAA,WAAW,CAACxC,KAAZ,GAAoBsC,gBAApB;AACA;AACD,OAZH;;;AAeA,QAAM5C,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE2C,WAD+B;AAErCvB,IAAAA,aAAa,EAAE,CAFsB;AAGrChB,IAAAA,MAHqC;AAIrCC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAJb,EAAvB,CAAhB;;;AAOA5B,EAAAA,MAAM,CAAC8D,QAAQ,CAAC,CAAD,CAAR,GAAcf,IAAI,CAACO,UAAnB,KAAkC,CAAnC,CAAN;AACA,QAAMpB,WAAW,GAAG9B,KAAK,CAAC0D,QAAQ,CAAC,CAAD,CAAR,GAAcf,IAAI,CAACO,UAApB,EAAgC,GAAhC,CAAzB;AACAtD,EAAAA,MAAM,CAAC8D,QAAQ,CAAC,CAAD,CAAR,GAAcf,IAAI,CAACQ,WAAnB,KAAmC,CAApC,CAAN;AACA,QAAMG,YAAY,GAAGI,QAAQ,CAAC,CAAD,CAAR,GAAcf,IAAI,CAACQ,WAAxC;AACAzC,EAAAA,CAAC,CAACmB,OAAF,CAAU,EAAEhB,OAAF,EAAWiC,MAAX,EAAmBT,QAAnB,EAAV,EAAyC,EAAEP,WAAF,EAAewB,YAAf,EAAzC,EAAwEI,QAAxE,EAAkF;AAChF3B,IAAAA,QAAQ,EAAE,CADsE;AAEhFpB,IAAAA,MAFgF;AAGhFgB,IAAAA,OAHgF,EAAlF;;AAKD,CA5DH","sourcesContent":["export const description = '';\n\nimport { params, poptions } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/framework/util/util.js';\nimport { kSizedTextureFormats, kSizedTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { align } from '../../../util/math.js';\nimport { kImageCopyTypes } from '../../../util/texture/image_copy.js';\n\nimport {\n  CopyBetweenLinearDataAndTextureTest,\n  texelBlockAlignmentTestExpanderForValueToCoordinate,\n  formatCopyableWithMethod,\n} from './copyBetweenLinearDataAndTexture.js';\n\nexport const g = makeTestGroup(CopyBetweenLinearDataAndTextureTest);\n\ng.test('texture_must_be_valid')\n  .cases(\n    params()\n      .combine(poptions('method', kImageCopyTypes))\n      .combine(poptions('textureState', ['valid', 'destroyed', 'error']))\n  )\n  .fn(async t => {\n    const { method, textureState } = t.params;\n\n    // A valid texture.\n    let texture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    switch (textureState) {\n      case 'destroyed': {\n        texture.destroy();\n        break;\n      }\n      case 'error': {\n        texture = t.getErrorTexture();\n        break;\n      }\n    }\n\n    const success = textureState === 'valid';\n    const submit = textureState === 'destroyed';\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depth: 0 },\n      { dataSize: 1, method, success, submit }\n    );\n  });\n\ng.test('texture_usage_must_be_valid')\n  .cases(poptions('method', kImageCopyTypes))\n  .subcases(() =>\n    poptions('usage', [\n      GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.SAMPLED,\n      GPUConst.TextureUsage.COPY_DST | GPUConst.TextureUsage.SAMPLED,\n      GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.COPY_DST,\n    ])\n  )\n  .fn(async t => {\n    const { usage, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    const success =\n      method === 'CopyT2B'\n        ? (usage & GPUTextureUsage.COPY_SRC) !== 0\n        : (usage & GPUTextureUsage.COPY_DST) !== 0;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depth: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('sample_count_must_be_1')\n  .cases(poptions('method', kImageCopyTypes))\n  .subcases(() => poptions('sampleCount', [1, 4]))\n  .fn(async t => {\n    const { sampleCount, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      sampleCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED,\n    });\n\n    const success = sampleCount === 1;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depth: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('mip_level_must_be_in_range')\n  .cases(poptions('method', kImageCopyTypes))\n  .subcases(() =>\n    params()\n      .combine(poptions('mipLevelCount', [3, 5]))\n      .combine(poptions('mipLevel', [3, 4]))\n  )\n  .fn(async t => {\n    const { mipLevelCount, mipLevel, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 32, height: 32, depth: 1 },\n      mipLevelCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = mipLevel < mipLevelCount;\n\n    t.testRun(\n      { texture, mipLevel },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depth: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('texel_block_alignments_on_origin')\n  .cases(\n    params()\n      .combine(poptions('method', kImageCopyTypes))\n      .combine(poptions('format', kSizedTextureFormats))\n      .filter(formatCopyableWithMethod)\n  )\n  .subcases(p =>\n    params()\n      .combine(poptions('coordinateToTest', ['x', 'y', 'z'] as const))\n      .expand(({ coordinateToTest }) =>\n        texelBlockAlignmentTestExpanderForValueToCoordinate({ format: p.format, coordinateToTest })\n      )\n  )\n  .fn(async t => {\n    const { valueToCoordinate, coordinateToTest, format, method } = t.params;\n    const info = kSizedTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const origin = { x: 0, y: 0, z: 0 };\n    const size = { width: 0, height: 0, depth: 0 };\n    let success = true;\n\n    origin[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'x': {\n        success = origin.x % info.blockWidth === 0;\n        break;\n      }\n      case 'y': {\n        success = origin.y % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin);\n\n    t.testRun({ texture, origin }, { bytesPerRow: 0 }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('1d_texture')\n  .cases(poptions('method', kImageCopyTypes))\n  .subcases(() =>\n    params()\n      .combine(poptions('width', [0, 1]))\n      .combine([\n        { height: 1, depth: 1 },\n        { height: 1, depth: 0 },\n        { height: 1, depth: 2 },\n        { height: 0, depth: 1 },\n        { height: 2, depth: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { method, width, height, depth } = t.params;\n    const size = { width, height, depth };\n\n    const texture = t.device.createTexture({\n      size: { width: 2, height: 1, depth: 1 },\n      dimension: '1d',\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    // For 1d textures we require copyHeight and copyDepth to be 1,\n    // copyHeight or copyDepth being 0 should cause a validation error.\n    const success = size.height === 1 && size.depth === 1;\n\n    t.testRun({ texture }, { bytesPerRow: 256, rowsPerImage: 4 }, size, {\n      dataSize: 16,\n      method,\n      success,\n    });\n  });\n\ng.test('texel_block_alignments_on_size')\n  .cases(\n    params()\n      .combine(poptions('method', kImageCopyTypes))\n      .combine(poptions('format', kSizedTextureFormats))\n      .filter(formatCopyableWithMethod)\n  )\n  .subcases(p =>\n    params()\n      .combine(poptions('coordinateToTest', ['width', 'height', 'depth'] as const))\n      .expand(({ coordinateToTest }) =>\n        texelBlockAlignmentTestExpanderForValueToCoordinate({ format: p.format, coordinateToTest })\n      )\n  )\n  .fn(async t => {\n    const { valueToCoordinate, coordinateToTest, format, method } = t.params;\n    const info = kSizedTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const origin = { x: 0, y: 0, z: 0 };\n    const size = { width: 0, height: 0, depth: 0 };\n    let success = true;\n\n    size[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'width': {\n        success = size.width % info.blockWidth === 0;\n        break;\n      }\n      case 'height': {\n        success = size.height % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin);\n\n    assert(size.width % info.blockWidth === 0);\n    const bytesPerRow = align(size.width / info.blockWidth, 256);\n    assert(size.height % info.blockHeight === 0);\n    const rowsPerImage = size.height / info.blockHeight;\n    t.testRun({ texture, origin }, { bytesPerRow, rowsPerImage }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('texture_range_conditions')\n  .cases(poptions('method', kImageCopyTypes))\n  .subcases(() =>\n    params()\n      .combine(poptions('originValue', [7, 8]))\n      .combine(poptions('copySizeValue', [7, 8]))\n      .combine(poptions('textureSizeValue', [14, 15]))\n      .combine(poptions('mipLevel', [0, 2]))\n      .combine(poptions('coordinateToTest', [0, 1, 2] as const))\n  )\n  .fn(async t => {\n    const {\n      originValue,\n      copySizeValue,\n      textureSizeValue,\n      mipLevel,\n      coordinateToTest,\n      method,\n    } = t.params;\n    const format = 'rgba8unorm';\n    const info = kSizedTextureFormatInfo[format];\n\n    const origin: GPUOrigin3D = [0, 0, 0];\n    const copySize: GPUExtent3D = [0, 0, 0];\n    const textureSize = { width: 16 << mipLevel, height: 16 << mipLevel, depth: 16 };\n    const success = originValue + copySizeValue <= textureSizeValue;\n\n    origin[coordinateToTest] = originValue;\n    copySize[coordinateToTest] = copySizeValue;\n    switch (coordinateToTest) {\n      case 0: {\n        textureSize.width = textureSizeValue << mipLevel;\n        break;\n      }\n      case 1: {\n        textureSize.height = textureSizeValue << mipLevel;\n        break;\n      }\n      case 2: {\n        textureSize.depth = textureSizeValue;\n        break;\n      }\n    }\n\n    const texture = t.device.createTexture({\n      size: textureSize,\n      mipLevelCount: 3,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    assert(copySize[0] % info.blockWidth === 0);\n    const bytesPerRow = align(copySize[0] / info.blockWidth, 256);\n    assert(copySize[1] % info.blockHeight === 0);\n    const rowsPerImage = copySize[1] / info.blockHeight;\n    t.testRun({ texture, origin, mipLevel }, { bytesPerRow, rowsPerImage }, copySize, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n"],"file":"copyBetweenLinearDataAndTexture_textureRelated.spec.js"}