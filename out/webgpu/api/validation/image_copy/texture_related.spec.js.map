{"version":3,"sources":["../../../../../src/webgpu/api/validation/image_copy/texture_related.spec.ts"],"names":["description","makeTestGroup","assert","kSizedTextureFormats","kTextureFormatInfo","textureDimensionAndFormatCompatible","GPUConst","align","kImageCopyTypes","ImageCopyTest","texelBlockAlignmentTestExpanderForValueToCoordinate","formatCopyableWithMethod","g","test","desc","params","u","combine","combineWithParams","depthOrArrayLayers","dimension","fn","t","method","textureState","texture","device","createTexture","size","width","height","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","destroy","getErrorTexture","success","submit","testRun","bytesPerRow","dataSize","paramsSubcasesOnly","unimplemented","beginSubcases","TextureUsage","SAMPLED","sampleCount","mipLevelCount","mipLevel","filter","expand","valueToCoordinate","coordinateToTest","info","selectDeviceOrSkipTestCase","feature","origin","x","y","z","blockWidth","blockHeight","createAlignedTexture","rowsPerImage","bytesPerBlock","originValue","copySizeValue","textureSizeValue","copySize","textureSize"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANO,CAQP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA;AACEC,oBADF;AAEEC,kBAFF;AAGEC,mCAHF;AAIO,6BAJP;AAKA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,eAAT,QAAgC,iCAAhC;;AAEA;AACEC,aADF;AAEEC,mDAFF;AAGEC,wBAHF;AAIO,iBAJP;;AAMA,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACQ,aAAD,CAAvB;;AAEPG,CAAC,CAACC,IAAF,CAAO,OAAP;AACGC,IADH,CACS,8CADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,QADX,EACqBT,eADrB;AAEGS,OAFH,CAEW,cAFX,EAE2B,CAAC,OAAD,EAAU,WAAV,EAAuB,OAAvB,CAF3B;AAGGC,iBAHH,CAGqB;AACjB,EAAEC,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EADiB;AAEjB,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EAFiB;AAGjB,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EAHiB,CAHrB,CAHJ;;;AAYGC,EAZH,CAYM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,MAAF,EAAUC,YAAV,EAAwBL,kBAAxB,EAA4CC,SAA5C,KAA0DE,CAAC,CAACP,MAAlE;;AAEA;AACA,MAAIU,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACnCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBX,kBAAvB,EAD6B;AAEnCC,IAAAA,SAFmC;AAGnCW,IAAAA,MAAM,EAAE,YAH2B;AAInCC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAJf,EAAvB,CAAd;;;AAOA,UAAQX,YAAR;AACE,SAAK,WAAL,CAAkB;AAChBC,QAAAA,OAAO,CAACW,OAAR;AACA;AACD;AACD,SAAK,OAAL,CAAc;AACZX,QAAAA,OAAO,GAAGH,CAAC,CAACe,eAAF,EAAV;AACA;AACD,OARH;;;AAWA,QAAMC,OAAO,GAAGd,YAAY,KAAK,OAAjC;AACA,QAAMe,MAAM,GAAGf,YAAY,KAAK,WAAhC;;AAEAF,EAAAA,CAAC,CAACkB,OAAF;AACE,IAAEf,OAAF,EADF;AAEE,IAAEgB,WAAW,EAAE,CAAf,EAFF;AAGE,IAAEZ,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBX,kBAAkB,EAAE,CAA3C,EAHF;AAIE,IAAEuB,QAAQ,EAAE,CAAZ,EAAenB,MAAf,EAAuBe,OAAvB,EAAgCC,MAAhC,EAJF;;AAMD,CA3CH;;AA6CA3B,CAAC,CAACC,IAAF,CAAO,yBAAP;AACGC,IADH,CACQ,oFADR;AAEG6B,kBAFH,CAEsB,CAAA3B,CAAC;AACnBA,CAAC,CAACC,OAAF,CAAU,QAAV,EAAoBT,eAApB,EAAqCS,OAArC,CAA6C,YAA7C,EAA2D,CAAC,IAAD,EAAO,KAAP,CAA3D,CAHJ;;AAKG2B,aALH;;AAOAhC,CAAC,CAACC,IAAF,CAAO,wBAAP;AACGC,IADH,CACQ,mFADR;AAEG6B,kBAFH,CAEsB,CAAA3B,CAAC;AACnBA,CAAC,CAACC,OAAF,CAAU,QAAV,EAAoB,CAAC,SAAD,EAAY,SAAZ,CAApB,EAAqDA,OAArD,CAA6D,YAA7D,EAA2E,CAAC,IAAD,EAAO,KAAP,CAA3E,CAHJ;;AAKG2B,aALH;;AAOAhC,CAAC,CAACC,IAAF,CAAO,OAAP;AACGC,IADH,CACS,gEADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqBT,eADrB;AAEGU,iBAFH,CAEqB;AACjB,EAAEC,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EADiB;AAEjB,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EAFiB;AAGjB,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EAHiB,CAFrB;;AAOGyB,aAPH;AAQG5B,OARH,CAQW,OARX,EAQoB;AAChBX,QAAQ,CAACwC,YAAT,CAAsBZ,QAAtB,GAAiC5B,QAAQ,CAACwC,YAAT,CAAsBC,OADvC;AAEhBzC,QAAQ,CAACwC,YAAT,CAAsBX,QAAtB,GAAiC7B,QAAQ,CAACwC,YAAT,CAAsBC,OAFvC;AAGhBzC,QAAQ,CAACwC,YAAT,CAAsBZ,QAAtB,GAAiC5B,QAAQ,CAACwC,YAAT,CAAsBX,QAHvC,CARpB,CAHJ;;;AAiBGd,EAjBH,CAiBM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEU,KAAF,EAAST,MAAT,EAAiBJ,kBAAjB,EAAqCC,SAArC,KAAmDE,CAAC,CAACP,MAA3D;;AAEA,QAAMU,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBX,kBAAvB,EAD+B;AAErCC,IAAAA,SAFqC;AAGrCW,IAAAA,MAAM,EAAE,YAH6B;AAIrCC,IAAAA,KAJqC,EAAvB,CAAhB;;;AAOA,QAAMM,OAAO;AACXf,EAAAA,MAAM,KAAK,SAAX;AACI,GAACS,KAAK,GAAGC,eAAe,CAACC,QAAzB,MAAuC,CAD3C;AAEI,GAACF,KAAK,GAAGC,eAAe,CAACE,QAAzB,MAAuC,CAH7C;;AAKAb,EAAAA,CAAC,CAACkB,OAAF;AACE,IAAEf,OAAF,EADF;AAEE,IAAEgB,WAAW,EAAE,CAAf,EAFF;AAGE,IAAEZ,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBX,kBAAkB,EAAE,CAA3C,EAHF;AAIE,IAAEuB,QAAQ,EAAE,CAAZ,EAAenB,MAAf,EAAuBe,OAAvB,EAJF;;AAMD,CAtCH;;AAwCA1B,CAAC,CAACC,IAAF,CAAO,cAAP;AACGC,IADH;AAEK,oKAFL;;AAIGC,MAJH,CAIU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,QADX,EACqBT,eADrB;AAEGqC,aAFH;AAGG5B,OAHH,CAGW,aAHX,EAG0B,CAAC,CAAD,EAAI,CAAJ,CAH1B,CALJ;;AAUGI,EAVH,CAUM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAE0B,WAAF,EAAezB,MAAf,KAA0BD,CAAC,CAACP,MAAlC;;AAEA,QAAMU,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBX,kBAAkB,EAAE,CAA3C,EAD+B;AAErC6B,IAAAA,WAFqC;AAGrCjB,IAAAA,MAAM,EAAE,YAH6B;AAIrCC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAA3C,GAAsDF,eAAe,CAACc,OAJxC,EAAvB,CAAhB;;;AAOA,QAAMT,OAAO,GAAGU,WAAW,KAAK,CAAhC;;AAEA1B,EAAAA,CAAC,CAACkB,OAAF;AACE,IAAEf,OAAF,EADF;AAEE,IAAEgB,WAAW,EAAE,CAAf,EAFF;AAGE,IAAEZ,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBX,kBAAkB,EAAE,CAA3C,EAHF;AAIE,IAAEuB,QAAQ,EAAE,CAAZ,EAAenB,MAAf,EAAuBe,OAAvB,EAJF;;AAMD,CA5BH;;AA8BA1B,CAAC,CAACC,IAAF,CAAO,WAAP;AACGC,IADH,CACS,2DADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqBT,eADrB;AAEGU,iBAFH,CAEqB;AACjB,EAAEC,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EADiB;AAEjB,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EAFiB;AAGjB,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EAHiB,CAFrB;;AAOGyB,aAPH;AAQG5B,OARH,CAQW,eARX,EAQ4B,CAAC,CAAD,EAAI,CAAJ,CAR5B;AASGA,OATH,CASW,UATX,EASuB,CAAC,CAAD,EAAI,CAAJ,CATvB,CAHJ;;AAcGI,EAdH,CAcM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAE2B,aAAF,EAAiBC,QAAjB,EAA2B3B,MAA3B,EAAmCJ,kBAAnC,EAAuDC,SAAvD,KAAqEE,CAAC,CAACP,MAA7E;;AAEA,QAAMU,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,EAAT,EAAaC,MAAM,EAAE,EAArB,EAAyBX,kBAAzB,EAD+B;AAErCC,IAAAA,SAFqC;AAGrC6B,IAAAA,aAHqC;AAIrClB,IAAAA,MAAM,EAAE,YAJ6B;AAKrCC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QALb,EAAvB,CAAhB;;;AAQA,QAAMG,OAAO,GAAGY,QAAQ,GAAGD,aAA3B;;AAEA3B,EAAAA,CAAC,CAACkB,OAAF;AACE,IAAEf,OAAF,EAAWyB,QAAX,EADF;AAEE,IAAET,WAAW,EAAE,CAAf,EAFF;AAGE,IAAEZ,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBX,kBAAkB,EAAE,CAA3C,EAHF;AAIE,IAAEuB,QAAQ,EAAE,CAAZ,EAAenB,MAAf,EAAuBe,OAAvB,EAJF;;AAMD,CAjCH;;AAmCA1B,CAAC,CAACC,IAAF,CAAO,kBAAP;AACGC,IADH,CACS,4CADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqBT,eADrB;AAEGS,OAFH,CAEW,QAFX,EAEqBd,oBAFrB;AAGGgD,MAHH,CAGUxC,wBAHV;AAIGO,iBAJH,CAIqB;AACjB,EAAEC,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EADiB;AAEjB,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EAFiB;AAGjB,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,IAApC,EAHiB,CAJrB;;AASG+B,MATH,CASU,CAAC,EAAE/B,SAAF,EAAaW,MAAb,EAAD,KAA2B1B,mCAAmC,CAACe,SAAD,EAAYW,MAAZ,CATxE;AAUGc,aAVH;AAWG5B,OAXH,CAWW,kBAXX,EAW+B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAX/B;AAYGmC,MAZH,CAYU,mBAZV,EAY+B1C,mDAZ/B,CAHJ;;AAiBGW,EAjBH,CAiBM,MAAMC,CAAN,IAAW;AACb,QAAM;AACJ+B,IAAAA,iBADI;AAEJC,IAAAA,gBAFI;AAGJvB,IAAAA,MAHI;AAIJR,IAAAA,MAJI;AAKJJ,IAAAA,kBALI;AAMJC,IAAAA,SANI;AAOFE,EAAAA,CAAC,CAACP,MAPN;AAQA,QAAMwC,IAAI,GAAGnD,kBAAkB,CAAC2B,MAAD,CAA/B;AACA,QAAMT,CAAC,CAACkC,0BAAF,CAA6BD,IAAI,CAACE,OAAlC,CAAN;;AAEA,QAAMC,MAAM,GAAG,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAf;AACA,QAAMjC,IAAI,GAAG,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBX,kBAAvB,EAAb;AACA,MAAImB,OAAO,GAAG,IAAd;;AAEAoB,EAAAA,MAAM,CAACJ,gBAAD,CAAN,GAA2BD,iBAA3B;AACA,UAAQC,gBAAR;AACE,SAAK,GAAL,CAAU;AACRhB,QAAAA,OAAO,GAAGoB,MAAM,CAACC,CAAP,GAAWJ,IAAI,CAACO,UAAhB,KAA+B,CAAzC;AACA;AACD;AACD,SAAK,GAAL,CAAU;AACRxB,QAAAA,OAAO,GAAGoB,MAAM,CAACE,CAAP,GAAWL,IAAI,CAACQ,WAAhB,KAAgC,CAA1C;AACA;AACD,OARH;;;AAWA,QAAMtC,OAAO,GAAGH,CAAC,CAAC0C,oBAAF,CAAuBjC,MAAvB,EAA+BH,IAA/B,EAAqC8B,MAArC,EAA6CtC,SAA7C,CAAhB;;AAEAE,EAAAA,CAAC,CAACkB,OAAF,CAAU,EAAEf,OAAF,EAAWiC,MAAX,EAAV,EAA+B,EAAEjB,WAAW,EAAE,CAAf,EAAkBwB,YAAY,EAAE,CAAhC,EAA/B,EAAoErC,IAApE,EAA0E;AACxEc,IAAAA,QAAQ,EAAE,CAD8D;AAExEnB,IAAAA,MAFwE;AAGxEe,IAAAA,OAHwE,EAA1E;;AAKD,CApDH;;AAsDA1B,CAAC,CAACC,IAAF,CAAO,IAAP;AACGC,IADH,CACS,6CADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqBT,eADrB;AAEGqC,aAFH;AAGG5B,OAHH,CAGW,OAHX,EAGoB,CAAC,CAAD,EAAI,CAAJ,CAHpB;AAIGC,iBAJH,CAIqB;AACjB,EAAEY,MAAM,EAAE,CAAV,EAAaX,kBAAkB,EAAE,CAAjC,EADiB;AAEjB,EAAEW,MAAM,EAAE,CAAV,EAAaX,kBAAkB,EAAE,CAAjC,EAFiB;AAGjB,EAAEW,MAAM,EAAE,CAAV,EAAaX,kBAAkB,EAAE,CAAjC,EAHiB;AAIjB,EAAEW,MAAM,EAAE,CAAV,EAAaX,kBAAkB,EAAE,CAAjC,EAJiB;AAKjB,EAAEW,MAAM,EAAE,CAAV,EAAaX,kBAAkB,EAAE,CAAjC,EALiB,CAJrB,CAHJ;;;AAeGE,EAfH,CAeM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,MAAF,EAAUM,KAAV,EAAiBC,MAAjB,EAAyBX,kBAAzB,KAAgDG,CAAC,CAACP,MAAxD;AACA,QAAMa,IAAI,GAAG,EAAEC,KAAF,EAASC,MAAT,EAAiBX,kBAAjB,EAAb;;AAEA,QAAMM,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBX,kBAAkB,EAAE,CAA3C,EAD+B;AAErCC,IAAAA,SAAS,EAAE,IAF0B;AAGrCW,IAAAA,MAAM,EAAE,YAH6B;AAIrCC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAJb,EAAvB,CAAhB;;;AAOA;AACA;AACA,QAAMG,OAAO,GAAGV,IAAI,CAACE,MAAL,KAAgB,CAAhB,IAAqBF,IAAI,CAACT,kBAAL,KAA4B,CAAjE;;AAEAG,EAAAA,CAAC,CAACkB,OAAF,CAAU,EAAEf,OAAF,EAAV,EAAuB,EAAEgB,WAAW,EAAE,GAAf,EAAoBwB,YAAY,EAAE,CAAlC,EAAvB,EAA8DrC,IAA9D,EAAoE;AAClEc,IAAAA,QAAQ,EAAE,EADwD;AAElEnB,IAAAA,MAFkE;AAGlEe,IAAAA,OAHkE,EAApE;;AAKD,CAnCH;;AAqCA1B,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,IADH,CACS,0CADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqBT,eADrB;AAEGS,OAFH,CAEW,QAFX,EAEqBd,oBAFrB;AAGGgD,MAHH,CAGUxC,wBAHV;AAIGM,OAJH,CAIW,WAJX,EAIwB,CAAC,IAAD,EAAO,IAAP,CAJxB;AAKGkC,MALH,CAKU,CAAC,EAAE/B,SAAF,EAAaW,MAAb,EAAD,KAA2B1B,mCAAmC,CAACe,SAAD,EAAYW,MAAZ,CALxE;AAMGc,aANH;AAOG5B,OAPH,CAOW,kBAPX,EAO+B,CAAC,OAAD,EAAU,QAAV,EAAoB,oBAApB,CAP/B;AAQGmC,MARH,CAQU,mBARV,EAQ+B1C,mDAR/B,CAHJ;;AAaGW,EAbH,CAaM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAE+B,iBAAF,EAAqBC,gBAArB,EAAuCvB,MAAvC,EAA+CR,MAA/C,KAA0DD,CAAC,CAACP,MAAlE;AACA,QAAMwC,IAAI,GAAGnD,kBAAkB,CAAC2B,MAAD,CAA/B;AACA,QAAMT,CAAC,CAACkC,0BAAF,CAA6BD,IAAI,CAACE,OAAlC,CAAN;;AAEA,QAAMC,MAAM,GAAG,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAf;AACA,QAAMjC,IAAI,GAAG,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBX,kBAAkB,EAAE,CAA3C,EAAb;AACA,MAAImB,OAAO,GAAG,IAAd;;AAEAV,EAAAA,IAAI,CAAC0B,gBAAD,CAAJ,GAAyBD,iBAAzB;AACA,UAAQC,gBAAR;AACE,SAAK,OAAL,CAAc;AACZhB,QAAAA,OAAO,GAAGV,IAAI,CAACC,KAAL,GAAa0B,IAAI,CAACO,UAAlB,KAAiC,CAA3C;AACA;AACD;AACD,SAAK,QAAL,CAAe;AACbxB,QAAAA,OAAO,GAAGV,IAAI,CAACE,MAAL,GAAcyB,IAAI,CAACQ,WAAnB,KAAmC,CAA7C;AACA;AACD,OARH;;;AAWA,QAAMtC,OAAO,GAAGH,CAAC,CAAC0C,oBAAF,CAAuBjC,MAAvB,EAA+BH,IAA/B,EAAqC8B,MAArC,CAAhB;;AAEA,QAAMjB,WAAW,GAAGlC,KAAK;AACtBA,EAAAA,KAAK,CAACqB,IAAI,CAACC,KAAN,EAAa0B,IAAI,CAACO,UAAlB,CAAL,GAAqCP,IAAI,CAACO,UAA3C,GAAyDP,IAAI,CAACW,aADvC;AAEvB,KAFuB,CAAzB;;AAIA,QAAMD,YAAY,GAAG1D,KAAK,CAACqB,IAAI,CAACE,MAAN,EAAcyB,IAAI,CAACQ,WAAnB,CAAL,GAAuCR,IAAI,CAACQ,WAAjE;AACAzC,EAAAA,CAAC,CAACkB,OAAF,CAAU,EAAEf,OAAF,EAAWiC,MAAX,EAAV,EAA+B,EAAEjB,WAAF,EAAewB,YAAf,EAA/B,EAA8DrC,IAA9D,EAAoE;AAClEc,IAAAA,QAAQ,EAAE,CADwD;AAElEnB,IAAAA,MAFkE;AAGlEe,IAAAA,OAHkE,EAApE;;AAKD,CA9CH;;AAgDA1B,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,IADH,CACS,oFADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqBT,eADrB;AAEGS,OAFH,CAEW,WAFX,EAEwB,CAAC,IAAD,EAAO,IAAP,CAFxB;AAGG4B,aAHH;AAIG5B,OAJH,CAIW,aAJX,EAI0B,CAAC,CAAD,EAAI,CAAJ,CAJ1B;AAKGA,OALH,CAKW,eALX,EAK4B,CAAC,CAAD,EAAI,CAAJ,CAL5B;AAMGA,OANH,CAMW,kBANX,EAM+B,CAAC,EAAD,EAAK,EAAL,CAN/B;AAOGA,OAPH,CAOW,UAPX,EAOuB,CAAC,CAAD,EAAI,CAAJ,CAPvB;AAQGA,OARH,CAQW,kBARX,EAQ+B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAR/B,CAHJ;;AAaGI,EAbH,CAaM,MAAMC,CAAN,IAAW;AACb,QAAM;AACJ6C,IAAAA,WADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,gBAHI;AAIJnB,IAAAA,QAJI;AAKJI,IAAAA,gBALI;AAMJ/B,IAAAA,MANI;AAOJH,IAAAA,SAPI;AAQFE,EAAAA,CAAC,CAACP,MARN;AASA,QAAMgB,MAAM,GAAG,YAAf;AACA,QAAMwB,IAAI,GAAGnD,kBAAkB,CAAC2B,MAAD,CAA/B;;AAEA,QAAM2B,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;AACA,QAAMY,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB;AACA,QAAMC,WAAW,GAAG,EAAE1C,KAAK,EAAE,MAAMqB,QAAf,EAAyBpB,MAAM,EAAE,MAAMoB,QAAvC,EAAiD/B,kBAAkB,EAAE,EAArE,EAApB;AACA,QAAMmB,OAAO,GAAG6B,WAAW,GAAGC,aAAd,IAA+BC,gBAA/C;;AAEAX,EAAAA,MAAM,CAACJ,gBAAD,CAAN,GAA2Ba,WAA3B;AACAG,EAAAA,QAAQ,CAAChB,gBAAD,CAAR,GAA6Bc,aAA7B;AACA,UAAQd,gBAAR;AACE,SAAK,CAAL,CAAQ;AACNiB,QAAAA,WAAW,CAAC1C,KAAZ,GAAoBwC,gBAAgB,IAAInB,QAAxC;AACA;AACD;AACD,SAAK,CAAL,CAAQ;AACNqB,QAAAA,WAAW,CAACzC,MAAZ,GAAqBuC,gBAAgB,IAAInB,QAAzC;AACA;AACD;AACD,SAAK,CAAL,CAAQ;AACNqB,QAAAA,WAAW,CAACpD,kBAAZ;AACEC,QAAAA,SAAS,KAAK,IAAd,GAAqBiD,gBAAgB,IAAInB,QAAzC,GAAoDmB,gBADtD;AAEA;AACD,OAbH;;;AAgBA,QAAM5C,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE2C,WAD+B;AAErCnD,IAAAA,SAFqC;AAGrC6B,IAAAA,aAAa,EAAE,CAHsB;AAIrClB,IAAAA,MAJqC;AAKrCC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QALb,EAAvB,CAAhB;;;AAQAjC,EAAAA,MAAM,CAACoE,QAAQ,CAAC,CAAD,CAAR,GAAcf,IAAI,CAACO,UAAnB,KAAkC,CAAnC,CAAN;AACA,QAAMrB,WAAW,GAAGlC,KAAK,CAAC+D,QAAQ,CAAC,CAAD,CAAR,GAAcf,IAAI,CAACO,UAApB,EAAgC,GAAhC,CAAzB;AACA5D,EAAAA,MAAM,CAACoE,QAAQ,CAAC,CAAD,CAAR,GAAcf,IAAI,CAACQ,WAAnB,KAAmC,CAApC,CAAN;AACA,QAAME,YAAY,GAAGK,QAAQ,CAAC,CAAD,CAAR,GAAcf,IAAI,CAACQ,WAAxC;AACAzC,EAAAA,CAAC,CAACkB,OAAF,CAAU,EAAEf,OAAF,EAAWiC,MAAX,EAAmBR,QAAnB,EAAV,EAAyC,EAAET,WAAF,EAAewB,YAAf,EAAzC,EAAwEK,QAAxE,EAAkF;AAChF5B,IAAAA,QAAQ,EAAE,CADsE;AAEhFnB,IAAAA,MAFgF;AAGhFe,IAAAA,OAHgF,EAAlF;;AAKD,CAlEH","sourcesContent":["export const description = `\n  texture related validation tests for B2T copy and T2B copy and writeTexture.\n\n  Note: see api,validation,encoding,cmds,copyTextureToTexture:* for validation tests of T2T copy.\n\n  TODO: expand the tests below to 1d texture.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport {\n  kSizedTextureFormats,\n  kTextureFormatInfo,\n  textureDimensionAndFormatCompatible,\n} from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { align } from '../../../util/math.js';\nimport { kImageCopyTypes } from '../../../util/texture/layout.js';\n\nimport {\n  ImageCopyTest,\n  texelBlockAlignmentTestExpanderForValueToCoordinate,\n  formatCopyableWithMethod,\n} from './image_copy.js';\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('valid')\n  .desc(`The texture must be valid and not destroyed.`)\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .combine('textureState', ['valid', 'destroyed', 'error'])\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '3d' },\n      ] as const)\n  )\n  .fn(async t => {\n    const { method, textureState, depthOrArrayLayers, dimension } = t.params;\n\n    // A valid texture.\n    let texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers },\n      dimension,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    switch (textureState) {\n      case 'destroyed': {\n        texture.destroy();\n        break;\n      }\n      case 'error': {\n        texture = t.getErrorTexture();\n        break;\n      }\n    }\n\n    const success = textureState === 'valid';\n    const submit = textureState === 'destroyed';\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success, submit }\n    );\n  });\n\ng.test('texture,device_mismatch')\n  .desc('Tests the image copies cannot be called with a texture created from another device')\n  .paramsSubcasesOnly(u =>\n    u.combine('method', kImageCopyTypes).combine('mismatched', [true, false])\n  )\n  .unimplemented();\n\ng.test('buffer,device_mismatch')\n  .desc('Tests the image copies cannot be called with a buffer created from another device')\n  .paramsSubcasesOnly(u =>\n    u.combine('method', ['CopyB2T', 'CopyT2B'] as const).combine('mismatched', [true, false])\n  )\n  .unimplemented();\n\ng.test('usage')\n  .desc(`The texture must have the appropriate COPY_SRC/COPY_DST usage.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '3d' },\n      ] as const)\n      .beginSubcases()\n      .combine('usage', [\n        GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.SAMPLED,\n        GPUConst.TextureUsage.COPY_DST | GPUConst.TextureUsage.SAMPLED,\n        GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.COPY_DST,\n      ])\n  )\n  .fn(async t => {\n    const { usage, method, depthOrArrayLayers, dimension } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers },\n      dimension,\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    const success =\n      method === 'CopyT2B'\n        ? (usage & GPUTextureUsage.COPY_SRC) !== 0\n        : (usage & GPUTextureUsage.COPY_DST) !== 0;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('sample_count')\n  .desc(\n    `Multisampled textures cannot be copied. Note that we don't test 2D array and 3D textures because multisample is not supported for 2D array and 3D texture creation`\n  )\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n  )\n  .fn(async t => {\n    const { sampleCount, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      sampleCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED,\n    });\n\n    const success = sampleCount === 1;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('mip_level')\n  .desc(`The mipLevel of the copy must be in range of the texture.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '3d' },\n      ] as const)\n      .beginSubcases()\n      .combine('mipLevelCount', [3, 5])\n      .combine('mipLevel', [3, 4])\n  )\n  .fn(async t => {\n    const { mipLevelCount, mipLevel, method, depthOrArrayLayers, dimension } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 32, height: 32, depthOrArrayLayers },\n      dimension,\n      mipLevelCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = mipLevel < mipLevelCount;\n\n    t.testRun(\n      { texture, mipLevel },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('origin_alignment')\n  .desc(`Copy origin must be aligned to block size.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('format', kSizedTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '3d' },\n      ] as const)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .beginSubcases()\n      .combine('coordinateToTest', ['x', 'y', 'z'] as const)\n      .expand('valueToCoordinate', texelBlockAlignmentTestExpanderForValueToCoordinate)\n  )\n  .fn(async t => {\n    const {\n      valueToCoordinate,\n      coordinateToTest,\n      format,\n      method,\n      depthOrArrayLayers,\n      dimension,\n    } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const origin = { x: 0, y: 0, z: 0 };\n    const size = { width: 0, height: 0, depthOrArrayLayers };\n    let success = true;\n\n    origin[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'x': {\n        success = origin.x % info.blockWidth === 0;\n        break;\n      }\n      case 'y': {\n        success = origin.y % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin, dimension);\n\n    t.testRun({ texture, origin }, { bytesPerRow: 0, rowsPerImage: 0 }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('1d')\n  .desc(`1d texture copies must have height=depth=1.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('width', [0, 1])\n      .combineWithParams([\n        { height: 1, depthOrArrayLayers: 1 },\n        { height: 1, depthOrArrayLayers: 0 },\n        { height: 1, depthOrArrayLayers: 2 },\n        { height: 0, depthOrArrayLayers: 1 },\n        { height: 2, depthOrArrayLayers: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { method, width, height, depthOrArrayLayers } = t.params;\n    const size = { width, height, depthOrArrayLayers };\n\n    const texture = t.device.createTexture({\n      size: { width: 2, height: 1, depthOrArrayLayers: 1 },\n      dimension: '1d',\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    // For 1d textures we require copyHeight and copyDepth to be 1,\n    // copyHeight or copyDepth being 0 should cause a validation error.\n    const success = size.height === 1 && size.depthOrArrayLayers === 1;\n\n    t.testRun({ texture }, { bytesPerRow: 256, rowsPerImage: 4 }, size, {\n      dataSize: 16,\n      method,\n      success,\n    });\n  });\n\ng.test('size_alignment')\n  .desc(`Copy size must be aligned to block size.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('format', kSizedTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combine('dimension', ['2d', '3d'] as const)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .beginSubcases()\n      .combine('coordinateToTest', ['width', 'height', 'depthOrArrayLayers'] as const)\n      .expand('valueToCoordinate', texelBlockAlignmentTestExpanderForValueToCoordinate)\n  )\n  .fn(async t => {\n    const { valueToCoordinate, coordinateToTest, format, method } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const origin = { x: 0, y: 0, z: 0 };\n    const size = { width: 0, height: 0, depthOrArrayLayers: 0 };\n    let success = true;\n\n    size[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'width': {\n        success = size.width % info.blockWidth === 0;\n        break;\n      }\n      case 'height': {\n        success = size.height % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin);\n\n    const bytesPerRow = align(\n      (align(size.width, info.blockWidth) / info.blockWidth) * info.bytesPerBlock,\n      256\n    );\n    const rowsPerImage = align(size.height, info.blockHeight) / info.blockHeight;\n    t.testRun({ texture, origin }, { bytesPerRow, rowsPerImage }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('copy_rectangle')\n  .desc(`The max corner of the copy rectangle (origin+copySize) must be inside the texture.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('dimension', ['2d', '3d'] as const)\n      .beginSubcases()\n      .combine('originValue', [7, 8])\n      .combine('copySizeValue', [7, 8])\n      .combine('textureSizeValue', [14, 15])\n      .combine('mipLevel', [0, 2])\n      .combine('coordinateToTest', [0, 1, 2] as const)\n  )\n  .fn(async t => {\n    const {\n      originValue,\n      copySizeValue,\n      textureSizeValue,\n      mipLevel,\n      coordinateToTest,\n      method,\n      dimension,\n    } = t.params;\n    const format = 'rgba8unorm';\n    const info = kTextureFormatInfo[format];\n\n    const origin = [0, 0, 0];\n    const copySize = [0, 0, 0];\n    const textureSize = { width: 16 << mipLevel, height: 16 << mipLevel, depthOrArrayLayers: 16 };\n    const success = originValue + copySizeValue <= textureSizeValue;\n\n    origin[coordinateToTest] = originValue;\n    copySize[coordinateToTest] = copySizeValue;\n    switch (coordinateToTest) {\n      case 0: {\n        textureSize.width = textureSizeValue << mipLevel;\n        break;\n      }\n      case 1: {\n        textureSize.height = textureSizeValue << mipLevel;\n        break;\n      }\n      case 2: {\n        textureSize.depthOrArrayLayers =\n          dimension === '3d' ? textureSizeValue << mipLevel : textureSizeValue;\n        break;\n      }\n    }\n\n    const texture = t.device.createTexture({\n      size: textureSize,\n      dimension,\n      mipLevelCount: 3,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    assert(copySize[0] % info.blockWidth === 0);\n    const bytesPerRow = align(copySize[0] / info.blockWidth, 256);\n    assert(copySize[1] % info.blockHeight === 0);\n    const rowsPerImage = copySize[1] / info.blockHeight;\n    t.testRun({ texture, origin, mipLevel }, { bytesPerRow, rowsPerImage }, copySize, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n"],"file":"texture_related.spec.js"}