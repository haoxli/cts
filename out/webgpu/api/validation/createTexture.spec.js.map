{"version":3,"sources":["../../../../src/webgpu/api/validation/createTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","kAllTextureFormats","kAllTextureFormatInfo","maxMipLevelCount","ValidationTest","F","getDescriptor","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","size","depth","dimension","usage","GPUTextureUsage","RENDER_ATTACHMENT","SAMPLED","g","test","desc","subcases","combine","unless","fn","t","zeroArgument","descriptor","selectDeviceOrSkipTestCase","extension","success","expectValidationError","device","createTexture","_success","texture","destroy","destroyBeforeEncode","destroyAfterEncode","textureView","createView","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","attachment","loadValue","r","b","a","endPass","commandBuffer","finish","queue","submit","info","renderable"],"mappings":"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","sourcesContent":["export const description = `\ncreateTexture validation tests.\n\nTODO: review existing tests and merge with this plan:\n> All x= every texture format\n>\n> - sampleCount = {0, 1, 4, 8, 16, 256} with format/dimension that supports multisample\n>     - x= every texture format\n> - sampleCount = {1, 4}\n>     - with format that supports multisample, with all possible dimensions\n>     - with dimension that support multisample, with all possible formats\n>     - with format-dimension that support multisample, with {mipLevelCount, array layer count} = {1, 2}\n> - 1d, {width, height, depth} > whatever the max is\n>     - height max is 1 (unless 1d-array is added)\n>     - depth max is 1\n>     - x= every texture format\n> - 2d, {width, height, depth} > whatever the max is\n>     - depth (array layers) max differs from width/height\n>     - x= every texture format\n> - 3d, {width, height, depth} > whatever the max is\n>     - x= every texture format\n> - usage flags\n>     - {0, ... each single usage flag}\n>     - x= every texture format\n> - every possible pair of usage flags\n>     - with one common texture format\n> - any other conditions from the spec\n> - ...?\n\nTODO: move destroy tests out of this file\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { kAllTextureFormats, kAllTextureFormatInfo } from '../../capability_info.js';\nimport { maxMipLevelCount } from '../../util/texture/base.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  getDescriptor(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n    } = {}\n  ): GPUTextureDescriptor {\n    const {\n      width = 32,\n      height = 32,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n    } = options;\n    return {\n      size: { width, height, depth: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    };\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('zero_size')\n  .desc(\n    `Test texture creation with zero or nonzero size of\n    width, height, depthOrArrayLayers and mipLevelCount for every dimension, and representative formats.\n    TODO: add tests for depth/stencil format if depth/stencil format can support mipmaps.`\n  )\n  // .cases(poptions('dimension', ['1d', '2d', '3d'] as const))\n  .subcases(() =>\n    params()\n      .combine(poptions('dimension', ['1d', '2d', '3d'] as const))\n      .combine(\n        poptions('zeroArgument', [\n          'none',\n          'width',\n          'height',\n          'depthOrArrayLayers',\n          'mipLevelCount',\n        ] as const)\n      )\n      .combine(poptions('format', ['rgba8unorm', 'rgb10a2unorm', 'bc1-rgba-unorm'] as const))\n      .unless(({ format, dimension }) => format === 'bc1-rgba-unorm' && dimension !== '2d')\n  )\n  .fn(async t => {\n    const { dimension, zeroArgument, format } = t.params;\n\n    const size = dimension === '1d' ? [32, 1, 1] : dimension === '2d' ? [32, 32, 1] : [32, 32, 32];\n    let mipLevelCount = 1;\n\n    switch (zeroArgument) {\n      case 'width':\n        size[0] = 0;\n        break;\n      case 'height':\n        size[1] = 0;\n        break;\n      case 'depthOrArrayLayers':\n        size[2] = 0;\n        break;\n      case 'mipLevelCount':\n        mipLevelCount = 0;\n        break;\n      default:\n        break;\n    }\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const success = zeroArgument === 'none';\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,format')\n  .desc(\n    `Test texture creation with no mipmap chain, partial mipmap chain, full mipmap chain, out-of-bounds mipmap chain\n    for every format with different texture dimension types.\n    TODO: test 1D and 3D dimensions. Note that it is invalid for some formats with 1D/3D and/or mipmapping.`\n  )\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kAllTextureFormats))\n      .combine(poptions('mipLevelCount', [1, 3, 6, 7]))\n  )\n  .fn(async t => {\n    const { format, mipLevelCount } = t.params;\n    const size = [32, 32, 1];\n    const descriptor = {\n      size,\n      mipLevelCount,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const success = mipLevelCount <= 6;\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,bound_check')\n  .desc(\n    `Test mip level count bound check upon different texture size and different texture dimension types.\n    The cases below test: 1) there must be no mip levels after a 1 level (1D texture), or 1x1 level (2D texture), or 1x1x1 level (3D texture), 2) array layers are not mip-mapped, 3) power-of-two, non-power-of-two, and non-square sizes.\n    TODO: test compressed texture`\n  )\n  .subcases(() => [\n    { size: [32, 32] }, // Mip level sizes: 32x32, 16x16, 8x8, 4x4, 2x2, 1x1\n    { size: [31, 32] }, // Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1\n    { size: [32, 31] }, // Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1\n    { size: [31, 31] }, // Mip level sizes: 31x31, 15x15, 7x7, 3x3, 1x1\n    { size: [32], dimension: '1d' as const }, // Mip level sizes: 32, 16, 8, 4, 2, 1\n    { size: [31], dimension: '1d' as const }, // Mip level sizes: 31, 15, 7, 3, 1\n    { size: [32, 32, 32], dimension: '3d' as const }, // Mip level sizes: 32x32x32, 16x16x16, 8x8x8, 4x4x4, 2x2x2, 1x1x1\n    { size: [32, 31, 31], dimension: '3d' as const }, // Mip level sizes: 32x31x31, 16x15x15, 8x7x7, 4x3x3, 2x1x1, 1x1x1\n    { size: [31, 32, 31], dimension: '3d' as const }, // Mip level sizes: 31x32x31, 15x16x15, 7x8x7, 3x4x3, 1x2x1, 1x1x1\n    { size: [31, 31, 32], dimension: '3d' as const }, // Mip level sizes: 31x31x32, 15x15x16, 7x7x8, 3x3x4, 1x1x2, 1x1x1\n    { size: [31, 31, 31], dimension: '3d' as const }, // Mip level sizes: 31x31x31, 15x15x15, 7x7x7, 3x3x3, 1x1x1\n    { size: [32, 8] }, // Mip levels: 32x8, 16x4, 8x2, 4x1, 2x1, 1x1\n    { size: [32, 32, 64] }, // Mip levels: 32x32x64, 16x16x64, 8x8x64, 4x4x64, 2x2x64, 1x1x64\n    { size: [32, 32, 64], dimension: '3d' as const }, // Mip levels: 32x32x64, 16x16x32, 8x8x16, 4x4x8, 2x2x4, 1x1x2, 1x1x1\n  ])\n  .fn(async t => {\n    const { size, dimension } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const mipLevelCount = maxMipLevelCount(descriptor);\n    descriptor.mipLevelCount = mipLevelCount;\n    t.device.createTexture(descriptor);\n\n    descriptor.mipLevelCount = mipLevelCount + 1;\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('mipLevelCount,bound_check,bigger_than_integer_bit_width')\n  .desc(`Test mip level count bound check when mipLevelCount is bigger than integer bit width`)\n  .fn(async t => {\n    const descriptor = {\n      size: [32, 32],\n      mipLevelCount: 100,\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('sampleCount')\n  .params([\n    { sampleCount: 0, _success: false },\n    { sampleCount: 1, _success: true },\n    { sampleCount: 2, _success: false },\n    { sampleCount: 3, _success: false },\n    { sampleCount: 4, _success: true },\n    { sampleCount: 8, _success: false },\n    { sampleCount: 16, _success: false },\n    { sampleCount: 4, mipLevelCount: 2, _success: false },\n    { sampleCount: 4, arrayLayerCount: 2, _success: false },\n  ])\n  .fn(async t => {\n    const { sampleCount, mipLevelCount, arrayLayerCount, _success } = t.params;\n\n    const descriptor = t.getDescriptor({ sampleCount, mipLevelCount, arrayLayerCount });\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !_success);\n  });\n\ng.test('it_is_valid_to_destroy_a_texture').fn(t => {\n  const descriptor = t.getDescriptor();\n  const texture = t.device.createTexture(descriptor);\n  texture.destroy();\n});\n\ng.test('it_is_valid_to_destroy_a_destroyed_texture').fn(t => {\n  const descriptor = t.getDescriptor();\n  const texture = t.device.createTexture(descriptor);\n  texture.destroy();\n  texture.destroy();\n});\n\ng.test('it_is_invalid_to_submit_a_destroyed_texture_before_and_after_encode')\n  .params([\n    { destroyBeforeEncode: false, destroyAfterEncode: false, _success: true },\n    { destroyBeforeEncode: true, destroyAfterEncode: false, _success: false },\n    { destroyBeforeEncode: false, destroyAfterEncode: true, _success: false },\n  ])\n  .fn(async t => {\n    const { destroyBeforeEncode, destroyAfterEncode, _success } = t.params;\n\n    const descriptor = t.getDescriptor();\n    const texture = t.device.createTexture(descriptor);\n    const textureView = texture.createView();\n\n    if (destroyBeforeEncode) {\n      texture.destroy();\n    }\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: textureView,\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n    renderPass.endPass();\n    const commandBuffer = commandEncoder.finish();\n\n    if (destroyAfterEncode) {\n      texture.destroy();\n    }\n\n    t.expectValidationError(() => {\n      t.queue.submit([commandBuffer]);\n    }, !_success);\n  });\n\ng.test('it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format')\n  .params(poptions('format', kAllTextureFormats))\n  .fn(async t => {\n    const format: GPUTextureFormat = t.params.format;\n    const info = kAllTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({ width: 1, height: 1, format });\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !info.renderable);\n  });\n\n// TODO: Add tests for compressed texture formats\n"],"file":"createTexture.spec.js"}