{"version":3,"sources":["../../../../src/webgpu/api/validation/createTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","assert","kAllTextureFormats","kAllTextureFormatInfo","kCompressedTextureFormats","kCompressedTextureFormatInfo","kTextureUsages","kUncompressedTextureFormats","kUncompressedTextureFormatInfo","DefaultLimits","GPUConst","maxMipLevelCount","ValidationTest","F","getDescriptor","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","size","depthOrArrayLayers","dimension","usage","GPUTextureUsage","RENDER_ATTACHMENT","SAMPLED","g","test","desc","subcases","combine","unless","fn","t","zeroArgument","descriptor","selectDeviceOrSkipTestCase","extension","success","expectValidationError","device","createTexture","blockWidth","blockHeight","multisample","info","TextureUsage","renderable","STORAGE","storage","maxTextureDimension1D","undefined","maxTextureDimension2D","maxTextureArrayLayers","expand","p","maxTextureDimension3D","skip","texture","destroy","destroyBeforeEncode","destroyAfterEncode","_success","textureView","createView","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","attachment","loadValue","r","b","a","endPass","commandBuffer","finish","queue","submit"],"mappings":"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","sourcesContent":["export const description = `\ncreateTexture validation tests.\n\nTODO: review existing tests and merge with this plan:\n> All x= every texture format\n>\n> - usage flags\n>     - {0, ... each single usage flag}\n>     - x= every texture format\n> - every possible pair of usage flags\n>     - with one common texture format\n> - any other conditions from the spec\n> - ...?\n\nTODO: move destroy tests out of this file\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/framework/util/util.js';\nimport {\n  kAllTextureFormats,\n  kAllTextureFormatInfo,\n  kCompressedTextureFormats,\n  kCompressedTextureFormatInfo,\n  kTextureUsages,\n  kUncompressedTextureFormats,\n  kUncompressedTextureFormatInfo,\n} from '../../capability_info.js';\nimport { DefaultLimits, GPUConst } from '../../constants.js';\nimport { maxMipLevelCount } from '../../util/texture/base.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  getDescriptor(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n    } = {}\n  ): GPUTextureDescriptor {\n    const {\n      width = 32,\n      height = 32,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n    } = options;\n    return {\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    };\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('zero_size')\n  .desc(\n    `Test texture creation with zero or nonzero size of\n    width, height, depthOrArrayLayers and mipLevelCount for every dimension, and representative formats.\n    TODO: add tests for depth/stencil format if depth/stencil format can support mipmaps.`\n  )\n  // .cases(poptions('dimension', ['1d', '2d', '3d'] as const))\n  .subcases(() =>\n    params()\n      .combine(poptions('dimension', ['1d', '2d', '3d'] as const))\n      .combine(\n        poptions('zeroArgument', [\n          'none',\n          'width',\n          'height',\n          'depthOrArrayLayers',\n          'mipLevelCount',\n        ] as const)\n      )\n      .combine(poptions('format', ['rgba8unorm', 'rgb10a2unorm', 'bc1-rgba-unorm'] as const))\n      .unless(({ format, dimension }) => format === 'bc1-rgba-unorm' && dimension !== '2d')\n  )\n  .fn(async t => {\n    const { dimension, zeroArgument, format } = t.params;\n\n    const size = dimension === '1d' ? [32, 1, 1] : dimension === '2d' ? [32, 32, 1] : [32, 32, 32];\n    let mipLevelCount = 1;\n\n    switch (zeroArgument) {\n      case 'width':\n        size[0] = 0;\n        break;\n      case 'height':\n        size[1] = 0;\n        break;\n      case 'depthOrArrayLayers':\n        size[2] = 0;\n        break;\n      case 'mipLevelCount':\n        mipLevelCount = 0;\n        break;\n      default:\n        break;\n    }\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const success = zeroArgument === 'none';\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,format')\n  .desc(\n    `Test texture creation with no mipmap chain, partial mipmap chain, full mipmap chain, out-of-bounds mipmap chain\n    for every format with different texture dimension types.\n    TODO: test 1D and 3D dimensions. Note that it is invalid for some formats with 1D/3D and/or mipmapping.`\n  )\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kAllTextureFormats))\n      .combine(poptions('mipLevelCount', [1, 3, 6, 7]))\n  )\n  .fn(async t => {\n    const { format, mipLevelCount } = t.params;\n    const size = [32, 32, 1];\n    const descriptor = {\n      size,\n      mipLevelCount,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const success = mipLevelCount <= 6;\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,bound_check')\n  .desc(\n    `Test mip level count bound check upon different texture size and different texture dimension types.\n    The cases below test: 1) there must be no mip levels after a 1 level (1D texture), or 1x1 level (2D texture), or 1x1x1 level (3D texture), 2) array layers are not mip-mapped, 3) power-of-two, non-power-of-two, and non-square sizes.`\n  )\n  .subcases(() =>\n    params()\n      .combine(poptions('format', ['rgba8unorm', 'bc1-rgba-unorm'] as const))\n      .combine([\n        { size: [32, 32] }, // Mip level sizes: 32x32, 16x16, 8x8, 4x4, 2x2, 1x1\n        { size: [31, 32] }, // Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1\n        { size: [28, 32] }, // Mip level sizes: 28x32, 14x16, 7x8, 3x4, 1x2, 1x1\n        { size: [32, 31] }, // Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1\n        { size: [32, 28] }, // Mip level sizes: 32x28, 16x14, 8x7, 4x3, 2x1, 1x1\n        { size: [31, 31] }, // Mip level sizes: 31x31, 15x15, 7x7, 3x3, 1x1\n        { size: [32], dimension: '1d' as const }, // Mip level sizes: 32, 16, 8, 4, 2, 1\n        { size: [31], dimension: '1d' as const }, // Mip level sizes: 31, 15, 7, 3, 1\n        { size: [32, 32, 32], dimension: '3d' as const }, // Mip level sizes: 32x32x32, 16x16x16, 8x8x8, 4x4x4, 2x2x2, 1x1x1\n        { size: [32, 31, 31], dimension: '3d' as const }, // Mip level sizes: 32x31x31, 16x15x15, 8x7x7, 4x3x3, 2x1x1, 1x1x1\n        { size: [31, 32, 31], dimension: '3d' as const }, // Mip level sizes: 31x32x31, 15x16x15, 7x8x7, 3x4x3, 1x2x1, 1x1x1\n        { size: [31, 31, 32], dimension: '3d' as const }, // Mip level sizes: 31x31x32, 15x15x16, 7x7x8, 3x3x4, 1x1x2, 1x1x1\n        { size: [31, 31, 31], dimension: '3d' as const }, // Mip level sizes: 31x31x31, 15x15x15, 7x7x7, 3x3x3, 1x1x1\n        { size: [32, 8] }, // Mip levels: 32x8, 16x4, 8x2, 4x1, 2x1, 1x1\n        { size: [32, 32, 64] }, // Mip levels: 32x32x64, 16x16x64, 8x8x64, 4x4x64, 2x2x64, 1x1x64\n        { size: [32, 32, 64], dimension: '3d' as const }, // Mip levels: 32x32x64, 16x16x32, 8x8x16, 4x4x8, 2x2x4, 1x1x2, 1x1x1\n      ])\n      .unless(\n        ({ format, size, dimension }) =>\n          format === 'bc1-rgba-unorm' &&\n          (dimension === '1d' ||\n            dimension === '3d' ||\n            size[0] % kAllTextureFormatInfo[format].blockWidth !== 0 ||\n            size[1] % kAllTextureFormatInfo[format].blockHeight !== 0)\n      )\n  )\n  .fn(async t => {\n    const { format, size, dimension } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const mipLevelCount = maxMipLevelCount(descriptor);\n    descriptor.mipLevelCount = mipLevelCount;\n    t.device.createTexture(descriptor);\n\n    descriptor.mipLevelCount = mipLevelCount + 1;\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('mipLevelCount,bound_check,bigger_than_integer_bit_width')\n  .desc(`Test mip level count bound check when mipLevelCount is bigger than integer bit width`)\n  .fn(async t => {\n    const descriptor = {\n      size: [32, 32],\n      mipLevelCount: 100,\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('sampleCount,various_sampleCount_with_all_formats')\n  .desc(`Test texture creation with various (valid or invalid) sample count and all formats`)\n  .subcases(() =>\n    params()\n      .combine(poptions('sampleCount', [0, 1, 2, 4, 8, 16, 32, 256]))\n      .combine(poptions('format', kAllTextureFormats))\n  )\n  .fn(async t => {\n    const { sampleCount, format } = t.params;\n    const descriptor = {\n      size: [32, 32, 1],\n      sampleCount,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const success =\n      sampleCount === 1 || (sampleCount === 4 && kAllTextureFormatInfo[format].multisample);\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('sampleCount,valid_sampleCount_with_other_parameter_varies')\n  .desc(\n    `Test texture creation with valid sample count when dimensions, arrayLayerCount, mipLevelCount, format, and usage varies.\n     Texture can be single sample (sampleCount is 1) or multi-sample (sampleCount is 4).\n     Multisample texture requires that 1) its dimension is 2d, 2) its format is a uncompressed format, 3) its mipLevelCount and arrayLayerCount are 1, 4) its usage doesn't include STORAGE.`\n  )\n  .subcases(() =>\n    params()\n      .combine(poptions('sampleCount', [1, 4]))\n      .combine(poptions('dimension', ['1d', '2d', '3d'] as const))\n      .combine(poptions('arrayLayerCount', [1, 2]))\n      .unless(({ arrayLayerCount, dimension }) => arrayLayerCount === 2 && dimension !== '2d')\n      .combine(poptions('mipLevelCount', [1, 2]))\n      .combine(poptions('format', kAllTextureFormats))\n      .combine(poptions('usage', kTextureUsages))\n      .unless(({ usage, format }) => {\n        const info = kAllTextureFormatInfo[format];\n        return (\n          ((usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 && !info.renderable) ||\n          ((usage & GPUConst.TextureUsage.STORAGE) !== 0 && !info.storage)\n        );\n      })\n  )\n  .fn(async t => {\n    const { sampleCount, dimension, format, mipLevelCount, arrayLayerCount, usage } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const size =\n      dimension === '1d'\n        ? [32, 1, 1]\n        : dimension === '2d'\n        ? [32, 32, arrayLayerCount]\n        : [32, 32, 32];\n    const descriptor = {\n      size,\n      mipLevelCount,\n      sampleCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const success =\n      sampleCount === 1 ||\n      (sampleCount === 4 &&\n        dimension === '2d' &&\n        kAllTextureFormatInfo[format].multisample &&\n        mipLevelCount === 1 &&\n        arrayLayerCount === 1 &&\n        (usage & GPUConst.TextureUsage.STORAGE) === 0);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,1d_texture')\n  .desc(`Test texture size requirement for 1D texture`)\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kAllTextureFormats))\n      .combine(\n        poptions('width', [\n          DefaultLimits.maxTextureDimension1D - 1,\n          DefaultLimits.maxTextureDimension1D,\n          DefaultLimits.maxTextureDimension1D + 1,\n        ])\n      )\n      .combine(poptions('height', [1, 2]))\n      .combine(poptions('depthOrArrayLayers', [1, 2]))\n  )\n  .fn(async t => {\n    const { format, width, height, depthOrArrayLayers } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [width, height, depthOrArrayLayers],\n      dimension: '1d' as const,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      width <= DefaultLimits.maxTextureDimension1D && height === 1 && depthOrArrayLayers === 1;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,uncompressed_format')\n  .desc(`Test texture size requirement for 2D texture with uncompressed format.`)\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kUncompressedTextureFormats))\n      .combine(poptions('dimension', [undefined, '2d'] as const))\n      .combine(\n        poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension2D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension2D, 1, 1],\n          [DefaultLimits.maxTextureDimension2D + 1, 1, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension2D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension2D, 1],\n          [1, DefaultLimits.maxTextureDimension2D + 1, 1],\n          // Test the bound of array layers\n          [1, 1, DefaultLimits.maxTextureArrayLayers - 1],\n          [1, 1, DefaultLimits.maxTextureArrayLayers],\n          [1, 1, DefaultLimits.maxTextureArrayLayers + 1],\n        ])\n      )\n  )\n  .fn(async t => {\n    const { format, dimension, size } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kUncompressedTextureFormatInfo[format].extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] <= DefaultLimits.maxTextureDimension2D &&\n      size[1] <= DefaultLimits.maxTextureDimension2D &&\n      size[2] <= DefaultLimits.maxTextureArrayLayers;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,compressed_format')\n  .desc(`Test texture size requirement for 2D texture with compressed format.`)\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kCompressedTextureFormats))\n      .combine(poptions('dimension', [undefined, '2d'] as const))\n      .expand(p => {\n        const { blockWidth, blockHeight } = kAllTextureFormatInfo[p.format];\n        return poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension2D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension2D - blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension2D - blockWidth, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension2D, 1, 1],\n          [DefaultLimits.maxTextureDimension2D, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension2D + 1, 1, 1],\n          [DefaultLimits.maxTextureDimension2D + blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension2D + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension2D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension2D - blockHeight, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension2D - blockHeight, 1],\n          [1, DefaultLimits.maxTextureDimension2D, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension2D, 1],\n          [1, DefaultLimits.maxTextureDimension2D + 1, 1],\n          [1, DefaultLimits.maxTextureDimension2D + blockWidth, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension2D + blockHeight, 1],\n          // Test the bound of array layers\n          [1, 1, DefaultLimits.maxTextureArrayLayers - 1],\n          [blockWidth, 1, DefaultLimits.maxTextureArrayLayers - 1],\n          [1, blockHeight, DefaultLimits.maxTextureArrayLayers - 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureArrayLayers - 1],\n          [1, 1, DefaultLimits.maxTextureArrayLayers],\n          [blockWidth, 1, DefaultLimits.maxTextureArrayLayers],\n          [1, blockHeight, DefaultLimits.maxTextureArrayLayers],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureArrayLayers],\n          [1, 1, DefaultLimits.maxTextureArrayLayers + 1],\n          [blockWidth, 1, DefaultLimits.maxTextureArrayLayers + 1],\n          [1, blockHeight, DefaultLimits.maxTextureArrayLayers + 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureArrayLayers + 1],\n        ]);\n      })\n  )\n  .fn(async t => {\n    const { format, dimension, size } = t.params;\n\n    const info = kCompressedTextureFormatInfo[format];\n    assert(\n      DefaultLimits.maxTextureDimension2D % info.blockWidth === 0 &&\n        DefaultLimits.maxTextureDimension2D % info.blockHeight === 0\n    );\n\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= DefaultLimits.maxTextureDimension2D &&\n      size[1] <= DefaultLimits.maxTextureDimension2D &&\n      size[2] <= DefaultLimits.maxTextureArrayLayers;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,uncompressed_format')\n  .desc(`Test texture size requirement for 3D texture with uncompressed format.`)\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kUncompressedTextureFormats))\n      .combine(\n        poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension3D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension3D, 1, 1],\n          [DefaultLimits.maxTextureDimension3D + 1, 1, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension3D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension3D, 1],\n          [1, DefaultLimits.maxTextureDimension3D + 1, 1],\n          // Test the bound of depth\n          [1, 1, DefaultLimits.maxTextureDimension3D - 1],\n          [1, 1, DefaultLimits.maxTextureDimension3D],\n          [1, 1, DefaultLimits.maxTextureDimension3D + 1],\n        ])\n      )\n  )\n  .fn(async t => {\n    const { format, size } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kUncompressedTextureFormatInfo[format].extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] <= DefaultLimits.maxTextureDimension3D &&\n      size[1] <= DefaultLimits.maxTextureDimension3D &&\n      size[2] <= DefaultLimits.maxTextureDimension3D;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,compressed_format')\n  .desc(`Test texture size requirement for 3D texture with compressed format.`)\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kCompressedTextureFormats))\n      .expand(p => {\n        const { blockWidth, blockHeight } = kAllTextureFormatInfo[p.format];\n        return poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension3D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension3D - blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension3D - blockWidth, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension3D, 1, 1],\n          [DefaultLimits.maxTextureDimension3D, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension3D + 1, 1, 1],\n          [DefaultLimits.maxTextureDimension3D + blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension3D + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension3D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension3D - blockHeight, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension3D - blockHeight, 1],\n          [1, DefaultLimits.maxTextureDimension3D, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension3D, 1],\n          [1, DefaultLimits.maxTextureDimension3D + 1, 1],\n          [1, DefaultLimits.maxTextureDimension3D + blockWidth, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension3D + blockHeight, 1],\n          // Test the bound of depth\n          [1, 1, DefaultLimits.maxTextureDimension3D - 1],\n          [blockWidth, 1, DefaultLimits.maxTextureDimension3D - 1],\n          [1, blockHeight, DefaultLimits.maxTextureDimension3D - 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureDimension3D - 1],\n          [1, 1, DefaultLimits.maxTextureDimension3D],\n          [blockWidth, 1, DefaultLimits.maxTextureDimension3D],\n          [1, blockHeight, DefaultLimits.maxTextureDimension3D],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureDimension3D],\n          [1, 1, DefaultLimits.maxTextureDimension3D + 1],\n          [blockWidth, 1, DefaultLimits.maxTextureDimension3D + 1],\n          [1, blockHeight, DefaultLimits.maxTextureDimension3D + 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureDimension3D + 1],\n        ]);\n      })\n  )\n  .fn(async t => {\n    const { format, size } = t.params;\n\n    t.skip('Compressed 3D texture is not supported');\n\n    const info = kCompressedTextureFormatInfo[format];\n    assert(\n      DefaultLimits.maxTextureDimension3D % info.blockWidth === 0 &&\n        DefaultLimits.maxTextureDimension3D % info.blockHeight === 0\n    );\n\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= DefaultLimits.maxTextureDimension3D &&\n      size[1] <= DefaultLimits.maxTextureDimension3D &&\n      size[2] <= DefaultLimits.maxTextureDimension3D;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('it_is_valid_to_destroy_a_texture').fn(t => {\n  const descriptor = t.getDescriptor();\n  const texture = t.device.createTexture(descriptor);\n  texture.destroy();\n});\n\ng.test('it_is_valid_to_destroy_a_destroyed_texture').fn(t => {\n  const descriptor = t.getDescriptor();\n  const texture = t.device.createTexture(descriptor);\n  texture.destroy();\n  texture.destroy();\n});\n\ng.test('it_is_invalid_to_submit_a_destroyed_texture_before_and_after_encode')\n  .params([\n    { destroyBeforeEncode: false, destroyAfterEncode: false, _success: true },\n    { destroyBeforeEncode: true, destroyAfterEncode: false, _success: false },\n    { destroyBeforeEncode: false, destroyAfterEncode: true, _success: false },\n  ])\n  .fn(async t => {\n    const { destroyBeforeEncode, destroyAfterEncode, _success } = t.params;\n\n    const descriptor = t.getDescriptor();\n    const texture = t.device.createTexture(descriptor);\n    const textureView = texture.createView();\n\n    if (destroyBeforeEncode) {\n      texture.destroy();\n    }\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: textureView,\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n    renderPass.endPass();\n    const commandBuffer = commandEncoder.finish();\n\n    if (destroyAfterEncode) {\n      texture.destroy();\n    }\n\n    t.expectValidationError(() => {\n      t.queue.submit([commandBuffer]);\n    }, !_success);\n  });\n\ng.test('it_is_invalid_to_have_an_output_attachment_texture_with_non_renderable_format')\n  .params(poptions('format', kAllTextureFormats))\n  .fn(async t => {\n    const format: GPUTextureFormat = t.params.format;\n    const info = kAllTextureFormatInfo[format];\n\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const descriptor = t.getDescriptor({ width: 1, height: 1, format });\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !info.renderable);\n  });\n"],"file":"createTexture.spec.js"}