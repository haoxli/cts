{"version":3,"sources":["../../../../../src/webgpu/api/operation/command_buffer/copyTextureToTexture.spec.ts"],"names":["description","makeTestGroup","assert","memcpy","kTextureFormatInfo","kRegularTextureFormats","kCompressedTextureFormats","depthStencilFormatAspectSize","kBufferSizeAlignment","kDepthStencilFormats","GPUTest","align","physicalMipSize","kBytesPerRowAlignment","dataBytesForCopyOrFail","F","GetInitialData","byteSize","initialData","Uint8Array","i","length","GetInitialDataPerMipLevel","textureSize","format","mipLevel","textureSizeAtLevel","bytesPerBlock","blockWidthInTexel","blockWidth","blockHeightInTexel","blockHeight","blocksPerSubresource","width","height","depthOrArrayLayers","GetInitialStencilDataPerMipLevel","aspectBytesPerBlock","DoCopyTextureToTextureTest","srcTextureSize","dstTextureSize","copyBoxOffsets","srcCopyLevel","dstCopyLevel","kMipLevelCount","srcTextureDesc","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","mipLevelCount","srcTexture","device","createTexture","dstTextureDesc","dstTexture","initialSrcData","srcTextureSizeAtLevel","srcBlocksPerRow","srcBlockRowsPerImage","queue","writeTexture","texture","bytesPerRow","rowsPerImage","dstTextureSizeAtLevel","minWidth","Math","min","minHeight","appliedSrcOffset","x","srcOffset","y","z","appliedDstOffset","dstOffset","appliedCopyWidth","max","copyExtent","appliedCopyHeight","appliedCopyDepth","encoder","createCommandEncoder","copyTextureToTexture","origin","dstBlocksPerRow","dstBlockRowsPerImage","bytesPerDstAlignedBlockRow","dstBufferSize","dstBufferDesc","GPUBufferUsage","dstBuffer","createBuffer","copyTextureToBuffer","buffer","submit","finish","expectedDataWithPadding","ArrayBuffer","expectedUint8DataWithPadding","expectedUint8Data","appliedCopyBlocksPerRow","appliedCopyBlockRowsPerImage","srcCopyOffsetInBlocks","dstCopyOffsetInBlocks","srcOffsetZ","dstOffsetZ","dstOffsetYInBlocks","expectedDataWithPaddingOffset","srcOffsetYInBlocks","expectedDataOffset","bytesInRow","src","start","dst","expectGPUBufferValuesEqual","InitializeStencilAspect","sourceTexture","initialStencilData","srcCopyBaseArrayLayer","copySize","aspect","VerifyStencilAspect","destinationTexture","dstCopyBaseArrayLayer","outputBufferSize","layout","method","outputBuffer","expectedStencilData","initialOffsetPerLayer","expectedOffsetPerLayer","initialOffsetPerRow","expectedOffsetPerRow","kCopyBoxOffsetsForWholeDepth","kCopyBoxOffsetsFor2DArrayTextures","g","test","desc","params","u","combine","beginSubcases","fn","t","selectDeviceOrSkipTestCase","feature","paramsSubcasesOnly","copyBoxOffset","filter","stencil","selectDeviceForTextureFormatOrSkipTestCase","RENDER_ATTACHMENT"],"mappings":"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","sourcesContent":["export const description = `copyTexturetoTexture operation tests\n\nTODO: rename \"copy_stencil_aspect\" to \"copy_depth_stencil\" and test the depth aspect.\nTODO: remove fragment stage in InitializeDepthAspect() when browsers support null fragment stage.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, memcpy } from '../../../../common/util/util.js';\nimport {\n  kTextureFormatInfo,\n  kRegularTextureFormats,\n  SizedTextureFormat,\n  kCompressedTextureFormats,\n  depthStencilFormatAspectSize,\n  DepthStencilFormat,\n  kBufferSizeAlignment,\n  kDepthStencilFormats,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { align } from '../../../util/math.js';\nimport { physicalMipSize } from '../../../util/texture/base.js';\nimport { kBytesPerRowAlignment, dataBytesForCopyOrFail } from '../../../util/texture/layout.js';\n\nclass F extends GPUTest {\n  GetInitialData(byteSize: number): Uint8Array {\n    const initialData = new Uint8Array(byteSize);\n    for (let i = 0; i < initialData.length; ++i) {\n      initialData[i] = (i ** 3 + i) % 251;\n    }\n    return initialData;\n  }\n\n  GetInitialDataPerMipLevel(\n    textureSize: Required<GPUExtent3DDict>,\n    format: SizedTextureFormat,\n    mipLevel: number\n  ): Uint8Array {\n    // TODO(jiawei.shao@intel.com): support 3D textures\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const bytesPerBlock = kTextureFormatInfo[format].bytesPerBlock;\n    const blockWidthInTexel = kTextureFormatInfo[format].blockWidth;\n    const blockHeightInTexel = kTextureFormatInfo[format].blockHeight;\n    const blocksPerSubresource =\n      (textureSizeAtLevel.width / blockWidthInTexel) *\n      (textureSizeAtLevel.height / blockHeightInTexel);\n\n    const byteSize = bytesPerBlock * blocksPerSubresource * textureSizeAtLevel.depthOrArrayLayers;\n    return this.GetInitialData(byteSize);\n  }\n\n  GetInitialStencilDataPerMipLevel(\n    textureSize: Required<GPUExtent3DDict>,\n    format: DepthStencilFormat,\n    mipLevel: number\n  ): Uint8Array {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const aspectBytesPerBlock = depthStencilFormatAspectSize(format, 'stencil-only');\n    const byteSize =\n      aspectBytesPerBlock *\n      textureSizeAtLevel.width *\n      textureSizeAtLevel.height *\n      textureSizeAtLevel.depthOrArrayLayers;\n    return this.GetInitialData(byteSize);\n  }\n\n  DoCopyTextureToTextureTest(\n    srcTextureSize: Required<GPUExtent3DDict>,\n    dstTextureSize: Required<GPUExtent3DDict>,\n    format: SizedTextureFormat,\n    copyBoxOffsets: {\n      srcOffset: { x: number; y: number; z: number };\n      dstOffset: { x: number; y: number; z: number };\n      copyExtent: Required<GPUExtent3DDict>;\n    },\n    srcCopyLevel: number,\n    dstCopyLevel: number\n  ): void {\n    const kMipLevelCount = 4;\n\n    // Create srcTexture and dstTexture\n    const srcTextureDesc: GPUTextureDescriptor = {\n      size: srcTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount: kMipLevelCount,\n    };\n    const srcTexture = this.device.createTexture(srcTextureDesc);\n    const dstTextureDesc: GPUTextureDescriptor = {\n      size: dstTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount: kMipLevelCount,\n    };\n    const dstTexture = this.device.createTexture(dstTextureDesc);\n\n    // Fill the whole subresource of srcTexture at srcCopyLevel with initialSrcData.\n    const initialSrcData = this.GetInitialDataPerMipLevel(srcTextureSize, format, srcCopyLevel);\n    const srcTextureSizeAtLevel = physicalMipSize(srcTextureSize, format, '2d', srcCopyLevel);\n    const bytesPerBlock = kTextureFormatInfo[format].bytesPerBlock;\n    const blockWidth = kTextureFormatInfo[format].blockWidth;\n    const blockHeight = kTextureFormatInfo[format].blockHeight;\n    const srcBlocksPerRow = srcTextureSizeAtLevel.width / blockWidth;\n    const srcBlockRowsPerImage = srcTextureSizeAtLevel.height / blockHeight;\n    this.device.queue.writeTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      initialSrcData,\n      {\n        bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n        rowsPerImage: srcBlockRowsPerImage,\n      },\n      srcTextureSizeAtLevel\n    );\n\n    // Copy the region specified by copyBoxOffsets from srcTexture to dstTexture.\n    const dstTextureSizeAtLevel = physicalMipSize(dstTextureSize, format, '2d', dstCopyLevel);\n    const minWidth = Math.min(srcTextureSizeAtLevel.width, dstTextureSizeAtLevel.width);\n    const minHeight = Math.min(srcTextureSizeAtLevel.height, dstTextureSizeAtLevel.height);\n\n    const appliedSrcOffset = {\n      x: Math.min(copyBoxOffsets.srcOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.srcOffset.y * blockHeight, minHeight),\n      z: copyBoxOffsets.srcOffset.z,\n    };\n    const appliedDstOffset = {\n      x: Math.min(copyBoxOffsets.dstOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.dstOffset.y * blockHeight, minHeight),\n      z: copyBoxOffsets.dstOffset.z,\n    };\n\n    const appliedCopyWidth = Math.max(\n      minWidth +\n        copyBoxOffsets.copyExtent.width * blockWidth -\n        Math.max(appliedSrcOffset.x, appliedDstOffset.x),\n      0\n    );\n    const appliedCopyHeight = Math.max(\n      minHeight +\n        copyBoxOffsets.copyExtent.height * blockHeight -\n        Math.max(appliedSrcOffset.y, appliedDstOffset.y),\n      0\n    );\n    assert(appliedCopyWidth % blockWidth === 0 && appliedCopyHeight % blockHeight === 0);\n\n    const appliedCopyDepth =\n      srcTextureSize.depthOrArrayLayers +\n      copyBoxOffsets.copyExtent.depthOrArrayLayers -\n      Math.max(appliedSrcOffset.z, appliedDstOffset.z);\n    assert(appliedCopyDepth >= 0);\n\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel, origin: appliedSrcOffset },\n      { texture: dstTexture, mipLevel: dstCopyLevel, origin: appliedDstOffset },\n      { width: appliedCopyWidth, height: appliedCopyHeight, depthOrArrayLayers: appliedCopyDepth }\n    );\n\n    // Copy the whole content of dstTexture at dstCopyLevel to dstBuffer.\n    const dstBlocksPerRow = dstTextureSizeAtLevel.width / blockWidth;\n    const dstBlockRowsPerImage = dstTextureSizeAtLevel.height / blockHeight;\n    const bytesPerDstAlignedBlockRow = align(dstBlocksPerRow * bytesPerBlock, 256);\n    const dstBufferSize =\n      (dstBlockRowsPerImage * dstTextureSizeAtLevel.depthOrArrayLayers - 1) *\n        bytesPerDstAlignedBlockRow +\n      align(dstBlocksPerRow * bytesPerBlock, 4);\n    const dstBufferDesc: GPUBufferDescriptor = {\n      size: dstBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    };\n    const dstBuffer = this.device.createBuffer(dstBufferDesc);\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      {\n        buffer: dstBuffer,\n        bytesPerRow: bytesPerDstAlignedBlockRow,\n        rowsPerImage: dstBlockRowsPerImage,\n      },\n      dstTextureSizeAtLevel\n    );\n    this.device.queue.submit([encoder.finish()]);\n\n    // Fill expectedDataWithPadding with the expected data of dstTexture. The other values in\n    // expectedDataWithPadding are kept 0 to check if the texels untouched by the copy are 0\n    // (their previous values).\n    const expectedDataWithPadding = new ArrayBuffer(dstBufferSize);\n    const expectedUint8DataWithPadding = new Uint8Array(expectedDataWithPadding);\n    const expectedUint8Data = new Uint8Array(initialSrcData);\n\n    const appliedCopyBlocksPerRow = appliedCopyWidth / blockWidth;\n    const appliedCopyBlockRowsPerImage = appliedCopyHeight / blockHeight;\n    const srcCopyOffsetInBlocks = {\n      x: appliedSrcOffset.x / blockWidth,\n      y: appliedSrcOffset.y / blockHeight,\n      z: appliedSrcOffset.z,\n    };\n    const dstCopyOffsetInBlocks = {\n      x: appliedDstOffset.x / blockWidth,\n      y: appliedDstOffset.y / blockHeight,\n      z: appliedDstOffset.z,\n    };\n\n    for (let z = 0; z < appliedCopyDepth; ++z) {\n      const srcOffsetZ = srcCopyOffsetInBlocks.z + z;\n      const dstOffsetZ = dstCopyOffsetInBlocks.z + z;\n      for (let y = 0; y < appliedCopyBlockRowsPerImage; ++y) {\n        const dstOffsetYInBlocks = dstCopyOffsetInBlocks.y + y;\n        const expectedDataWithPaddingOffset =\n          bytesPerDstAlignedBlockRow * (dstBlockRowsPerImage * dstOffsetZ + dstOffsetYInBlocks) +\n          dstCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const srcOffsetYInBlocks = srcCopyOffsetInBlocks.y + y;\n        const expectedDataOffset =\n          bytesPerBlock *\n            srcBlocksPerRow *\n            (srcBlockRowsPerImage * srcOffsetZ + srcOffsetYInBlocks) +\n          srcCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const bytesInRow = appliedCopyBlocksPerRow * bytesPerBlock;\n        memcpy(\n          { src: expectedUint8Data, start: expectedDataOffset, length: bytesInRow },\n          { dst: expectedUint8DataWithPadding, start: expectedDataWithPaddingOffset }\n        );\n      }\n    }\n\n    // Verify the content of the whole subresouce of dstTexture at dstCopyLevel (in dstBuffer) is expected.\n    this.expectGPUBufferValuesEqual(dstBuffer, expectedUint8DataWithPadding);\n  }\n\n  InitializeStencilAspect(\n    sourceTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    this.queue.writeTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        aspect: 'stencil-only',\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      initialStencilData,\n      { bytesPerRow: copySize[0], rowsPerImage: copySize[1] },\n      copySize\n    );\n  }\n\n  VerifyStencilAspect(\n    destinationTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    const bytesPerRow = align(copySize[0], kBytesPerRowAlignment);\n    const rowsPerImage = copySize[1];\n    const outputBufferSize = align(\n      dataBytesForCopyOrFail({\n        layout: { bytesPerRow, rowsPerImage },\n        format: 'stencil8',\n        copySize,\n        method: 'CopyT2B',\n      }),\n      kBufferSizeAlignment\n    );\n    const outputBuffer = this.device.createBuffer({\n      size: outputBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToBuffer(\n      {\n        texture: destinationTexture,\n        aspect: 'stencil-only',\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      { buffer: outputBuffer, bytesPerRow, rowsPerImage },\n      copySize\n    );\n    this.queue.submit([encoder.finish()]);\n\n    const expectedStencilData = new Uint8Array(outputBufferSize);\n    for (let z = 0; z < copySize[2]; ++z) {\n      const initialOffsetPerLayer = z * copySize[0] * copySize[1];\n      const expectedOffsetPerLayer = z * bytesPerRow * rowsPerImage;\n      for (let y = 0; y < copySize[1]; ++y) {\n        const initialOffsetPerRow = initialOffsetPerLayer + y * copySize[0];\n        const expectedOffsetPerRow = expectedOffsetPerLayer + y * bytesPerRow;\n        memcpy(\n          { src: initialStencilData, start: initialOffsetPerRow, length: copySize[0] },\n          { dst: expectedStencilData, start: expectedOffsetPerRow }\n        );\n      }\n    }\n    this.expectGPUBufferValuesEqual(outputBuffer, expectedStencilData);\n  }\n}\n\nconst kCopyBoxOffsetsForWholeDepth = [\n  // From (0, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (blockWidth, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 1, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (0, blockHeight) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 1, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block column of both source and destination texture.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: -1, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block row of both source and destination texture.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: -1, depthOrArrayLayers: 0 },\n  },\n] as const;\n\nconst kCopyBoxOffsetsFor2DArrayTextures = [\n  // Copy the whole array slices from the source texture to the destination texture.\n  // The copy extent will cover the whole subresource of either source or the\n  // destination texture\n  ...kCopyBoxOffsetsForWholeDepth,\n\n  // Copy 1 texture slice from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -2 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 1 texture slice from the 1st slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 2 texture slices from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 3 texture slices from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n] as const;\n\nexport const g = makeTestGroup(F);\n\ng.test('color_textures,non_compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  non-compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Copy {1 texel block, part of, the whole} srcTexture to the dstTexture {with, without} a non-zero\n  valid srcOffset that\n  - covers the whole dstTexture subresource\n  - covers the corners of the dstTexture\n  - doesn't cover any texels that are on the edge of the dstTexture\n  - covers the mipmap level > 0\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kRegularTextureFormats)\n      .beginSubcases()\n      .combine('textureSize', [\n        {\n          srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n        },\n        {\n          srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 64, height: 64, depthOrArrayLayers: 1 },\n        },\n        {\n          srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 63, height: 61, depthOrArrayLayers: 1 },\n        },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n  )\n  .fn(async t => {\n    const { textureSize, format, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      format,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kCompressedTextureFormats)\n      .beginSubcases()\n      .combine('textureSize', [\n        // The heights and widths are all power of 2\n        {\n          srcTextureSize: { width: 64, height: 32, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 64, height: 32, depthOrArrayLayers: 1 },\n        },\n        // The virtual width of the source texture at mipmap level 2 (15) is not a multiple of 4\n        {\n          srcTextureSize: { width: 60, height: 32, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 64, height: 32, depthOrArrayLayers: 1 },\n        },\n        // The virtual width of the destination texture at mipmap level 2 (15) is not a multiple\n        // of 4\n        {\n          srcTextureSize: { width: 64, height: 32, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 60, height: 32, depthOrArrayLayers: 1 },\n        },\n        // The virtual height of the source texture at mipmap level 2 (13) is not a multiple of 4\n        {\n          srcTextureSize: { width: 64, height: 52, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 64, height: 32, depthOrArrayLayers: 1 },\n        },\n        // The virtual height of the destination texture at mipmap level 2 (13) is not a\n        // multiple of 4\n        {\n          srcTextureSize: { width: 64, height: 32, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 64, height: 52, depthOrArrayLayers: 1 },\n        },\n        // None of the widths or heights are power of 2\n        {\n          srcTextureSize: { width: 60, height: 52, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 60, height: 52, depthOrArrayLayers: 1 },\n        },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .fn(async t => {\n    const { textureSize, format, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    t.DoCopyTextureToTextureTest(\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      format,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,non_compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any non-compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kRegularTextureFormats)\n      .beginSubcases()\n      .combine('textureSize', [\n        {\n          srcTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n        },\n      ])\n\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n  )\n  .fn(async t => {\n    const { textureSize, format, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      format,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kCompressedTextureFormats)\n      .beginSubcases()\n      .combine('textureSize', [\n        // The heights and widths are all power of 2\n        {\n          srcTextureSize: { width: 8, height: 8, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 8, height: 8, depthOrArrayLayers: 5 },\n        },\n        // None of the widths or heights are power of 2\n        {\n          srcTextureSize: { width: 60, height: 52, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 60, height: 52, depthOrArrayLayers: 5 },\n        },\n      ])\n\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .fn(async t => {\n    const { textureSize, format, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    t.DoCopyTextureToTextureTest(\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      format,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('zero_sized')\n  .desc(\n    `\n  Validate the correctness of zero-sized copies (should be no-ops).\n\n  - Copies that are zero-sized in only one dimension {x, y, z}, each touching the {lower, upper} end\n  of that dimension.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('copyBoxOffset', [\n        // copyExtent.width === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && srcOffset.x === textureWidth\n        {\n          srcOffset: { x: 64, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && dstOffset.x === textureWidth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 64, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && srcOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 32, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && dstOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 32, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: -5 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && srcOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 5 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && dstOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 5 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n      ])\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n  )\n  .fn(async t => {\n    const { copyBoxOffset, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const format = 'rgba8unorm';\n    const textureSize = { width: 64, height: 32, depthOrArrayLayers: 5 };\n\n    t.DoCopyTextureToTextureTest(\n      textureSize,\n      textureSize,\n      format,\n      copyBoxOffset,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('copy_stencil_aspect')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with stencil aspect.\n\n  For all the texture formats with stencil aspect:\n  - Initialize the stencil aspect of the source texture with writeTexture().\n  - Copy the stencil aspect from the source texture into the destination texture\n  - Copy the stencil aspect of the destination texture into another staging buffer and check its\n    content\n  - Test the copies from / into zero / non-zero array layer / mipmap levels\n  - Test copying multiple array layers\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('srcTextureSize', [\n        { width: 32, height: 16, depthOrArrayLayers: 1 },\n        { width: 32, height: 16, depthOrArrayLayers: 4 },\n        { width: 24, height: 48, depthOrArrayLayers: 5 },\n      ])\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n      .combine('srcCopyBaseArrayLayer', [0, 1])\n      .combine('dstCopyBaseArrayLayer', [0, 1])\n      .filter(t => {\n        return (\n          kTextureFormatInfo[t.format].stencil &&\n          t.srcTextureSize.depthOrArrayLayers > t.srcCopyBaseArrayLayer &&\n          t.srcTextureSize.depthOrArrayLayers > t.dstCopyBaseArrayLayer\n        );\n      })\n  )\n  .fn(async t => {\n    const {\n      format,\n      srcTextureSize,\n      srcCopyLevel,\n      dstCopyLevel,\n      srcCopyBaseArrayLayer,\n      dstCopyBaseArrayLayer,\n    } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n\n    const copySize: [number, number, number] = [\n      srcTextureSize.width >> srcCopyLevel,\n      srcTextureSize.height >> srcCopyLevel,\n      srcTextureSize.depthOrArrayLayers - Math.max(srcCopyBaseArrayLayer, dstCopyBaseArrayLayer),\n    ];\n    const sourceTexture = t.device.createTexture({\n      format,\n      size: srcTextureSize,\n      usage:\n        GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      mipLevelCount: srcCopyLevel + 1,\n    });\n    const destinationTexture = t.device.createTexture({\n      format,\n      size: [\n        copySize[0] << dstCopyLevel,\n        copySize[1] << dstCopyLevel,\n        srcTextureSize.depthOrArrayLayers,\n      ] as const,\n      usage:\n        GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      mipLevelCount: dstCopyLevel + 1,\n    });\n\n    const initialStencilData = t.GetInitialStencilDataPerMipLevel(\n      srcTextureSize,\n      format,\n      srcCopyLevel\n    );\n    t.InitializeStencilAspect(\n      sourceTexture,\n      initialStencilData,\n      srcCopyLevel,\n      srcCopyBaseArrayLayer,\n      copySize\n    );\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      {\n        texture: destinationTexture,\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      copySize\n    );\n    t.queue.submit([encoder.finish()]);\n\n    t.VerifyStencilAspect(\n      destinationTexture,\n      initialStencilData,\n      dstCopyLevel,\n      dstCopyBaseArrayLayer,\n      copySize\n    );\n  });\n"],"file":"copyTextureToTexture.spec.js"}