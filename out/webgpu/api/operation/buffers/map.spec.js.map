{"version":3,"sources":["../../../../../src/webgpu/api/operation/buffers/map.spec.ts"],"names":["description","params","pbool","poptions","makeTestGroup","assert","MappingTest","g","kSubcases","size","range","undefined","reifyMapRange","bufferSize","offset","mapRegionBoundModes","getRegionForMap","mapAsyncRegionLeft","mapAsyncRegionRight","regionLeft","regionRight","test","desc","cases","combine","subcases","fn","t","rangeOffset","rangeSize","buffer","device","createBuffer","usage","GPUBufferUsage","COPY_SRC","MAP_WRITE","mapRegion","mapAsync","GPUMapMode","WRITE","arrayBuffer","getMappedRange","checkMapWrite","mappedAtCreation","COPY_DST","MAP_READ","init","byteLength","expected","Uint32Array","ArrayBuffer","data","i","length","unmap","READ","actual","Uint8Array","expectBuffer","mappable"],"mappings":"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","sourcesContent":["export const description = `\nTest the operation of buffer mapping, specifically the data contents written via\nmap-write/mappedAtCreation, and the contents of buffers returned by getMappedRange on\nbuffers which are mapped-read/mapped-write/mappedAtCreation.\n\nTODO: Test that ranges not written preserve previous contents.\nTODO: Test that mapping-for-write again shows the values previously written.\nTODO: Some testing (probably minimal) of accessing with different TypedArray/DataView types.\n`;\n\nimport { params, pbool, poptions } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/framework/util/util.js';\n\nimport { MappingTest } from './mapping_test.js';\n\nexport const g = makeTestGroup(MappingTest);\n\nconst kSubcases = [\n  { size: 0, range: [] },\n  { size: 0, range: [undefined] },\n  { size: 0, range: [undefined, undefined] },\n  { size: 0, range: [0] },\n  { size: 0, range: [0, undefined] },\n  { size: 0, range: [0, 0] },\n  { size: 12, range: [] },\n  { size: 12, range: [undefined] },\n  { size: 12, range: [undefined, undefined] },\n  { size: 12, range: [0] },\n  { size: 12, range: [0, undefined] },\n  { size: 12, range: [0, 12] },\n  { size: 12, range: [0, 0] },\n  { size: 12, range: [8] },\n  { size: 12, range: [8, undefined] },\n  { size: 12, range: [8, 4] },\n  { size: 28, range: [8, 8] },\n  { size: 28, range: [8, 12] },\n  { size: 512 * 1024, range: [] },\n] as const;\n\nfunction reifyMapRange(bufferSize: number, range: readonly [number?, number?]): [number, number] {\n  const offset = range[0] ?? 0;\n  return [offset, range[1] ?? bufferSize - offset];\n}\n\nconst mapRegionBoundModes = ['default-expand', 'explicit-expand', 'minimal'] as const;\ntype MapRegionBoundMode = typeof mapRegionBoundModes[number];\n\nfunction getRegionForMap(\n  bufferSize: number,\n  range: [number, number],\n  {\n    mapAsyncRegionLeft,\n    mapAsyncRegionRight,\n  }: {\n    mapAsyncRegionLeft: MapRegionBoundMode;\n    mapAsyncRegionRight: MapRegionBoundMode;\n  }\n) {\n  const regionLeft = mapAsyncRegionLeft === 'minimal' ? range[0] : 0;\n  const regionRight = mapAsyncRegionRight === 'minimal' ? range[0] + range[1] : bufferSize;\n  return [\n    mapAsyncRegionLeft === 'default-expand' ? undefined : regionLeft,\n    mapAsyncRegionRight === 'default-expand' ? undefined : regionRight - regionLeft,\n  ] as const;\n}\n\ng.test('mapAsync,write')\n  .desc(\n    `Use map-write to write to various ranges of variously-sized buffers, then expectContents\n(which does copyBufferToBuffer + map-read) to ensure the contents were written.`\n  )\n  .cases(\n    params()\n      .combine(poptions('mapAsyncRegionLeft', mapRegionBoundModes))\n      .combine(poptions('mapAsyncRegionRight', mapRegionBoundModes))\n  )\n  .subcases(() => kSubcases)\n  .fn(async t => {\n    const { size, range } = t.params;\n    const [rangeOffset, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.device.createBuffer({\n      size,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE,\n    });\n\n    const mapRegion = getRegionForMap(size, [rangeOffset, rangeSize], t.params);\n    await buffer.mapAsync(GPUMapMode.WRITE, ...mapRegion);\n    const arrayBuffer = buffer.getMappedRange(...range);\n    t.checkMapWrite(buffer, rangeOffset, arrayBuffer, rangeSize);\n  });\n\ng.test('mapAsync,read')\n  .desc(\n    `Use mappedAtCreation to initialize various ranges of variously-sized buffers, then\nmap-read and check the read-back result.`\n  )\n  .cases(\n    params()\n      .combine(poptions('mapAsyncRegionLeft', mapRegionBoundModes))\n      .combine(poptions('mapAsyncRegionRight', mapRegionBoundModes))\n  )\n  .subcases(() => kSubcases)\n  .fn(async t => {\n    const { size, range } = t.params;\n    const [rangeOffset, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.device.createBuffer({\n      mappedAtCreation: true,\n      size,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n    const init = buffer.getMappedRange(...range);\n\n    assert(init.byteLength === rangeSize);\n    const expected = new Uint32Array(new ArrayBuffer(rangeSize));\n    const data = new Uint32Array(init);\n    for (let i = 0; i < data.length; ++i) {\n      data[i] = expected[i] = i + 1;\n    }\n    buffer.unmap();\n\n    const mapRegion = getRegionForMap(size, [rangeOffset, rangeSize], t.params);\n    await buffer.mapAsync(GPUMapMode.READ, ...mapRegion);\n    const actual = new Uint8Array(buffer.getMappedRange(...range));\n    t.expectBuffer(actual, new Uint8Array(expected.buffer));\n  });\n\ng.test('mappedAtCreation')\n  .desc(\n    `Use mappedAtCreation to write to various ranges of variously-sized buffers created either\nwith or without the MAP_WRITE usage (since this could affect the mappedAtCreation upload path),\nthen expectContents (which does copyBufferToBuffer + map-read) to ensure the contents were written.`\n  )\n  .cases(pbool('mappable'))\n  .subcases(() => kSubcases)\n  .fn(async t => {\n    const { size, range, mappable } = t.params;\n    const [, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.device.createBuffer({\n      mappedAtCreation: true,\n      size,\n      usage: GPUBufferUsage.COPY_SRC | (mappable ? GPUBufferUsage.MAP_WRITE : 0),\n    });\n    const arrayBuffer = buffer.getMappedRange(...range);\n    t.checkMapWrite(buffer, range[0] ?? 0, arrayBuffer, rangeSize);\n  });\n"],"file":"map.spec.js"}