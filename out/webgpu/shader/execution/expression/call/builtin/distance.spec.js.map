{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/distance.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","TypeVec","distanceInterval","fullF32Range","kVectorSparseTestValues","allInputSources","makeBinaryToF32IntervalCase","makeVectorPairToF32IntervalCase","run","builtin","g","makeCaseVecF32","x","y","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","makeCase","cases","flatMap","i","map","j"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'distance' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn distance(e1: T ,e2: T ) -> f32\nReturns the distance between e1 and e2 (e.g. length(e1-e2)).\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32, TypeVec } from '../../../../../util/conversion.js';\nimport { distanceInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range, kVectorSparseTestValues } from '../../../../../util/math.js';\nimport {\n  allInputSources,\n  Case,\n  makeBinaryToF32IntervalCase,\n  makeVectorPairToF32IntervalCase,\n  run,\n} from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** @returns a `distance` Case for a pair of vectors of f32s input */\nconst makeCaseVecF32 = (x: number[], y: number[]): Case => {\n  return makeVectorPairToF32IntervalCase(x, y, distanceInterval);\n};\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (x: number, y: number): Case => {\n      return makeBinaryToF32IntervalCase(x, y, distanceInterval);\n    };\n    const cases: Case[] = fullF32Range().flatMap(i => fullF32Range().map(j => makeCase(i, j)));\n\n    await run(t, builtin('distance'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[2].flatMap(i =>\n      kVectorSparseTestValues[2].map(j => makeCaseVecF32(i, j))\n    );\n\n    await run(\n      t,\n      builtin('distance'),\n      [TypeVec(2, TypeF32), TypeVec(2, TypeF32)],\n      TypeF32,\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[3].flatMap(i =>\n      kVectorSparseTestValues[3].map(j => makeCaseVecF32(i, j))\n    );\n\n    await run(\n      t,\n      builtin('distance'),\n      [TypeVec(3, TypeF32), TypeVec(3, TypeF32)],\n      TypeF32,\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[4].flatMap(i =>\n      kVectorSparseTestValues[4].map(j => makeCaseVecF32(i, j))\n    );\n\n    await run(\n      t,\n      builtin('distance'),\n      [TypeVec(4, TypeF32), TypeVec(4, TypeF32)],\n      TypeF32,\n      t.params,\n      cases\n    );\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"distance.spec.js"}