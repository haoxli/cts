{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/pack2x16float.spec.ts"],"names":["description","makeTestGroup","assert","GPUTest","anyOf","f32","pack2x16float","Scalar","TypeF32","TypeU32","TypeVec","u32","vec2","kVectorTestValues","quantizeToF32","allInputSources","run","builtin","g","cmp","expectation","got","matched","undefined","value","expected","test","specURL","desc","params","u","combine","fn","t","makeCase","x","y","results","input","map","cases","v"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAJO,CAMP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,MAAT,QAAuB,uCAAvB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,KAAT,QAAkC,gCAAlC;AACA;AACEC,GADF;AAEEC,aAFF;AAGEC,MAHF;AAIEC,OAJF;AAKEC,OALF;AAMEC,OANF;AAOEC,GAPF;AAQEC,IARF;AASO,mCATP;AAUA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,6BAAjD;AACA,SAASC,eAAT,EAAgCC,GAAhC,QAA2C,qBAA3C;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGjB,aAAa,CAACE,OAAD,CAAvB;;AAEP;AACA;AACA;AACA;AACA,OAAO,SAASgB,GAAT,CAAaC,WAAb,EAA0D;AAC/D,SAAO,CAAAC,GAAG,KAAI;AACZnB,IAAAA,MAAM,CAACmB,GAAG,YAAYd,MAAhB,EAAyB,uDAAzB,CAAN;AACA,QAAIe,OAAO,GAAG,IAAd;AACA,QAAIF,WAAW,KAAKG,SAApB,EAA+B;AAC7BD,MAAAA,OAAO,GAAID,GAAG,CAACG,KAAL,KAA0BJ,WAApC;AACD;;AAED,WAAO;AACLE,MAAAA,OADK;AAELD,MAAAA,GAAG,EAAG,GAAEA,GAAI,EAFP;AAGLI,MAAAA,QAAQ,EAAG,GAAEL,WAAW,KAAKG,SAAhB,GAA4BZ,GAAG,CAACS,WAAD,CAA/B,GAA+C,KAAM,EAH7D,EAAP;;AAKD,GAZD;AAaD;;AAEDF,CAAC,CAACQ,IAAF,CAAO,MAAP;AACGC,OADH,CACW,oDADX;AAEGC,IAFH;AAGK;AACL;AACA,CALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBhB,eAAzB,CAPf;AAQGiB,EARH,CAQM,OAAMC,CAAN,KAAW;AACb,QAAMC,QAAQ,GAAG,CAACC,CAAD,EAAYC,CAAZ,KAAgC;AAC/CD,IAAAA,CAAC,GAAGrB,aAAa,CAACqB,CAAD,CAAjB;AACAC,IAAAA,CAAC,GAAGtB,aAAa,CAACsB,CAAD,CAAjB;AACA,UAAMC,OAAO,GAAG/B,aAAa,CAAC6B,CAAD,EAAIC,CAAJ,CAA7B;AACA,WAAO,EAAEE,KAAK,EAAE,CAAC1B,IAAI,CAACP,GAAG,CAAC8B,CAAD,CAAJ,EAAS9B,GAAG,CAAC+B,CAAD,CAAZ,CAAL,CAAT,EAAiCX,QAAQ,EAAErB,KAAK,CAAC,GAAGiC,OAAO,CAACE,GAAR,CAAYpB,GAAZ,CAAJ,CAAhD,EAAP;AACD,GALD;;AAOA,QAAMqB,KAAkB,GAAG3B,iBAAiB,CAAC,CAAD,CAAjB,CAAqB0B,GAArB,CAAyB,CAAAE,CAAC,KAAI;AACvD,WAAOP,QAAQ,CAAC,GAAIO,CAAL,CAAf;AACD,GAF0B,CAA3B;;AAIA,QAAMzB,GAAG,CAACiB,CAAD,EAAIhB,OAAO,CAAC,eAAD,CAAX,EAA8B,CAACP,OAAO,CAAC,CAAD,EAAIF,OAAJ,CAAR,CAA9B,EAAqDC,OAArD,EAA8DwB,CAAC,CAACJ,MAAhE,EAAwEW,KAAxE,CAAT;AACD,CArBH","sourcesContent":["export const description = `\nConverts two floating point values to half-precision floating point numbers, and then combines them into one u32 value.\nComponent e[i] of the input is converted to a IEEE-754 binary16 value,\nwhich is then placed in bits 16 × i through 16 × i + 15 of the result.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { anyOf, Comparator } from '../../../../../util/compare.js';\nimport {\n  f32,\n  pack2x16float,\n  Scalar,\n  TypeF32,\n  TypeU32,\n  TypeVec,\n  u32,\n  vec2,\n} from '../../../../../util/conversion.js';\nimport { kVectorTestValues, quantizeToF32 } from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * @returns a custom comparator for a possible result from pack2x16float\n * @param expectation element of the array generated by pack2x16float\n */\nexport function cmp(expectation: number | undefined): Comparator {\n  return got => {\n    assert(got instanceof Scalar, `Received non-Scalar Value in pack2x16float comparator`);\n    let matched = true;\n    if (expectation !== undefined) {\n      matched = (got.value as number) === expectation;\n    }\n\n    return {\n      matched,\n      got: `${got}`,\n      expected: `${expectation !== undefined ? u32(expectation) : 'Any'}`,\n    };\n  };\n}\n\ng.test('pack')\n  .specURL('https://www.w3.org/TR/WGSL/#pack-builtin-functions')\n  .desc(\n    `\n@const fn pack2x16float(e: vec2<f32>) -> u32\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (x: number, y: number): Case => {\n      x = quantizeToF32(x);\n      y = quantizeToF32(y);\n      const results = pack2x16float(x, y);\n      return { input: [vec2(f32(x), f32(y))], expected: anyOf(...results.map(cmp)) };\n    };\n\n    const cases: Array<Case> = kVectorTestValues[2].map(v => {\n      return makeCase(...(v as [number, number]));\n    });\n\n    await run(t, builtin('pack2x16float'), [TypeVec(2, TypeF32)], TypeU32, t.params, cases);\n  });\n"],"file":"pack2x16float.spec.js"}