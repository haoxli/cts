{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/reflect.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","TypeVec","reflectInterval","kVectorSparseTestValues","allInputSources","makeVectorPairToVectorIntervalCase","run","builtin","g","makeCaseVecF32","x","y","test","specURL","desc","params","u","combine","unimplemented","fn","t","cases","flatMap","i","map","j"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'reflect' builtin function\n\nT is vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn reflect(e1: T, e2: T ) -> T\nFor the incident vector e1 and surface orientation e2, returns the reflection\ndirection e1-2*dot(e2,e1)*e2.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32, TypeVec } from '../../../../../util/conversion.js';\nimport { reflectInterval } from '../../../../../util/f32_interval.js';\nimport { kVectorSparseTestValues } from '../../../../../util/math.js';\nimport {\n  allInputSources,\n  Case,\n  makeVectorPairToVectorIntervalCase,\n  run,\n} from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** @returns a `reflect` Case for a pair of vectors of f32s input */\nconst makeCaseVecF32 = (x: number[], y: number[]): Case => {\n  return makeVectorPairToVectorIntervalCase(x, y, reflectInterval);\n};\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[2].flatMap(i =>\n      kVectorSparseTestValues[2].map(j => makeCaseVecF32(i, j))\n    );\n\n    await run(\n      t,\n      builtin('reflect'),\n      [TypeVec(2, TypeF32), TypeVec(2, TypeF32)],\n      TypeVec(2, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[3].flatMap(i =>\n      kVectorSparseTestValues[3].map(j => makeCaseVecF32(i, j))\n    );\n\n    await run(\n      t,\n      builtin('reflect'),\n      [TypeVec(3, TypeF32), TypeVec(3, TypeF32)],\n      TypeVec(3, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[4].flatMap(i =>\n      kVectorSparseTestValues[4].map(j => makeCaseVecF32(i, j))\n    );\n\n    await run(\n      t,\n      builtin('reflect'),\n      [TypeVec(4, TypeF32), TypeVec(4, TypeF32)],\n      TypeVec(4, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n"],"file":"reflect.spec.js"}