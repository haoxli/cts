{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/pack4x8snorm.spec.ts"],"names":["description","makeTestGroup","GPUTest","kValue","f32","pack4x8snorm","TypeF32","TypeU32","TypeVec","u32","vec4","kVectorTestValues","quantizeToF32","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","makeCase","vals","vals_f32","Array","idx","input","expected","normalizeF32","n","positive","max","cases","flatMap","v","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CALO,CAOP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,MAAT,QAAuB,kCAAvB;AACA;AACEC,GADF;AAEEC,YAFF;;AAIEC,OAJF;AAKEC,OALF;AAMEC,OANF;AAOEC,GAPF;AAQEC,IARF;AASO,mCATP;AAUA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,6BAAjD;AACA,SAASC,eAAT,EAAgCC,GAAhC,QAA2C,qBAA3C;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGf,aAAa,CAACC,OAAD,CAAvB;;AAEPc,CAAC,CAACC,IAAF,CAAO,MAAP;AACGC,OADH,CACW,oDADX;AAEGC,IAFH;AAGK;AACL;AACA,CALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBT,eAAzB,CAPf;AAQGU,EARH,CAQM,OAAMC,CAAN,KAAW;AACb,QAAMC,QAAQ,GAAG,CAACC,IAAD,KAAkD;AACjE,UAAMC,QAAQ,GAAG,IAAIC,KAAJ,CAAkB,CAAlB,CAAjB;AACA,SAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACtBA,MAAAA,IAAI,CAACG,GAAD,CAAJ,GAAYjB,aAAa,CAACc,IAAI,CAACG,GAAD,CAAL,CAAzB;AACAF,MAAAA,QAAQ,CAACE,GAAD,CAAR,GAAgBzB,GAAG,CAACsB,IAAI,CAACG,GAAD,CAAL,CAAnB;AACD;;AAED,WAAO,EAAEC,KAAK,EAAE,CAACpB,IAAI,CAAC,GAAGiB,QAAJ,CAAL,CAAT,EAA8BI,QAAQ,EAAEtB,GAAG,CAACJ,YAAY,CAAC,GAAGqB,IAAJ,CAAb,CAA3C,EAAP;AACD,GARD;;AAUA;AACA,QAAMM,YAAY,GAAG,CAACC,CAAD,KAAuB;AAC1C,WAAOA,CAAC,GAAG9B,MAAM,CAACC,GAAP,CAAW8B,QAAX,CAAoBC,GAA/B;AACD,GAFD;;AAIA,QAAMC,KAAkB,GAAGzB,iBAAiB,CAAC,CAAD,CAAjB,CAAqB0B,OAArB,CAA6B,CAAAC,CAAC,KAAI;AAC3D,WAAO;AACLb,IAAAA,QAAQ,CAACa,CAAD,CADH;AAELb,IAAAA,QAAQ,CAACa,CAAC,CAACC,GAAF,CAAMP,YAAN,CAAD,CAFH,CAAP;;AAID,GAL0B,CAA3B;;AAOA,QAAMlB,GAAG,CAACU,CAAD,EAAIT,OAAO,CAAC,cAAD,CAAX,EAA6B,CAACP,OAAO,CAAC,CAAD,EAAIF,OAAJ,CAAR,CAA7B,EAAoDC,OAApD,EAA6DiB,CAAC,CAACJ,MAA/D,EAAuEgB,KAAvE,CAAT;AACD,CAhCH","sourcesContent":["export const description = `\nConverts four normalized floating point values to 8-bit signed integers, and then combines them into one u32 value.\nComponent e[i] of the input is converted to an 8-bit twos complement integer value\n⌊ 0.5 + 127 × min(1, max(-1, e[i])) ⌋ which is then placed in\nbits 8 × i through 8 × i + 7 of the result.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport {\n  f32,\n  pack4x8snorm,\n  Scalar,\n  TypeF32,\n  TypeU32,\n  TypeVec,\n  u32,\n  vec4,\n} from '../../../../../util/conversion.js';\nimport { kVectorTestValues, quantizeToF32 } from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('pack')\n  .specURL('https://www.w3.org/TR/WGSL/#pack-builtin-functions')\n  .desc(\n    `\n@const fn pack4x8snorm(e: vec4<f32>) -> u32\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (vals: [number, number, number, number]): Case => {\n      const vals_f32 = new Array<Scalar>(4) as [Scalar, Scalar, Scalar, Scalar];\n      for (const idx in vals) {\n        vals[idx] = quantizeToF32(vals[idx]);\n        vals_f32[idx] = f32(vals[idx]);\n      }\n\n      return { input: [vec4(...vals_f32)], expected: u32(pack4x8snorm(...vals)) };\n    };\n\n    // Returns a value normalized to [-1, 1].\n    const normalizeF32 = (n: number): number => {\n      return n / kValue.f32.positive.max;\n    };\n\n    const cases: Array<Case> = kVectorTestValues[4].flatMap(v => {\n      return [\n        makeCase(v as [number, number, number, number]),\n        makeCase(v.map(normalizeF32) as [number, number, number, number]),\n      ];\n    });\n\n    await run(t, builtin('pack4x8snorm'), [TypeVec(4, TypeF32)], TypeU32, t.params, cases);\n  });\n"],"file":"pack4x8snorm.spec.js"}