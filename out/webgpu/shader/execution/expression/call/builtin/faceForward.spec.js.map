{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/faceForward.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","f32","TypeF32","TypeVec","Vector","faceForwardIntervals","kVectorSparseTestValues","quantizeToF32","allInputSources","run","builtin","g","makeCase","x","y","z","map","x_f32","y_f32","z_f32","intervals","input","expected","test","specURL","desc","params","u","combine","unimplemented","fn","t","cases","flatMap","i","j","k"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'faceForward' builtin function\n\nT is vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn faceForward(e1: T ,e2: T ,e3: T ) -> T\nReturns e1 if dot(e2,e3) is negative, and -e1 otherwise.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { anyOf } from '../../../../../util/compare.js';\nimport { f32, TypeF32, TypeVec, Vector } from '../../../../../util/conversion.js';\nimport { faceForwardIntervals } from '../../../../../util/f32_interval.js';\nimport { kVectorSparseTestValues, quantizeToF32 } from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * @returns a `faceForward` Case for a triplet of vectors of f32s input\n *\n * Needs to be a custom implementation, since faceFowardIntervals returns an\n * array of vector of intervals, which are to be treated as discrete\n * possibilities.\n */\nconst makeCase = (x: number[], y: number[], z: number[]): Case => {\n  x = x.map(quantizeToF32);\n  y = y.map(quantizeToF32);\n  z = z.map(quantizeToF32);\n\n  const x_f32 = x.map(f32);\n  const y_f32 = y.map(f32);\n  const z_f32 = z.map(f32);\n\n  const intervals = faceForwardIntervals(x, y, z);\n\n  return {\n    input: [new Vector(x_f32), new Vector(y_f32), new Vector(z_f32)],\n    expected: anyOf(...intervals),\n  };\n};\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[2].flatMap(i =>\n      kVectorSparseTestValues[2].flatMap(j =>\n        kVectorSparseTestValues[2].map(k => makeCase(i, j, k))\n      )\n    );\n\n    await run(\n      t,\n      builtin('faceForward'),\n      [TypeVec(2, TypeF32), TypeVec(2, TypeF32), TypeVec(2, TypeF32)],\n      TypeVec(2, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[3].flatMap(i =>\n      kVectorSparseTestValues[3].flatMap(j =>\n        kVectorSparseTestValues[3].map(k => makeCase(i, j, k))\n      )\n    );\n\n    await run(\n      t,\n      builtin('faceForward'),\n      [TypeVec(3, TypeF32), TypeVec(3, TypeF32), TypeVec(3, TypeF32)],\n      TypeVec(3, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[4].flatMap(i =>\n      kVectorSparseTestValues[4].flatMap(j =>\n        kVectorSparseTestValues[4].map(k => makeCase(i, j, k))\n      )\n    );\n\n    await run(\n      t,\n      builtin('faceForward'),\n      [TypeVec(4, TypeF32), TypeVec(4, TypeF32), TypeVec(4, TypeF32)],\n      TypeVec(4, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n"],"file":"faceForward.spec.js"}