{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/pack2x16unorm.spec.ts"],"names":["description","makeTestGroup","GPUTest","kValue","f32","pack2x16unorm","TypeF32","TypeU32","TypeVec","u32","vec2","kVectorTestValues","quantizeToF32","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","makeCase","x","y","input","expected","normalizeF32","n","positive","max","negative","min","cases","flatMap","v","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CALO,CAOP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,MAAT,QAAuB,kCAAvB;AACA;AACEC,GADF;AAEEC,aAFF;AAGEC,OAHF;AAIEC,OAJF;AAKEC,OALF;AAMEC,GANF;AAOEC,IAPF;AAQO,mCARP;AASA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,6BAAjD;AACA,SAASC,eAAT,EAAgCC,GAAhC,QAA2C,qBAA3C;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGf,aAAa,CAACC,OAAD,CAAvB;;AAEPc,CAAC,CAACC,IAAF,CAAO,MAAP;AACGC,OADH,CACW,oDADX;AAEGC,IAFH;AAGK;AACL;AACA,CALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBT,eAAzB,CAPf;AAQGU,EARH,CAQM,OAAMC,CAAN,KAAW;AACb,QAAMC,QAAQ,GAAG,CAACC,CAAD,EAAYC,CAAZ,KAAgC;AAC/CD,IAAAA,CAAC,GAAGd,aAAa,CAACc,CAAD,CAAjB;AACAC,IAAAA,CAAC,GAAGf,aAAa,CAACe,CAAD,CAAjB;AACA,WAAO,EAAEC,KAAK,EAAE,CAAClB,IAAI,CAACN,GAAG,CAACsB,CAAD,CAAJ,EAAStB,GAAG,CAACuB,CAAD,CAAZ,CAAL,CAAT,EAAiCE,QAAQ,EAAEpB,GAAG,CAACJ,aAAa,CAACqB,CAAD,EAAIC,CAAJ,CAAd,CAA9C,EAAP;AACD,GAJD;;AAMA;AACA,QAAMG,YAAY,GAAG,CAACC,CAAD,KAAuB;AAC1C,WAAOA,CAAC,GAAG,CAAJ,GAAQA,CAAC,GAAG5B,MAAM,CAACC,GAAP,CAAW4B,QAAX,CAAoBC,GAAhC,GAAsCF,CAAC,GAAG5B,MAAM,CAACC,GAAP,CAAW8B,QAAX,CAAoBC,GAArE;AACD,GAFD;;AAIA,QAAMC,KAAkB,GAAGzB,iBAAiB,CAAC,CAAD,CAAjB,CAAqB0B,OAArB,CAA6B,CAAAC,CAAC,KAAI;AAC3D,WAAO;AACLb,IAAAA,QAAQ,CAAC,GAAIa,CAAL,CADH;AAELb,IAAAA,QAAQ,CAAC,GAAIa,CAAC,CAACC,GAAF,CAAMT,YAAN,CAAL,CAFH,CAAP;;AAID,GAL0B,CAA3B;;AAOA,QAAMhB,GAAG,CAACU,CAAD,EAAIT,OAAO,CAAC,eAAD,CAAX,EAA8B,CAACP,OAAO,CAAC,CAAD,EAAIF,OAAJ,CAAR,CAA9B,EAAqDC,OAArD,EAA8DiB,CAAC,CAACJ,MAAhE,EAAwEgB,KAAxE,CAAT;AACD,CA5BH","sourcesContent":["export const description = `\nConverts two normalized floating point values to 16-bit unsigned integers, and then combines them into one u32 value.\nComponent e[i] of the input is converted to a 16-bit unsigned integer value\n⌊ 0.5 + 65535 × min(1, max(0, e[i])) ⌋ which is then placed in\nbits 16 × i through 16 × i + 15 of the result.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport {\n  f32,\n  pack2x16unorm,\n  TypeF32,\n  TypeU32,\n  TypeVec,\n  u32,\n  vec2,\n} from '../../../../../util/conversion.js';\nimport { kVectorTestValues, quantizeToF32 } from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('pack')\n  .specURL('https://www.w3.org/TR/WGSL/#pack-builtin-functions')\n  .desc(\n    `\n@const fn pack2x16unorm(e: vec2<f32>) -> u32\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (x: number, y: number): Case => {\n      x = quantizeToF32(x);\n      y = quantizeToF32(y);\n      return { input: [vec2(f32(x), f32(y))], expected: u32(pack2x16unorm(x, y)) };\n    };\n\n    // Returns a value normalized to [0, 1].\n    const normalizeF32 = (n: number): number => {\n      return n > 0 ? n / kValue.f32.positive.max : n / kValue.f32.negative.min;\n    };\n\n    const cases: Array<Case> = kVectorTestValues[2].flatMap(v => {\n      return [\n        makeCase(...(v as [number, number])),\n        makeCase(...(v.map(normalizeF32) as [number, number])),\n      ];\n    });\n\n    await run(t, builtin('pack2x16unorm'), [TypeVec(2, TypeF32)], TypeU32, t.params, cases);\n  });\n"],"file":"pack2x16unorm.spec.js"}