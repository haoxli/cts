{"version":3,"file":"atomicOr.spec.js","names":["description","makeTestGroup","keysOf","GPUTest","dispatchSizes","workgroupSizes","runTest","kMapId","g","test","specURL","desc","params","u","combine","fn","t","numInvocations","workgroupSize","dispatchSize","bufferNumElements","Math","max","mapId","extra","wgsl","initValue","op","expected","Uint32Array","id","i","f","floor"],"sources":["../../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atomics/atomicOr.spec.ts"],"sourcesContent":["export const description = `\nAtomically read, or and store value.\n\n* Load the original value pointed to by atomic_ptr.\n* Obtains a new value by or'ing with the value v.\n* Store the new value using atomic_ptr.\n\nReturns the original value stored in the atomic object.\n`;\n\nimport { makeTestGroup } from '../../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../../common/util/data_tables.js';\nimport { GPUTest } from '../../../../../../gpu_test.js';\n\nimport { dispatchSizes, workgroupSizes, runTest, kMapId } from './harness.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('or')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-rmw')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicOr(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T) -> T\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n  )\n  .fn(t => {\n    const numInvocations = t.params.workgroupSize * t.params.dispatchSize;\n\n    // Allocate an output buffer with bitsize of max invocations plus 1 for validation\n    const bufferNumElements = Math.max(1, numInvocations / 32) + 1;\n\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations); // Defines map_id()\n\n    // Start with all bits low, then using atomicOr to set mapped global id bit on.\n    // Note: Both WGSL and JS will shift left 1 by id modulo 32.\n    const initValue = 0;\n    const op = `\n      let i = map_id(id);\n      atomicOr(&output[i / 32], 1u << i)\n    `;\n    const expected = new Uint32Array(bufferNumElements);\n    for (let id = 0; id < numInvocations; ++id) {\n      const i = mapId.f(id, numInvocations);\n      expected[Math.floor(i / 32)] |= 1 << i;\n    }\n\n    runTest({\n      t,\n      workgroupSize: t.params.workgroupSize,\n      dispatchSize: t.params.dispatchSize,\n      bufferNumElements,\n      initValue,\n      op,\n      expected,\n      extra,\n    });\n  });\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,qDAAqD;AACnF,SAASC,MAAM,QAAQ,iDAAiD;AACxE,SAASC,OAAO,QAAQ,+BAA+B;;AAEvD,SAASC,aAAa,EAAEC,cAAc,EAAEC,OAAO,EAAEC,MAAM,QAAQ,cAAc;;AAE7E,OAAO,MAAMC,CAAC,GAAGP,aAAa,CAACE,OAAO,CAAC;;AAEvCK,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;AACTC,OAAO,CAAC,wCAAwC,CAAC;AACjDC,IAAI;AACF;AACL;AACA;AACA;AACA;AACA,CAAC,CACE;;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,eAAe,EAAET,cAAc,CAAC;AACxCS,OAAO,CAAC,cAAc,EAAEV,aAAa,CAAC;AACtCU,OAAO,CAAC,OAAO,EAAEZ,MAAM,CAACK,MAAM,CAAC,CAAC,CACpC;;AACAQ,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,cAAc,GAAGD,CAAC,CAACJ,MAAM,CAACM,aAAa,GAAGF,CAAC,CAACJ,MAAM,CAACO,YAAY;;EAErE;EACA,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,cAAc,GAAG,EAAE,CAAC,GAAG,CAAC;;EAE9D,MAAMM,KAAK,GAAGhB,MAAM,CAACS,CAAC,CAACJ,MAAM,CAACW,KAAK,CAAC;EACpC,MAAMC,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACR,cAAc,CAAC,CAAC,CAAC;;EAE1C;EACA;EACA,MAAMS,SAAS,GAAG,CAAC;EACnB,MAAMC,EAAE,GAAI;AAChB;AACA;AACA,KAAK;EACD,MAAMC,QAAQ,GAAG,IAAIC,WAAW,CAACT,iBAAiB,CAAC;EACnD,KAAK,IAAIU,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGb,cAAc,EAAE,EAAEa,EAAE,EAAE;IAC1C,MAAMC,CAAC,GAAGR,KAAK,CAACS,CAAC,CAACF,EAAE,EAAEb,cAAc,CAAC;IACrCW,QAAQ,CAACP,IAAI,CAACY,KAAK,CAACF,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAIA,CAAC;EACxC;;EAEAzB,OAAO,CAAC;IACNU,CAAC;IACDE,aAAa,EAAEF,CAAC,CAACJ,MAAM,CAACM,aAAa;IACrCC,YAAY,EAAEH,CAAC,CAACJ,MAAM,CAACO,YAAY;IACnCC,iBAAiB;IACjBM,SAAS;IACTC,EAAE;IACFC,QAAQ;IACRJ;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"}