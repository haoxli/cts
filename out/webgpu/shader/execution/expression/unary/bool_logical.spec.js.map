{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/bool_logical.spec.ts"],"names":["description","makeTestGroup","GPUTest","bool","TypeBool","allInputSources","run","unary","g","test","specURL","desc","params","u","combine","undefined","fn","t","cases","input","expected"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,gCAA/B;AACA,SAASC,eAAT,EAA0BC,GAA1B,QAAqC,kBAArC;;AAEA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,OAAO,MAAMC,CAAC,GAAGP,aAAa,CAACC,OAAD,CAAvB;;AAEPM,CAAC,CAACC,IAAF,CAAO,UAAP;AACGC,OADH,CACW,0CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBT,eAAzB,EAA0CS,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAVJ;;AAYGC,EAZH,CAYM,OAAMC,CAAN,KAAW;AACb,QAAMC,KAAK,GAAG;AACZ,IAAEC,KAAK,EAAEhB,IAAI,CAAC,IAAD,CAAb,EAAqBiB,QAAQ,EAAEjB,IAAI,CAAC,KAAD,CAAnC,EADY;AAEZ,IAAEgB,KAAK,EAAEhB,IAAI,CAAC,KAAD,CAAb,EAAsBiB,QAAQ,EAAEjB,IAAI,CAAC,IAAD,CAApC,EAFY,CAAd;;;AAKA,QAAMG,GAAG,CAACW,CAAD,EAAIV,KAAK,CAAC,GAAD,CAAT,EAAgB,CAACH,QAAD,CAAhB,EAA4BA,QAA5B,EAAsCa,CAAC,CAACL,MAAxC,EAAgDM,KAAhD,CAAT;AACD,CAnBH","sourcesContent":["export const description = `\nExecution Tests for the boolean unary logical expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { bool, TypeBool } from '../../../../util/conversion.js';\nimport { allInputSources, run } from '../expression.js';\n\nimport { unary } from './unary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('negation')\n  .specURL('https://www.w3.org/TR/WGSL/#logical-expr')\n  .desc(\n    `\nExpression: !e\n\nLogical negation. The result is true when e is false and false when e is true. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = [\n      { input: bool(true), expected: bool(false) },\n      { input: bool(false), expected: bool(true) },\n    ];\n\n    await run(t, unary('!'), [TypeBool], TypeBool, t.params, cases);\n  });\n"],"file":"bool_logical.spec.js"}