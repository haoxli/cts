{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/f32_arithmetic.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","correctlyRoundedThreshold","kValue","f32","TypeF32","biasedRange","isSubnormalNumber","linearRange","quantizeToF32","run","unary","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cfg","cmpFloats","makeCase","x","f32_x","input","expected","numeric_range","negative","max","min","subnormal","positive","cases","map"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the f32 arithmetic unary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { anyOf, correctlyRoundedThreshold } from '../../../../util/compare.js';\nimport { kValue } from '../../../../util/constants.js';\nimport { f32, TypeF32 } from '../../../../util/conversion.js';\nimport {\n  biasedRange,\n  isSubnormalNumber,\n  linearRange,\n  quantizeToF32,\n} from '../../../../util/math.js';\nimport { Case, Config, run } from '../expression.js';\n\nimport { unary } from './unary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('negation')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: -x\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    const makeCase = (x: number): Case => {\n      const f32_x = quantizeToF32(x);\n      if (isSubnormalNumber(f32_x)) {\n        return { input: [f32(x)], expected: anyOf(f32(-f32_x), f32(0.0)) };\n      } else {\n        return { input: [f32(x)], expected: f32(-f32_x) };\n      }\n    };\n\n    const numeric_range = [\n      ...biasedRange(kValue.f32.negative.max, kValue.f32.negative.min, 50),\n      ...linearRange(kValue.f32.subnormal.negative.min, kValue.f32.subnormal.negative.max, 10),\n      0.0,\n      ...linearRange(kValue.f32.subnormal.positive.min, kValue.f32.subnormal.positive.max, 10),\n      ...biasedRange(kValue.f32.positive.min, kValue.f32.positive.max, 10),\n    ];\n    const cases = numeric_range.map(x => makeCase(x));\n\n    run(t, unary('-'), [TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"f32_arithmetic.spec.js"}