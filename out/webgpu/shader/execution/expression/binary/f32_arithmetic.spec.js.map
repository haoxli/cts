{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f32_arithmetic.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","additionInterval","divisionInterval","multiplicationInterval","remainderInterval","subtractionInterval","kVectorTestValues","allInputSources","makeBinaryToF32IntervalCase","run","binary","g","test","specURL","desc","params","u","combine","undefined","fn","t","makeCase","lhs","rhs","cases","map","v"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the f32 arithmetic binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../util/conversion.js';\nimport {\n  additionInterval,\n  divisionInterval,\n  multiplicationInterval,\n  remainderInterval,\n  subtractionInterval,\n} from '../../../../util/f32_interval.js';\nimport { kVectorTestValues } from '../../../../util/math.js';\nimport { allInputSources, Case, makeBinaryToF32IntervalCase, run } from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('addition')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x + y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, additionInterval);\n    };\n\n    const cases = kVectorTestValues[2].map(v => {\n      return makeCase(v[0], v[1]);\n    });\n\n    await run(t, binary('+'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('subtraction')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x - y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, subtractionInterval);\n    };\n\n    const cases = kVectorTestValues[2].map(v => {\n      return makeCase(v[0], v[1]);\n    });\n\n    await run(t, binary('-'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('multiplication')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x * y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, multiplicationInterval);\n    };\n\n    const cases = kVectorTestValues[2].map(v => {\n      return makeCase(v[0], v[1]);\n    });\n\n    await run(t, binary('*'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('division')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x / y\nAccuracy: 2.5 ULP for |y| in the range [2^-126, 2^126]\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, divisionInterval);\n    };\n\n    const cases = kVectorTestValues[2].map(v => {\n      return makeCase(v[0], v[1]);\n    });\n\n    await run(t, binary('/'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('remainder')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x % y\nAccuracy: Derived from x - y * trunc(x/y)\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, remainderInterval);\n    };\n\n    const cases = kVectorTestValues[2].map(v => {\n      return makeCase(v[0], v[1]);\n    });\n\n    await run(t, binary('%'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n"],"file":"f32_arithmetic.spec.js"}