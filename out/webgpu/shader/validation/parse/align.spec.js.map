{"version":3,"sources":["../../../../../src/webgpu/shader/validation/parse/align.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","g","kValidAlign","Set","kInvalidAlign","test","desc","params","u","combine","fn","t","v","align","replace","code","expectCompileResult","has"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI,6BAArB,CAEP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,oBAAT,QAAqC,8BAArC;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAD,CAAvB;;AAEP,MAAME,WAAW,GAAG,IAAIC,GAAJ,CAAQ;AAC1B,EAD0B;AAE1B,WAF0B;AAG1B,WAH0B;AAI1B,YAJ0B;AAK1B,YAL0B;AAM1B,aAN0B;AAO1B,YAP0B;AAQ1B,eAR0B;AAS1B,eAT0B;AAU1B,uBAV0B;AAW1B,oBAX0B;AAY1B,eAZ0B;AAa1B,iCAb0B,CAAR,CAApB;;AAeA,MAAMC,aAAa,GAAG,IAAID,GAAJ,CAAQ;AAC5B,YAD4B;AAE5B,UAF4B;AAG5B,WAH4B;AAI5B,UAJ4B;AAK5B,cAL4B;AAM5B,YAN4B;AAO5B,WAP4B,EAOf;AACb,eAR4B;AAS5B,aAT4B;AAU5B,YAV4B;AAW5B,YAX4B;AAY5B,QAZ4B;AAa5B,WAb4B;AAc5B,YAd4B;AAe5B,oBAf4B,EAeN;AACtB,oBAhB4B,CAgBN;AAhBM,CAAR,CAAtB;;AAmBAF,CAAC,CAACI,IAAF,CAAO,mCAAP;AACGC,IADH,CACS,uCADT;AAEGC,MAFH,CAEU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,OAAV,EAAmB,IAAIN,GAAJ,CAAQ,CAAC,GAAGD,WAAJ,EAAiB,GAAGE,aAApB,CAAR,CAAnB,CAFf;AAGGM,EAHH,CAGM,CAAAC,CAAC,KAAI;AACP,QAAMC,CAAC,GAAGD,CAAC,CAACJ,MAAF,CAASM,KAAT,CAAeC,OAAf,CAAuB,KAAvB,EAA8B,GAA9B,CAAV;AACA,QAAMC,IAAI,GAAI;AAClB;AACA;AACA;AACA;AACA,IAAIH,CAAE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAdI;AAeAD,EAAAA,CAAC,CAACK,mBAAF,CAAsBd,WAAW,CAACe,GAAZ,CAAgBN,CAAC,CAACJ,MAAF,CAASM,KAAzB,CAAtB,EAAuDE,IAAvD;AACD,CArBH","sourcesContent":["export const description = `Validation tests for @align`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValidAlign = new Set([\n  '',\n  '@align(1)',\n  '@align(4)',\n  '@align(4i)',\n  '@align(4u)',\n  '@align(0x4)',\n  '@align(4,)',\n  '@align(u_val)',\n  '@align(i_val)',\n  '@align(i_val + 4 - 6)',\n  '@align(1073741824)',\n  '@\\talign\\t(4)',\n  '@/^comment^/align/^comment^/(4)',\n]);\nconst kInvalidAlign = new Set([\n  '@malign(4)',\n  '@align()',\n  '@align 4)',\n  '@align(4',\n  '@align(4, 2)',\n  '@align(4,)',\n  '@align(3)', // Not a power of 2\n  '@align(f_val)',\n  '@align(1.0)',\n  '@align(4f)',\n  '@align(4h)',\n  '@align',\n  '@align(0)',\n  '@align(-4)',\n  '@align(2147483646)', // Not a power of 2\n  '@align(2147483648)', // Larger then max i32\n]);\n\ng.test('missing_attribute_on_param_struct')\n  .desc(`Test that @align is parsed correctly.`)\n  .params(u => u.combine('align', new Set([...kValidAlign, ...kInvalidAlign])))\n  .fn(t => {\n    const v = t.params.align.replace(/\\^/g, '*');\n    const code = `\nconst i_val: i32 = 4;\nconst u_val: u32 = 4;\nconst f_val: f32 = 4.2;\nstruct B {\n  ${v} a: i32,\n}\n\n@group(0) @binding(0)\nvar<uniform> uniform_buffer: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}`;\n    t.expectCompileResult(kValidAlign.has(t.params.align), code);\n  });\n"],"file":"align.spec.js"}