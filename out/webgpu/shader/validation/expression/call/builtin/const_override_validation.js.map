{"version":3,"file":"const_override_validation.js","names":["assert","unreachable","kValue","TypeF16","VectorType","elementType","isAbstractType","isFloatType","fullF16Range","fullF32Range","fullF64Range","linearRange","kMinusTwoToTwo","kMinus3PiTo3Pi","Math","PI","kConstantAndOverrideStages","stageSupportsType","stage","type","validateConstOrOverrideBuiltinEval","t","builtin","expectedResult","value","elTy","enables","conversion","width","toString","val_str","includes","expectCompileResult","expectPipelineResult","code","constants","o","reference","fullRangeForType","kind","i32","negative","min","positive","max","map","f","floor","u32","unique","arrays","set","Set","arr","item","add"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/const_override_validation.ts"],"sourcesContent":["import { assert, unreachable } from '../../../../../../common/util/util.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport {\n  Type,\n  TypeF16,\n  VectorType,\n  elementType,\n  isAbstractType,\n  isFloatType,\n} from '../../../../../util/conversion.js';\nimport { fullF16Range, fullF32Range, fullF64Range, linearRange } from '../../../../../util/math.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\n/// A linear sweep between -2 to 2\nexport const kMinusTwoToTwo = linearRange(-2, 2, 10);\n\n/// An array of values ranging from -3π to 3π, with a focus on multiples of π\nexport const kMinus3PiTo3Pi = [\n  -3 * Math.PI,\n  -2.999 * Math.PI,\n\n  -2.501 * Math.PI,\n  -2.5 * Math.PI,\n  -2.499 * Math.PI,\n\n  -2.001 * Math.PI,\n  -2.0 * Math.PI,\n  -1.999 * Math.PI,\n\n  -1.501 * Math.PI,\n  -1.5 * Math.PI,\n  -1.499 * Math.PI,\n\n  -1.001 * Math.PI,\n  -1.0 * Math.PI,\n  -0.999 * Math.PI,\n\n  -0.501 * Math.PI,\n  -0.5 * Math.PI,\n  -0.499 * Math.PI,\n\n  -0.001,\n  0,\n  0.001,\n\n  0.499 * Math.PI,\n  0.5 * Math.PI,\n  0.501 * Math.PI,\n\n  0.999 * Math.PI,\n  1.0 * Math.PI,\n  1.001 * Math.PI,\n\n  1.499 * Math.PI,\n  1.5 * Math.PI,\n  1.501 * Math.PI,\n\n  1.999 * Math.PI,\n  2.0 * Math.PI,\n  2.001 * Math.PI,\n\n  2.499 * Math.PI,\n  2.5 * Math.PI,\n  2.501 * Math.PI,\n\n  2.999 * Math.PI,\n  3 * Math.PI,\n] as const;\n\n/// The evaluation stages to test\nexport const kConstantAndOverrideStages = ['constant', 'override'] as const;\n\nexport type ConstantOrOverrideStage = 'constant' | 'override';\n\n/**\n * @returns true if evaluation stage @p stage supports expressions of type @p.\n */\nexport function stageSupportsType(stage: ConstantOrOverrideStage, type: Type) {\n  if (stage === 'override' && isAbstractType(elementType(type)!)) {\n    // Abstract numerics are concretized before being used in an override expression.\n    return false;\n  }\n  return true;\n}\n\n/**\n * Runs a validation test to check that evaluation of @p builtin either evaluates with or without\n * error at shader creation time or pipeline creation time.\n * @param t the ShaderValidationTest\n * @param builtin the name of the builtin\n * @param expectedResult false if an error is expected, true if no error is expected\n * @param value the value to pass to the builtin\n * @param type the type to convert @p value to before passing to the builtin\n * @param stage the evaluation stage\n */\nexport function validateConstOrOverrideBuiltinEval(\n  t: ShaderValidationTest,\n  builtin: string,\n  expectedResult: boolean,\n  value: number,\n  type: Type,\n  stage: ConstantOrOverrideStage\n) {\n  const elTy = elementType(type)!;\n  const enables = elTy === TypeF16 ? 'enable f16;' : '';\n  let conversion = '';\n  if (isAbstractType(elTy)) {\n    if (type instanceof VectorType) {\n      conversion = `vec${type.width}`;\n    }\n  } else {\n    conversion = type.toString();\n  }\n\n  switch (stage) {\n    case 'constant': {\n      let val_str = value.toString();\n      if (\n        isFloatType(elTy) &&\n        !val_str.includes('.') &&\n        !val_str.includes('e') &&\n        !val_str.includes('E')\n      ) {\n        val_str += '.0';\n      }\n\n      t.expectCompileResult(\n        expectedResult,\n        `${enables}\nconst v = ${builtin}(${conversion}(${val_str}));`\n      );\n      break;\n    }\n    case 'override': {\n      assert(!isAbstractType(elTy));\n      t.expectPipelineResult({\n        expectedResult,\n        code: `${enables}\noverride o : ${elTy.toString()};\nvar<private> v = ${builtin}(${conversion}(o));`,\n        constants: { o: value },\n        reference: ['v'],\n      });\n      break;\n    }\n  }\n}\n\n/** @returns a sweep of the representable values for element type of @p type */\nexport function fullRangeForType(type: Type) {\n  switch (elementType(type)?.kind) {\n    case 'abstract-float':\n      return fullF64Range();\n    case 'f32':\n      return fullF32Range();\n    case 'f16':\n      return fullF16Range();\n    case 'i32':\n      return linearRange(kValue.i32.negative.min, kValue.i32.positive.max, 50).map(f =>\n        Math.floor(f)\n      );\n    case 'u32':\n      return linearRange(0, kValue.u32.max, 50).map(f => Math.floor(f));\n  }\n  unreachable();\n}\n\n/** @returns all the values in the provided arrays with duplicates removed */\nexport function unique<T>(...arrays: Array<readonly T[]>): T[] {\n  const set = new Set<T>();\n  for (const arr of arrays) {\n    for (const item of arr) {\n      set.add(item);\n    }\n  }\n  return [...set];\n}\n"],"mappings":"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"}