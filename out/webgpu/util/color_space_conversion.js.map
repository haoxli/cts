{"version":3,"sources":["../../../src/webgpu/util/color_space_conversion.ts"],"names":["assert","multiplyMatrices","lin_sRGB","RGB","map","val","sign","abs","Math","pow","gam_sRGB","lin_sRGB_to_XYZ","rgb","M","XYZ_to_lin_sRGB","XYZ","lin_P3","gam_P3","lin_P3_to_XYZ","XYZ_to_lin_P3","displayP3ToSrgb","pixel","R","undefined","G","B","rgbVec","rgbMatrix","srgbToDisplayP3"],"mappings":"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","sourcesContent":["import { assert } from '../../common/util/util.js';\n\nimport { multiplyMatrices } from './math.js';\n\n// These color space conversion function definitions are copied directly from\n// CSS Color Module Level 4 Sample Code: https://drafts.csswg.org/css-color/#color-conversion-code\n\n// Sample code for color conversions\n// Conversion can also be done using ICC profiles and a Color Management System\n// For clarity, a library is used for matrix multiplication (multiply-matrices.js)\n\n// sRGB-related functions\n\n/**\n * convert an array of sRGB values\n * where in-gamut values are in the range [0 - 1]\n * to linear light (un-companded) form.\n * https://en.wikipedia.org/wiki/SRGB\n * Extended transfer function:\n * for negative values,  linear portion is extended on reflection of axis,\n * then reflected power function is used.\n */\nfunction lin_sRGB(RGB: Array<number>) {\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs < 0.04045) {\n      return val / 12.92;\n    }\n\n    return sign * Math.pow((abs + 0.055) / 1.055, 2.4);\n  });\n}\n\n/**\n * convert an array of linear-light sRGB values in the range 0.0-1.0\n * to gamma corrected form\n * https://en.wikipedia.org/wiki/SRGB\n * Extended transfer function:\n * For negative values, linear portion extends on reflection\n * of axis, then uses reflected pow below that\n */\nfunction gam_sRGB(RGB: Array<number>) {\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs > 0.0031308) {\n      return sign * (1.055 * Math.pow(abs, 1 / 2.4) - 0.055);\n    }\n\n    return 12.92 * val;\n  });\n}\n\n/**\n * convert an array of linear-light sRGB values to CIE XYZ\n * using sRGB's own white, D65 (no chromatic adaptation)\n */\nfunction lin_sRGB_to_XYZ(rgb: Array<Array<number>>) {\n  const M = [\n    [0.41239079926595934, 0.357584339383878, 0.1804807884018343],\n    [0.21263900587151027, 0.715168678767756, 0.07219231536073371],\n    [0.01933081871559182, 0.11919477979462598, 0.9505321522496607],\n  ];\n  return multiplyMatrices(M, rgb);\n}\n\n/**\n * convert XYZ to linear-light sRGB\n * using sRGB's own white, D65 (no chromatic adaptation)\n */\nfunction XYZ_to_lin_sRGB(XYZ: Array<Array<number>>) {\n  const M = [\n    [3.2409699419045226, -1.537383177570094, -0.4986107602930034],\n    [-0.9692436362808796, 1.8759675015077202, 0.04155505740717559],\n    [0.05563007969699366, -0.20397695888897652, 1.0569715142428786],\n  ];\n\n  return multiplyMatrices(M, XYZ);\n}\n\n//  display-p3-related functions\n\n/**\n * convert an array of display-p3 RGB values in the range 0.0 - 1.0\n * to linear light (un-companded) form.\n */\nfunction lin_P3(RGB: Array<number>) {\n  return lin_sRGB(RGB); // same as sRGB\n}\n\n/**\n * convert an array of linear-light display-p3 RGB  in the range 0.0-1.0\n * to gamma corrected form\n */\nfunction gam_P3(RGB: Array<number>) {\n  return gam_sRGB(RGB); // same as sRGB\n}\n\n/**\n * convert an array of linear-light display-p3 values to CIE XYZ\n * using display-p3's D65 (no chromatic adaptation)\n * http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n */\nfunction lin_P3_to_XYZ(rgb: Array<Array<number>>) {\n  const M = [\n    [0.4865709486482162, 0.26566769316909306, 0.1982172852343625],\n    [0.2289745640697488, 0.6917385218365064, 0.079286914093745],\n    [0.0, 0.04511338185890264, 1.043944368900976],\n  ];\n  // 0 was computed as -3.972075516933488e-17\n\n  return multiplyMatrices(M, rgb);\n}\n\n/**\n * convert XYZ to linear-light P3\n * using display-p3's own white, D65 (no chromatic adaptation)\n */\nfunction XYZ_to_lin_P3(XYZ: Array<Array<number>>) {\n  const M = [\n    [2.493496911941425, -0.9313836179191239, -0.40271078445071684],\n    [-0.8294889695615747, 1.7626640603183463, 0.023624685841943577],\n    [0.03584583024378447, -0.07617238926804182, 0.9568845240076872],\n  ];\n\n  return multiplyMatrices(M, XYZ);\n}\n\n/**\n * @returns the converted pixels in {R: number, G: number, B: number, A: number}.\n *\n * Follow conversion steps in CSS Color Module Level 4\n * https://drafts.csswg.org/css-color/#predefined-to-predefined\n * display-p3 and sRGB share the same white points.\n */\nexport function displayP3ToSrgb(pixel: {\n  R: number;\n  G: number;\n  B: number;\n  A: number;\n}): { R: number; G: number; B: number; A: number } {\n  assert(\n    pixel.R !== undefined && pixel.G !== undefined && pixel.B !== undefined,\n    'color space conversion requires all of R, G and B components'\n  );\n\n  let rgbVec = [pixel.R, pixel.G, pixel.B];\n  rgbVec = lin_P3(rgbVec);\n  let rgbMatrix = [[rgbVec[0]], [rgbVec[1]], [rgbVec[2]]];\n  rgbMatrix = XYZ_to_lin_sRGB(lin_P3_to_XYZ(rgbMatrix));\n  rgbVec = [rgbMatrix[0][0], rgbMatrix[1][0], rgbMatrix[2][0]];\n  rgbVec = gam_sRGB(rgbVec);\n\n  pixel.R = rgbVec[0];\n  pixel.G = rgbVec[1];\n  pixel.B = rgbVec[2];\n\n  return pixel;\n}\n/**\n * @returns the converted pixels in {R: number, G: number, B: number, A: number}.\n *\n * Follow conversion steps in CSS Color Module Level 4\n * https://drafts.csswg.org/css-color/#predefined-to-predefined\n * display-p3 and sRGB share the same white points.\n */\nexport function srgbToDisplayP3(pixel: {\n  R: number;\n  G: number;\n  B: number;\n  A: number;\n}): { R: number; G: number; B: number; A: number } {\n  assert(\n    pixel.R !== undefined && pixel.G !== undefined && pixel.B !== undefined,\n    'color space conversion requires all of R, G and B components'\n  );\n\n  let rgbVec = [pixel.R, pixel.G, pixel.B];\n  rgbVec = lin_sRGB(rgbVec);\n  let rgbMatrix = [[rgbVec[0]], [rgbVec[1]], [rgbVec[2]]];\n  rgbMatrix = XYZ_to_lin_P3(lin_sRGB_to_XYZ(rgbMatrix));\n  rgbVec = [rgbMatrix[0][0], rgbMatrix[1][0], rgbMatrix[2][0]];\n  rgbVec = gam_P3(rgbVec);\n\n  pixel.R = rgbVec[0];\n  pixel.G = rgbVec[1];\n  pixel.B = rgbVec[2];\n\n  return pixel;\n}\n"],"file":"color_space_conversion.js"}