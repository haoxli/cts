{"version":3,"sources":["../../src/unittests/loaders_and_trees.spec.ts"],"names":["description","TestFileLoader","Logger","TestQuerySingleCase","TestQueryMultiCase","TestQueryMultiTest","TestQueryMultiFile","makeTestGroup","makeTestGroupForUnitTesting","assert","objectEquals","UnitTest","listingData","suite1","file","readme","suite2","specsData","g","test","fn","params","x","a","b","_c","t","debug","fail","FakeTestFileLoader","listing","suite","import","path","LoadingTest","load","filter","Array","from","loader","loadTests","loadNames","map","c","query","toString","shouldReject","expect","length","s","l","log","exp","i","status","logs","name","rec","res","record","run","results","get","timems","undefined","JSON","stringify","startsWith","indexOf","testIterateCollapsed","expectations","expectedResult","treePromise","loadTree","tree","actual","iterateCollapsedQueries","q","join"],"mappings":"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","sourcesContent":["export const description = `\nTests for queries/filtering, loading, and running.\n`;\n\nimport { TestFileLoader, SpecFile } from '../common/framework/file_loader.js';\nimport { Logger } from '../common/framework/logging/logger.js';\nimport { Status } from '../common/framework/logging/result.js';\nimport {\n  TestQuery,\n  TestQuerySingleCase,\n  TestQueryMultiCase,\n  TestQueryMultiTest,\n  TestQueryMultiFile,\n} from '../common/framework/query/query.js';\nimport { makeTestGroup, makeTestGroupForUnitTesting } from '../common/framework/test_group.js';\nimport { TestSuiteListing, TestSuiteListingEntry } from '../common/framework/test_suite_listing.js';\nimport { TestTreeLeaf } from '../common/framework/tree.js';\nimport { assert, objectEquals } from '../common/framework/util/util.js';\n\nimport { UnitTest } from './unit_test.js';\n\nconst listingData: { [k: string]: TestSuiteListingEntry[] } = {\n  suite1: [\n    { file: [], readme: 'desc 1a' },\n    { file: ['foo'], description: 'desc 1b' },\n    { file: ['bar'], readme: 'desc 1c' },\n    { file: ['bar', 'buzz', 'buzz'], description: 'desc 1d' },\n    { file: ['baz'], description: 'desc 1e' },\n  ],\n  suite2: [\n    { file: [], readme: 'desc 2a' },\n    { file: ['foof'], description: 'desc 2b' },\n  ],\n};\n\nconst specsData: { [k: string]: SpecFile } = {\n  'suite1/foo.spec.js': {\n    description: 'desc 1b',\n    g: (() => {\n      const g = makeTestGroupForUnitTesting(UnitTest);\n      g.test('hello').fn(() => {});\n      g.test('bonjour').fn(() => {});\n      g.test('hola').fn(() => {});\n      return g;\n    })(),\n  },\n  'suite1/bar/biz.spec.js': {\n    description: 'desc 1f',\n    g: makeTestGroupForUnitTesting(UnitTest),\n  },\n  'suite1/bar/bez.spec.js': {\n    description: 'desc 1g',\n    g: makeTestGroupForUnitTesting(UnitTest),\n  },\n  'suite1/bar/buzz/buzz.spec.js': {\n    description: 'desc 1d',\n    g: (() => {\n      const g = makeTestGroupForUnitTesting(UnitTest);\n      g.test('zap').fn(() => {});\n      return g;\n    })(),\n  },\n  'suite1/baz.spec.js': {\n    description: 'desc 1e',\n    g: (() => {\n      const g = makeTestGroupForUnitTesting(UnitTest);\n      g.test('wye')\n        .params([{}, { x: 1 }])\n        .fn(() => {});\n      g.test('zed')\n        .params([\n          { a: 1, b: 2, _c: 0 },\n          { b: 3, a: 1, _c: 0 },\n        ])\n        .fn(() => {});\n      return g;\n    })(),\n  },\n  'suite2/foof.spec.js': {\n    description: 'desc 2b',\n    g: (() => {\n      const g = makeTestGroupForUnitTesting(UnitTest);\n      g.test('blah').fn(t => {\n        t.debug('OK');\n      });\n      g.test('bleh')\n        .params([{ a: 1 }])\n        .fn(t => {\n          t.debug('OK');\n          t.debug('OK');\n        });\n      g.test('bluh,a').fn(t => {\n        t.fail('bye');\n      });\n      return g;\n    })(),\n  },\n};\n\nclass FakeTestFileLoader extends TestFileLoader {\n  async listing(suite: string): Promise<TestSuiteListing> {\n    return listingData[suite];\n  }\n\n  async import(path: string): Promise<SpecFile> {\n    assert(path in specsData, '[test] mock file ' + path + ' does not exist');\n    return specsData[path];\n  }\n}\n\nclass LoadingTest extends UnitTest {\n  static readonly loader = new FakeTestFileLoader();\n\n  async load(filter: string): Promise<TestTreeLeaf[]> {\n    return Array.from(await LoadingTest.loader.loadTests(filter));\n  }\n\n  async loadNames(filter: string): Promise<string[]> {\n    return (await this.load(filter)).map(c => c.query.toString());\n  }\n}\n\nexport const g = makeTestGroup(LoadingTest);\n\ng.test('suite').fn(async t => {\n  t.shouldReject('Error', t.load('suite1'));\n  t.shouldReject('Error', t.load('suite1:'));\n});\n\ng.test('group').fn(async t => {\n  t.expect((await t.load('suite1:*')).length === 8);\n  t.expect((await t.load('suite1:foo,*')).length === 3); // x:foo,* matches x:foo:\n  t.expect((await t.load('suite1:bar,*')).length === 1);\n  t.expect((await t.load('suite1:bar,buzz,buzz,*')).length === 1);\n\n  t.shouldReject('Error', t.load('suite1:f*'));\n\n  {\n    const s = new TestQueryMultiFile('suite1', ['bar', 'buzz']).toString();\n    t.expect((await t.load(s)).length === 1);\n  }\n});\n\ng.test('test').fn(async t => {\n  t.shouldReject('Error', t.load('suite1::'));\n  t.shouldReject('Error', t.load('suite1:bar:'));\n  t.shouldReject('Error', t.load('suite1:bar,:'));\n\n  t.shouldReject('Error', t.load('suite1::*'));\n  t.shouldReject('Error', t.load('suite1:bar,:*'));\n  t.shouldReject('Error', t.load('suite1:bar:*'));\n\n  t.expect((await t.load('suite1:foo:*')).length === 3);\n  t.expect((await t.load('suite1:bar,buzz,buzz:*')).length === 1);\n  t.expect((await t.load('suite1:baz:*')).length === 4);\n\n  t.expect((await t.load('suite2:foof:bluh,*')).length === 1);\n  t.expect((await t.load('suite2:foof:bluh,a,*')).length === 1);\n\n  {\n    const s = new TestQueryMultiTest('suite2', ['foof'], ['bluh']).toString();\n    t.expect((await t.load(s)).length === 1);\n  }\n});\n\ng.test('case').fn(async t => {\n  t.shouldReject('Error', t.load('suite1:foo::'));\n  t.shouldReject('Error', t.load('suite1:bar:zed,:'));\n\n  t.shouldReject('Error', t.load('suite1:foo:h*'));\n\n  t.shouldReject('Error', t.load('suite1:foo::*'));\n  t.shouldReject('Error', t.load('suite1:baz::*'));\n  t.shouldReject('Error', t.load('suite1:baz:zed,:*'));\n\n  t.shouldReject('Error', t.load('suite1:baz:zed:'));\n  t.shouldReject('Error', t.load('suite1:baz:zed:a=1;b=2*'));\n  t.shouldReject('Error', t.load('suite1:baz:zed:a=1;b=2;'));\n  t.shouldReject('SyntaxError', t.load('suite1:baz:zed:a=1;b=2,')); // tries to parse '2,' as JSON\n  t.shouldReject('Error', t.load('suite1:baz:zed:a=1,b=2')); // '=' not allowed in value '1,b=2'\n  t.shouldReject('Error', t.load('suite1:baz:zed:b=2*'));\n  t.shouldReject('Error', t.load('suite1:baz:zed:b=2;a=1;_c=0'));\n  t.shouldReject('Error', t.load('suite1:baz:zed:a=1,*'));\n\n  t.expect((await t.load('suite1:baz:zed:*')).length === 2);\n  t.expect((await t.load('suite1:baz:zed:a=1;*')).length === 2);\n  t.expect((await t.load('suite1:baz:zed:a=1;b=2')).length === 1);\n  t.expect((await t.load('suite1:baz:zed:a=1;b=2;*')).length === 1);\n  t.expect((await t.load('suite1:baz:zed:b=2;*')).length === 1);\n  t.expect((await t.load('suite1:baz:zed:b=2;a=1')).length === 1);\n  t.expect((await t.load('suite1:baz:zed:b=2;a=1;*')).length === 1);\n  t.expect((await t.load('suite1:baz:zed:b=3;a=1')).length === 1);\n  t.expect((await t.load('suite1:baz:zed:a=1;b=3')).length === 1);\n  t.expect((await t.load('suite1:foo:hello:')).length === 1);\n\n  {\n    const s = new TestQueryMultiCase('suite1', ['baz'], ['zed'], { a: 1, b: 2 }).toString();\n    t.expect((await t.load(s)).length === 1);\n  }\n  {\n    const s = new TestQuerySingleCase('suite1', ['baz'], ['zed'], { a: 1, b: 2 }).toString();\n    t.expect((await t.load(s)).length === 1);\n  }\n});\n\ng.test('end2end').fn(async t => {\n  const l = await t.load('suite2:foof:*');\n  assert(l.length === 3, 'listing length');\n\n  const log = new Logger(true);\n\n  const exp = async (\n    i: number,\n    query: TestQuery,\n    status: Status,\n    logs: (s: string[]) => boolean\n  ) => {\n    t.expect(objectEquals(l[i].query, query));\n    const name = l[i].query.toString();\n    const [rec, res] = log.record(name);\n    await l[i].run(rec);\n\n    t.expect(log.results.get(name) === res);\n    t.expect(res.status === status);\n    t.expect(res.timems > 0);\n    assert(res.logs !== undefined); // only undefined while pending\n    t.expect(logs(res.logs.map(l => JSON.stringify(l))));\n  };\n\n  await exp(0, new TestQuerySingleCase('suite2', ['foof'], ['blah'], {}), 'pass', logs =>\n    objectEquals(logs, ['\"DEBUG: OK\"'])\n  );\n  await exp(1, new TestQuerySingleCase('suite2', ['foof'], ['bleh'], { a: 1 }), 'pass', logs =>\n    objectEquals(logs, ['\"DEBUG: OK\"', '\"DEBUG: OK\"'])\n  );\n  await exp(\n    2,\n    new TestQuerySingleCase('suite2', ['foof'], ['bluh', 'a'], {}),\n    'fail',\n    logs =>\n      logs.length === 1 &&\n      logs[0].startsWith('\"FAIL: Error: bye\\\\n') &&\n      logs[0].indexOf('loaders_and_trees.spec.') !== -1\n  );\n});\n\nasync function testIterateCollapsed(\n  t: LoadingTest,\n  expectations: string[],\n  expectedResult: 'throws' | string[]\n) {\n  const treePromise = LoadingTest.loader.loadTree('suite1:*', expectations);\n  if (expectedResult === 'throws') {\n    t.shouldReject('Error', treePromise, 'loadTree should have thrown Error');\n    return;\n  }\n  const tree = await treePromise;\n  const actual = Array.from(tree.iterateCollapsedQueries(), q => q.toString());\n  if (!objectEquals(actual, expectedResult)) {\n    t.fail(\n      `iterateCollapsed failed:\n  got [${actual.join(', ')}]\n  exp [${expectedResult.join(', ')}]\n${tree.toString()}`\n    );\n  }\n}\n\ng.test('print').fn(async () => {\n  const tree = await LoadingTest.loader.loadTree('suite1:*');\n  tree.toString();\n});\n\ng.test('iterateCollapsed').fn(async t => {\n  // No effect\n  await testIterateCollapsed(t, [], ['suite1:foo:*', 'suite1:bar,buzz,buzz:*', 'suite1:baz:*']);\n  await testIterateCollapsed(\n    t,\n    ['suite1:*'],\n    ['suite1:foo:*', 'suite1:bar,buzz,buzz:*', 'suite1:baz:*']\n  );\n  await testIterateCollapsed(\n    t,\n    ['suite1:foo:*'],\n    ['suite1:foo:*', 'suite1:bar,buzz,buzz:*', 'suite1:baz:*']\n  );\n  await testIterateCollapsed(\n    t,\n    ['suite1:bar,buzz,buzz:*'],\n    ['suite1:foo:*', 'suite1:bar,buzz,buzz:*', 'suite1:baz:*']\n  );\n\n  // Some effect\n  await testIterateCollapsed(\n    t,\n    ['suite1:baz:wye:*'],\n    ['suite1:foo:*', 'suite1:bar,buzz,buzz:*', 'suite1:baz:wye:*', 'suite1:baz:zed,*']\n  );\n  await testIterateCollapsed(\n    t,\n    ['suite1:baz:zed:*'],\n    ['suite1:foo:*', 'suite1:bar,buzz,buzz:*', 'suite1:baz:wye,*', 'suite1:baz:zed:*']\n  );\n  await testIterateCollapsed(\n    t,\n    ['suite1:baz:wye:*', 'suite1:baz:zed:*'],\n    ['suite1:foo:*', 'suite1:bar,buzz,buzz:*', 'suite1:baz:wye:*', 'suite1:baz:zed:*']\n  );\n  await testIterateCollapsed(\n    t,\n    ['suite1:baz:wye:'],\n    [\n      'suite1:foo:*',\n      'suite1:bar,buzz,buzz:*',\n      'suite1:baz:wye:',\n      'suite1:baz:wye:x=1;*',\n      'suite1:baz:zed,*',\n    ]\n  );\n  await testIterateCollapsed(\n    t,\n    ['suite1:baz:wye:x=1'],\n    [\n      'suite1:foo:*',\n      'suite1:bar,buzz,buzz:*',\n      'suite1:baz:wye:',\n      'suite1:baz:wye:x=1',\n      'suite1:baz:zed,*',\n    ]\n  );\n  await testIterateCollapsed(\n    t,\n    ['suite1:foo:*', 'suite1:baz:wye:'],\n    [\n      'suite1:foo:*',\n      'suite1:bar,buzz,buzz:*',\n      'suite1:baz:wye:',\n      'suite1:baz:wye:x=1;*',\n      'suite1:baz:zed,*',\n    ]\n  );\n\n  // Invalid expectation queries\n  await testIterateCollapsed(t, ['garbage'], 'throws');\n  await testIterateCollapsed(t, ['garbage*'], 'throws');\n  await testIterateCollapsed(t, ['suite1*'], 'throws');\n  await testIterateCollapsed(t, ['suite1:foo*'], 'throws');\n  await testIterateCollapsed(t, ['suite1:foo:ba*'], 'throws');\n\n  // Valid expectation queries but they don't match anything\n  await testIterateCollapsed(t, ['garbage:*'], 'throws');\n  await testIterateCollapsed(t, ['suite1:doesntexist:*'], 'throws');\n  await testIterateCollapsed(t, ['suite2:foo:*'], 'throws');\n  // Doesn't match anything because we collapse this unnecessary node into just 'suite1:foo:*'\n  await testIterateCollapsed(t, ['suite1:foo,*'], 'throws');\n});\n"],"file":"loaders_and_trees.spec.js"}