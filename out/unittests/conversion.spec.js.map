{"version":3,"sources":["../../src/unittests/conversion.spec.ts"],"names":["description","makeTestGroup","objectEquals","kValue","bool","f16Bits","f32","f32Bits","float16BitsToFloat32","float32ToFloat16Bits","float32ToFloatBits","floatBitsToNormalULPFromZero","floatBitsToNumber","i32","kFloat16Format","kFloat32Format","pack2x16float","pack2x16snorm","pack2x16unorm","pack4x8snorm","pack4x8unorm","u32","vec2","vec3","vec4","UnitTest","g","cases","test","fn","t","bits","number","actual","expect","Math","abs","toString","paramsSubcasesOnly","u","combine","signed","exponentBits","mantissaBits","params","bias","value","reconstituted","ulpFromZero","testThrows","b","shouldThrow","got","wgsl","type","elements","paramsSimple","inputs","result","subnormal","positive","max","negative","min","f16","undefined","data","map","d","got_str","expect_str","sort"],"mappings":"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","sourcesContent":["export const description = `Unit tests for conversion`;\n\nimport { makeTestGroup } from '../common/internal/test_group.js';\nimport { objectEquals } from '../common/util/util.js';\nimport { kValue } from '../webgpu/util/constants.js';\nimport {\n  bool,\n  f16Bits,\n  f32,\n  f32Bits,\n  float16BitsToFloat32,\n  float32ToFloat16Bits,\n  float32ToFloatBits,\n  floatBitsToNormalULPFromZero,\n  floatBitsToNumber,\n  i32,\n  kFloat16Format,\n  kFloat32Format,\n  pack2x16float,\n  pack2x16snorm,\n  pack2x16unorm,\n  pack4x8snorm,\n  pack4x8unorm,\n  Scalar,\n  u32,\n  vec2,\n  vec3,\n  vec4,\n  Vector,\n} from '../webgpu/util/conversion.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(UnitTest);\n\nconst cases = [\n  [0b0_01111_0000000000, 1],\n  [0b0_00001_0000000000, 0.00006103515625],\n  [0b0_01101_0101010101, 0.33325195],\n  [0b0_11110_1111111111, 65504],\n  [0b0_00000_0000000000, 0],\n  [0b0_01110_0000000000, 0.5],\n  [0b0_01100_1001100110, 0.1999512],\n  [0b0_01111_0000000001, 1.00097656],\n  [0b0_10101_1001000000, 100],\n  [0b1_01100_1001100110, -0.1999512],\n  [0b1_10101_1001000000, -100],\n];\n\ng.test('float16BitsToFloat32').fn(t => {\n  for (const [bits, number] of [\n    ...cases,\n    [0b1_00000_0000000000, -0], // (resulting sign is not actually tested)\n    [0b0_00000_1111111111, 0.00006104], // subnormal f16 input\n    [0b1_00000_1111111111, -0.00006104],\n  ]) {\n    const actual = float16BitsToFloat32(bits);\n    t.expect(\n      // some loose check\n      Math.abs(actual - number) <= 0.00001,\n      `for ${bits.toString(2)}, expected ${number}, got ${actual}`\n    );\n  }\n});\n\ng.test('float32ToFloat16Bits').fn(t => {\n  for (const [bits, number] of [\n    ...cases,\n    [0b0_00000_0000000000, 0.00001], // input that becomes subnormal in f16 is rounded to 0\n    [0b1_00000_0000000000, -0.00001], // and sign is preserved\n  ]) {\n    // some loose check\n    const actual = float32ToFloat16Bits(number);\n    t.expect(\n      Math.abs(actual - bits) <= 1,\n      `for ${number}, expected ${bits.toString(2)}, got ${actual.toString(2)}`\n    );\n  }\n});\n\ng.test('float32ToFloatBits_floatBitsToNumber')\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('signed', [0, 1] as const)\n      .combine('exponentBits', [5, 8])\n      .combine('mantissaBits', [10, 23])\n  )\n  .fn(t => {\n    const { signed, exponentBits, mantissaBits } = t.params;\n    const bias = (1 << (exponentBits - 1)) - 1;\n\n    for (const [, value] of cases) {\n      if (value < 0 && signed === 0) continue;\n      const bits = float32ToFloatBits(value, signed, exponentBits, mantissaBits, bias);\n      const reconstituted = floatBitsToNumber(bits, { signed, exponentBits, mantissaBits, bias });\n      t.expect(Math.abs(reconstituted - value) <= 0.0000001, `${reconstituted} vs ${value}`);\n    }\n  });\n\ng.test('floatBitsToULPFromZero,16').fn(t => {\n  const test = (bits: number, ulpFromZero: number) =>\n    t.expect(floatBitsToNormalULPFromZero(bits, kFloat16Format) === ulpFromZero, bits.toString(2));\n  // Zero\n  test(0b0_00000_0000000000, 0);\n  // Subnormal\n  test(0b0_00000_0000000001, 0);\n  test(0b1_00000_0000000001, 0);\n  test(0b0_00000_1111111111, 0);\n  test(0b1_00000_1111111111, 0);\n  // Normal\n  test(0b0_00001_0000000000, 1); // 0 + 1ULP\n  test(0b1_00001_0000000000, -1); // 0 - 1ULP\n  test(0b0_00001_0000000001, 2); // 0 + 2ULP\n  test(0b1_00001_0000000001, -2); // 0 - 2ULP\n  test(0b0_01110_0000000000, 0b01101_0000000001); // 0.5\n  test(0b1_01110_0000000000, -0b01101_0000000001); // -0.5\n  test(0b0_01110_1111111110, 0b01101_1111111111); // 1.0 - 2ULP\n  test(0b1_01110_1111111110, -0b01101_1111111111); // -(1.0 - 2ULP)\n  test(0b0_01110_1111111111, 0b01110_0000000000); // 1.0 - 1ULP\n  test(0b1_01110_1111111111, -0b01110_0000000000); // -(1.0 - 1ULP)\n  test(0b0_01111_0000000000, 0b01110_0000000001); // 1.0\n  test(0b1_01111_0000000000, -0b01110_0000000001); // -1.0\n  test(0b0_01111_0000000001, 0b01110_0000000010); // 1.0 + 1ULP\n  test(0b1_01111_0000000001, -0b01110_0000000010); // -(1.0 + 1ULP)\n  test(0b0_10000_0000000000, 0b01111_0000000001); // 2.0\n  test(0b1_10000_0000000000, -0b01111_0000000001); // -2.0\n\n  const testThrows = (b: number) =>\n    t.shouldThrow('Error', () => floatBitsToNormalULPFromZero(b, kFloat16Format));\n  // Infinity\n  testThrows(0b0_11111_0000000000);\n  testThrows(0b1_11111_0000000000);\n  // NaN\n  testThrows(0b0_11111_1111111111);\n  testThrows(0b1_11111_1111111111);\n});\n\ng.test('floatBitsToULPFromZero,32').fn(t => {\n  const test = (bits: number, ulpFromZero: number) =>\n    t.expect(floatBitsToNormalULPFromZero(bits, kFloat32Format) === ulpFromZero, bits.toString(2));\n  // Zero\n  test(0b0_00000000_00000000000000000000000, 0);\n  // Subnormal\n  test(0b0_00000000_00000000000000000000001, 0);\n  test(0b1_00000000_00000000000000000000001, 0);\n  test(0b0_00000000_11111111111111111111111, 0);\n  test(0b1_00000000_11111111111111111111111, 0);\n  // Normal\n  test(0b0_00000001_00000000000000000000000, 1); // 0 + 1ULP\n  test(0b1_00000001_00000000000000000000000, -1); // 0 - 1ULP\n  test(0b0_00000001_00000000000000000000001, 2); // 0 + 2ULP\n  test(0b1_00000001_00000000000000000000001, -2); // 0 - 2ULP\n  test(0b0_01111110_00000000000000000000000, 0b01111101_00000000000000000000001); // 0.5\n  test(0b1_01111110_00000000000000000000000, -0b01111101_00000000000000000000001); // -0.5\n  test(0b0_01111110_11111111111111111111110, 0b01111101_11111111111111111111111); // 1.0 - 2ULP\n  test(0b1_01111110_11111111111111111111110, -0b01111101_11111111111111111111111); // -(1.0 - 2ULP)\n  test(0b0_01111110_11111111111111111111111, 0b01111110_00000000000000000000000); // 1.0 - 1ULP\n  test(0b1_01111110_11111111111111111111111, -0b01111110_00000000000000000000000); // -(1.0 - 1ULP)\n  test(0b0_01111111_00000000000000000000000, 0b01111110_00000000000000000000001); // 1.0\n  test(0b1_01111111_00000000000000000000000, -0b01111110_00000000000000000000001); // -1.0\n  test(0b0_01111111_00000000000000000000001, 0b01111110_00000000000000000000010); // 1.0 + 1ULP\n  test(0b1_01111111_00000000000000000000001, -0b01111110_00000000000000000000010); // -(1.0 + 1ULP)\n  test(0b0_11110000_00000000000000000000000, 0b11101111_00000000000000000000001); // 2.0\n  test(0b1_11110000_00000000000000000000000, -0b11101111_00000000000000000000001); // -2.0\n\n  const testThrows = (b: number) =>\n    t.shouldThrow('Error', () => floatBitsToNormalULPFromZero(b, kFloat32Format));\n  // Infinity\n  testThrows(0b0_11111111_00000000000000000000000);\n  testThrows(0b1_11111111_00000000000000000000000);\n  // NaN\n  testThrows(0b0_11111111_11111111111111111111111);\n  testThrows(0b0_11111111_00000000000000000000001);\n  testThrows(0b1_11111111_11111111111111111111111);\n  testThrows(0b1_11111111_00000000000000000000001);\n});\n\ng.test('scalarWGSL').fn(t => {\n  const cases: Array<[Scalar, string]> = [\n    [f32(0.0), '0.0f'],\n    [f32(1.0), '1.0f'],\n    [f32(-1.0), '-1.0f'],\n    [f32Bits(0x70000000), '1.5845632502852868e+29f'],\n    [f32Bits(0xf0000000), '-1.5845632502852868e+29f'],\n    [f16Bits(0), '0.0h'],\n    [f16Bits(0x3c00), '1.0h'],\n    [f16Bits(0xbc00), '-1.0h'],\n    [u32(0), '0u'],\n    [u32(1), '1u'],\n    [u32(2000000000), '2000000000u'],\n    [u32(-1), '4294967295u'],\n    [i32(0), 'i32(0)'],\n    [i32(1), 'i32(1)'],\n    [i32(-1), 'i32(-1)'],\n    [bool(true), 'true'],\n    [bool(false), 'false'],\n  ];\n  for (const [value, expect] of cases) {\n    const got = value.wgsl();\n    t.expect(\n      got === expect,\n      `[value: ${value.value}, type: ${value.type}]\ngot:    ${got}\nexpect: ${expect}`\n    );\n  }\n});\n\ng.test('vectorWGSL').fn(t => {\n  const cases: Array<[Vector, string]> = [\n    [vec2(f32(42.0), f32(24.0)), 'vec2(42.0f, 24.0f)'],\n    [vec2(f16Bits(0x5140), f16Bits(0x4e00)), 'vec2(42.0h, 24.0h)'],\n    [vec2(u32(42), u32(24)), 'vec2(42u, 24u)'],\n    [vec2(i32(42), i32(24)), 'vec2(i32(42), i32(24))'],\n    [vec2(bool(false), bool(true)), 'vec2(false, true)'],\n\n    [vec3(f32(0.0), f32(1.0), f32(-1.0)), 'vec3(0.0f, 1.0f, -1.0f)'],\n    [vec3(f16Bits(0), f16Bits(0x3c00), f16Bits(0xbc00)), 'vec3(0.0h, 1.0h, -1.0h)'],\n    [vec3(u32(0), u32(1), u32(-1)), 'vec3(0u, 1u, 4294967295u)'],\n    [vec3(i32(0), i32(1), i32(-1)), 'vec3(i32(0), i32(1), i32(-1))'],\n    [vec3(bool(true), bool(false), bool(true)), 'vec3(true, false, true)'],\n\n    [vec4(f32(1.0), f32(-2.0), f32(4.0), f32(-8.0)), 'vec4(1.0f, -2.0f, 4.0f, -8.0f)'],\n    [\n      vec4(f16Bits(0xbc00), f16Bits(0x4000), f16Bits(0xc400), f16Bits(0x4800)),\n      'vec4(-1.0h, 2.0h, -4.0h, 8.0h)',\n    ],\n    [vec4(u32(1), u32(-2), u32(4), u32(-8)), 'vec4(1u, 4294967294u, 4u, 4294967288u)'],\n    [vec4(i32(1), i32(-2), i32(4), i32(-8)), 'vec4(i32(1), i32(-2), i32(4), i32(-8))'],\n    [vec4(bool(false), bool(true), bool(true), bool(false)), 'vec4(false, true, true, false)'],\n  ];\n  for (const [value, expect] of cases) {\n    const got = value.wgsl();\n    t.expect(\n      got === expect,\n      `[values: ${value.elements}, type: ${value.type}]\ngot:    ${got}\nexpect: ${expect}`\n    );\n  }\n});\n\ng.test('pack2x16float')\n  .paramsSimple([\n    // f16 normals\n    { inputs: [0, 0], result: [0x00000000, 0x80000000, 0x00008000, 0x80008000] },\n    { inputs: [1, 0], result: [0x00003c00, 0x80003c00] },\n    { inputs: [1, 1], result: [0x3c003c00] },\n    { inputs: [-1, -1], result: [0xbc00bc00] },\n    { inputs: [10, 1], result: [0x3c004900] },\n    { inputs: [-10, 1], result: [0x3c00c900] },\n\n    // f32 normal, but not f16 precise\n    { inputs: [1.00000011920928955078125, 1], result: [0x3c003c00, 0x3c003c01] },\n\n    // f32 subnormals\n    // prettier-ignore\n    { inputs: [kValue.f32.subnormal.positive.max, 1], result: [0x3c000000, 0x3c008000, 0x3c000001] },\n    // prettier-ignore\n    { inputs: [kValue.f32.subnormal.negative.min, 1], result: [0x3c008001, 0x3c000000, 0x3c008000] },\n\n    // f16 subnormals\n    // prettier-ignore\n    { inputs: [kValue.f16.subnormal.positive.max, 1], result: [0x3c0003ff, 0x3c000000, 0x3c008000] },\n    // prettier-ignore\n    { inputs: [kValue.f16.subnormal.negative.min, 1], result: [0x03c0083ff, 0x3c000000, 0x3c008000] },\n\n    // f16 out of bounds\n    { inputs: [kValue.f16.positive.max + 1, 1], result: [undefined] },\n    { inputs: [kValue.f16.negative.min - 1, 1], result: [undefined] },\n    { inputs: [1, kValue.f16.positive.max + 1], result: [undefined] },\n    { inputs: [1, kValue.f16.negative.min - 1], result: [undefined] },\n  ] as const)\n  .fn(test => {\n    const toString = (data: readonly (undefined | number)[]): String[] => {\n      return data.map(d => (d !== undefined ? u32(d).toString() : 'undefined'));\n    };\n\n    const inputs = test.params.inputs;\n    const got = pack2x16float(inputs[0], inputs[1]);\n    const expect = test.params.result;\n\n    const got_str = toString(got);\n    const expect_str = toString(expect);\n\n    // Using strings of the outputs, so they can be easily sorted, since order of the results doesn't matter.\n    test.expect(\n      objectEquals(got_str.sort(), expect_str.sort()),\n      `pack2x16float(${inputs}) returned [${got_str}]. Expected [${expect_str}]`\n    );\n  });\n\ng.test('pack2x16snorm')\n  .paramsSimple([\n    // Normals\n    { inputs: [0, 0], result: 0x00000000 },\n    { inputs: [1, 0], result: 0x00007fff },\n    { inputs: [0, 1], result: 0x7fff0000 },\n    { inputs: [1, 1], result: 0x7fff7fff },\n    { inputs: [-1, -1], result: 0x80018001 },\n    { inputs: [10, 10], result: 0x7fff7fff },\n    { inputs: [-10, -10], result: 0x80018001 },\n    { inputs: [0.1, 0.1], result: 0x0ccd0ccd },\n    { inputs: [-0.1, -0.1], result: 0xf333f333 },\n    { inputs: [0.5, 0.5], result: 0x40004000 },\n    { inputs: [-0.5, -0.5], result: 0xc001c001 },\n    { inputs: [0.1, 0.5], result: 0x40000ccd },\n    { inputs: [-0.1, -0.5], result: 0xc001f333 },\n\n    // Subnormals\n    { inputs: [kValue.f32.subnormal.positive.max, 1], result: 0x7fff0000 },\n    { inputs: [kValue.f32.subnormal.negative.min, 1], result: 0x7fff0000 },\n  ] as const)\n  .fn(test => {\n    const inputs = test.params.inputs;\n    const got = pack2x16snorm(inputs[0], inputs[1]);\n    const expect = test.params.result;\n\n    test.expect(got === expect, `pack2x16snorm(${inputs}) returned ${got}. Expected ${expect}`);\n  });\n\ng.test('pack2x16unorm')\n  .paramsSimple([\n    // Normals\n    { inputs: [0, 0], result: 0x00000000 },\n    { inputs: [1, 0], result: 0x0000ffff },\n    { inputs: [0, 1], result: 0xffff0000 },\n    { inputs: [1, 1], result: 0xffffffff },\n    { inputs: [-1, -1], result: 0x00000000 },\n    { inputs: [0.1, 0.1], result: 0x199a199a },\n    { inputs: [0.5, 0.5], result: 0x80008000 },\n    { inputs: [0.1, 0.5], result: 0x8000199a },\n    { inputs: [10, 10], result: 0xffffffff },\n\n    // Subnormals\n    { inputs: [kValue.f32.subnormal.positive.max, 1], result: 0xffff0000 },\n  ] as const)\n  .fn(test => {\n    const inputs = test.params.inputs;\n    const got = pack2x16unorm(inputs[0], inputs[1]);\n    const expect = test.params.result;\n\n    test.expect(got === expect, `pack2x16unorm(${inputs}) returned ${got}. Expected ${expect}`);\n  });\n\ng.test('pack4x8snorm')\n  .paramsSimple([\n    // Normals\n    { inputs: [0, 0, 0, 0], result: 0x00000000 },\n    { inputs: [1, 0, 0, 0], result: 0x0000007f },\n    { inputs: [0, 1, 0, 0], result: 0x00007f00 },\n    { inputs: [0, 0, 1, 0], result: 0x007f0000 },\n    { inputs: [0, 0, 0, 1], result: 0x7f000000 },\n    { inputs: [1, 1, 1, 1], result: 0x7f7f7f7f },\n    { inputs: [10, 10, 10, 10], result: 0x7f7f7f7f },\n    { inputs: [-1, 0, 0, 0], result: 0x00000081 },\n    { inputs: [0, -1, 0, 0], result: 0x00008100 },\n    { inputs: [0, 0, -1, 0], result: 0x00810000 },\n    { inputs: [0, 0, 0, -1], result: 0x81000000 },\n    { inputs: [-1, -1, -1, -1], result: 0x81818181 },\n    { inputs: [-10, -10, -10, -10], result: 0x81818181 },\n    { inputs: [0.1, 0.1, 0.1, 0.1], result: 0x0d0d0d0d },\n    { inputs: [-0.1, -0.1, -0.1, -0.1], result: 0xf3f3f3f3 },\n    { inputs: [0.1, -0.1, 0.1, -0.1], result: 0xf30df30d },\n    { inputs: [0.5, 0.5, 0.5, 0.5], result: 0x40404040 },\n    { inputs: [-0.5, -0.5, -0.5, -0.5], result: 0xc1c1c1c1 },\n    { inputs: [-0.5, 0.5, -0.5, 0.5], result: 0x40c140c1 },\n    { inputs: [0.1, 0.5, 0.1, 0.5], result: 0x400d400d },\n    { inputs: [-0.1, -0.5, -0.1, -0.5], result: 0xc1f3c1f3 },\n\n    // Subnormals\n    { inputs: [kValue.f32.subnormal.positive.max, 1, 1, 1], result: 0x7f7f7f00 },\n    { inputs: [kValue.f32.subnormal.negative.min, 1, 1, 1], result: 0x7f7f7f00 },\n  ] as const)\n  .fn(test => {\n    const inputs = test.params.inputs;\n    const got = pack4x8snorm(inputs[0], inputs[1], inputs[2], inputs[3]);\n    const expect = test.params.result;\n\n    test.expect(got === expect, `pack4x8snorm(${inputs}) returned ${u32(got)}. Expected ${expect}`);\n  });\n\ng.test('pack4x8unorm')\n  .paramsSimple([\n    // Normals\n    { inputs: [0, 0, 0, 0], result: 0x00000000 },\n    { inputs: [1, 0, 0, 0], result: 0x000000ff },\n    { inputs: [0, 1, 0, 0], result: 0x0000ff00 },\n    { inputs: [0, 0, 1, 0], result: 0x00ff0000 },\n    { inputs: [0, 0, 0, 1], result: 0xff000000 },\n    { inputs: [1, 1, 1, 1], result: 0xffffffff },\n    { inputs: [10, 10, 10, 10], result: 0xffffffff },\n    { inputs: [-1, -1, -1, -1], result: 0x00000000 },\n    { inputs: [-10, -10, -10, -10], result: 0x00000000 },\n    { inputs: [0.1, 0.1, 0.1, 0.1], result: 0x1a1a1a1a },\n    { inputs: [0.5, 0.5, 0.5, 0.5], result: 0x80808080 },\n    { inputs: [0.1, 0.5, 0.1, 0.5], result: 0x801a801a },\n\n    // Subnormals\n    { inputs: [kValue.f32.subnormal.positive.max, 1, 1, 1], result: 0xffffff00 },\n  ] as const)\n  .fn(test => {\n    const inputs = test.params.inputs;\n    const got = pack4x8unorm(inputs[0], inputs[1], inputs[2], inputs[3]);\n    const expect = test.params.result;\n\n    test.expect(got === expect, `pack4x8unorm(${inputs}) returned ${got}. Expected ${expect}`);\n  });\n"],"file":"conversion.spec.js"}